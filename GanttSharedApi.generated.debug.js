

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

Type.registerNamespace('JsApiUtils'); JsApiUtils.NotifyStateUpdated = function(impl) { window.JsApi && JsApi.ExtensibilityManager && JsApi.ExtensibilityManager.NotifyStateUpdated(impl); }; 

Type.registerNamespace('SP.SPGantt.InstrumentedApi');
              SP.SPGantt.InstrumentedApi.ExecuteWithJsApiLoaded = function(fn) { var fnEx = window.ExecuteOrDelayUntilScriptLoaded && ExecuteOrDelayUntilScriptLoaded; fnEx && fnEx(function() { JsApi.ExtensibilityManager.ExecuteWithJsApisInNamespaceLoaded('SP.SPGantt.InstrumentedApi', fn); }, 'JsApiExtensibilityManager.js'); };

Type.registerNamespace("SP.SPGantt.InstrumentedApi");

SP.SPGantt.InstrumentedApi.ClientApi = {
   None: 0,
                SPGantt : 1
        
        }  
        SP.SPGantt.InstrumentedApi.JsGridColumn = function ()
        {
           this.isVisible;
           this.columnKey;
           this.name;
        }
        SP.SPGantt.InstrumentedApi.JsGridColumn.registerClass("SP.SPGantt.InstrumentedApi.JsGridColumn");
        SP.SPGantt.InstrumentedApi.JsGridProperty = function ()
        {
           this.hasDataValue;
           this.hasLocalizedValue;
           this.dataValue;
           this.localizedValue;
        }
        SP.SPGantt.InstrumentedApi.JsGridProperty.registerClass("SP.SPGantt.InstrumentedApi.JsGridProperty");
        SP.SPGantt.InstrumentedApi.JsGridSettableValue = function ()
        {
           this.fieldKey;
           this.propertyValue;
        }
        SP.SPGantt.InstrumentedApi.JsGridSettableValue.registerClass("SP.SPGantt.InstrumentedApi.JsGridSettableValue");

        SP.SPGantt.InstrumentedApi.NodeType = function () {}
        SP.SPGantt.InstrumentedApi.NodeType.prototype = {
                    
        Leaf : 0,
        
        Expanded : 1,
        
        Collapsed : 2

        };
        SP.SPGantt.InstrumentedApi.NodeType.registerEnum("SP.SPGantt.InstrumentedApi.NodeType", false);


SP.SPGantt.InstrumentedApi.JsApiWrapperFactory = function()
{
   function GetWrappedFunction(itemName, impl) 
   { 
       return function() 
       { 
           return impl[itemName].apply(impl, arguments); 
       }; 
   };

   return {
      Create: function(impl, shimtypeName, apiId)
      {
         // first level wrapper
         var ret = {};
         for (var itemName in impl)
         {
             if (impl[itemName] != null && impl[itemName].constructor == Function)
             {
                 ret[itemName] = GetWrappedFunction(itemName, impl);
             }
         }
         ret._impl = impl;
         ret._shimTypeName = shimtypeName;
         impl.get_Api = function() { return ret; }
         // note: there's bug in script# where it doesn't respect the [PreserveCase] attribute
         // on any properties that appear on interfaces, as such, we just put the name method here with casings.
         ret.get_impl = ret.get_Impl = function() { return this._impl; };
         ret.get_apiNamespaceKey = ret.get_ApiNamespaceKey = function() { return "SP.SPGantt.InstrumentedApi"; };
         ret.get_ApiType = ret.get_apiType = function() { return apiId; };         
         JsApi.ExtensibilityManager._NotifyApiPresent(ret);
         return ret;
      }
   };
}();


SP.SPGantt.InstrumentedApi.SPGantt = function()
{
   // this function is going to be the constructor for our class
   var shimClass = function(impl)
   { 
      return SP.SPGantt.InstrumentedApi.JsApiWrapperFactory.Create(
        impl, 
        "SP.SPGantt.InstrumentedApi.SPGantt.Shim",
        // SP.SPGantt.InstrumentedApi.ClientApi.SPGantt
        1);
   };
   
   shimClass.WrapImplementationInApiAndMarkInitComplete = function(impl) 
   {
        SP.SPGantt.InstrumentedApi.ExecuteWithJsApiLoaded(
            function() 
            {
                var api = new SP.SPGantt.InstrumentedApi.SPGantt(impl);
                JsApi.ExtensibilityManager._NotifyApiInitComplete(api);
            });
   };
   
   return shimClass;
}();

if( window.Sys != null && Sys.Application != null ){
    Sys.Application.notifyScriptLoaded();
}

NotifyScriptLoadedAndExecuteWaitingJobs("GanttSharedApi.generated.js");
  
