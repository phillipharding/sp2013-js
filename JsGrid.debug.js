function $_global_jsgrid() {
    if (!Type.isNamespace('SP'))
        Type.registerNamespace('SP');
    if (!Type.isNamespace('SP.JsGrid.Internal'))
        Type.registerNamespace('SP.JsGrid');
    if (!Type.isNamespace('SP.JsGrid.Internal'))
        Type.registerNamespace('SP.JsGrid.Internal');
    if (!Type.isNamespace('SP.Internal'))
        Type.registerNamespace('SP.Internal');
    if (!Type.isNamespace('SP.Utilities'))
        Type.registerNamespace('SP.Utilities');
    SP.JsGrid.Internal.AddColumnManager = function(objBag) {
        var _objBag = objBag;
        var _delegateMgr;
        var _this = this;

        function Init() {
            _delegateMgr = _objBag.delegateMgr;
            _objBag.addColumnMgr = this;
        }
        this.PopulateNewColumnMenu = function(columnMenu) {
            _delegateMgr.Apply(SP.JsGrid.DelegateType.AddNewColumnMenuItems, columnMenu);
        };
        this.ShouldShowAddColumnMenu = function() {
            return _objBag.showAddColumnMenu == true;
        };
        this.Dispose = function() {
            _objBag.addColumnMgr = null;
        };
        Init();
    };
    SP.JsGrid.Internal.ColumnConfigurationDialog = function(allColumns, bMovableColumns, bResizableColumns, objBag, fnSetColumns, fnOnClose) {
        var shown = false;
        var grid;
        var upBtn;
        var dnBtn;
        var okBtn;
        var cancelBtn;
        var parentElem;

        function ApplyChanges(view, tableCache) {
            function ColumnConfigUpdate() {
                var items = [];
                var isValidConfigUpdate;

                this.InitFromColumnConfigGridData = function(view, tableCache) {
                    var selectedRecords = (grid.GetCheckSelectionManager()).GetCheckedRecordKeys();

                    for (var i = 0; i < view.length; i++) {
                        var rec = tableCache.GetCachedRecord(view[i]);
                        var colSelected = rec.key() in selectedRecords;

                        isValidConfigUpdate = isValidConfigUpdate || colSelected;
                        items.push({
                            fieldKey: rec.key(),
                            width: rec.GetDataValue('ColWidth'),
                            isVisible: colSelected
                        });
                    }
                };
                this.InitFromCurrent = function() {
                    var colArray = allColumns.GetColumnArray();

                    for (var i = 0; i < colArray.length; i++) {
                        items.push({
                            fieldKey: colArray[i].columnKey,
                            width: colArray[i].width,
                            isVisible: colArray[i].isVisible
                        });
                    }
                };
                this.ApplyToCurrent = function() {
                    var newColArray = [];

                    indicCol = allColumns.GetColumnByKey(SP.JsGrid.RecordIndicatorCheckboxColumnKey);
                    if (indicCol != null) {
                        newColArray.push(indicCol);
                    }
                    for (var i = 0; i < items.length; i++) {
                        var curCol = allColumns.GetColumnByKey(items[i].fieldKey);

                        curCol.isVisible = items[i].isVisible;
                        curCol.width = items[i].width;
                        newColArray.push(curCol);
                    }
                    return new SP.JsGrid.ColumnInfoCollection(newColArray);
                };
                this.IsValidUpdate = function() {
                    return isValidConfigUpdate;
                };
            }
            if (grid.AnyErrors()) {
                alert(SP.JsGrid.Res.columnConfigurationErrorsInGrid);
                return false;
            }
            var newColUpdater = new ColumnConfigUpdate();
            var oldColUpdater = new ColumnConfigUpdate();

            newColUpdater.InitFromColumnConfigGridData(view, tableCache);
            if (!newColUpdater.IsValidUpdate()) {
                alert(SP.JsGrid.Res.invalidColumnConfigurationNoColumns);
                return false;
            }
            oldColUpdater.InitFromCurrent();
            objBag.commandMgr.Execute({
                Apply: function() {
                    fnSetColumns(newColUpdater.ApplyToCurrent());
                },
                Undo: function() {
                    fnSetColumns(oldColUpdater.ApplyToCurrent());
                }
            }, "Column Configuration Update", SP.JsGrid.CommandManager.CommandType.Explicit);
            return true;
        }
        function ShiftSelection(bUp, rowViewParams) {
            function CloneView() {
                var r = new Array(rowViewParams.view.length);

                for (var i = 0; i < r.length; i++) {
                    r[i] = rowViewParams.view[i];
                }
                return r;
            }
            function ApplySelectedItems(items, selectionFnName, bAppend) {
                var bAddedAny = false;

                for (var i = 0; i < items.length; i++) {
                    grid[selectionFnName](items[0].keys[0], items[0].keys[items[0].keys.length - 1], bAppend || bAddedAny);
                    bAddedAny = true;
                }
                return bAddedAny;
            }
            var rkSet = new SP.Utilities.Set();

            rkSet.AddArray(grid.GetSelectedRecordKeys());
            var firstIdx, lastIdx;

            for (var i = 0; i < rowViewParams.view.length; i++) {
                if (firstIdx == null && rkSet.Contains(rowViewParams.view[i])) {
                    firstIdx = i;
                }
                else if (firstIdx != null && lastIdx == null && !rkSet.Contains(rowViewParams.view[i])) {
                    lastIdx = i - 1;
                }
            }
            var newView;

            if (firstIdx != null) {
                if (bUp && firstIdx > 0) {
                    newView = CloneView();
                    SP.Internal.JS.MoveItemInArray(newView, firstIdx - 1, lastIdx == null ? newView.length - 1 : lastIdx);
                }
                else if (!bUp && lastIdx != null) {
                    newView = CloneView();
                    SP.Internal.JS.MoveItemInArray(newView, lastIdx + 1, firstIdx);
                }
            }
            if (newView != null) {
                var rowRanges = grid.GetSelectedRowRanges();
                var columnRanges = grid.GetSelectedColumnRanges();
                var cellRanges = grid.GetSelectedCellRanges();
                var topIdx = grid.GetTopRecordIndex();

                rowViewParams.topViewIdx = topIdx;
                rowViewParams.view = newView;
                grid.SetRowView(rowViewParams);
                var bUpdatedSelection = false;

                bUpdatedSelection = ApplySelectedItems(rowRanges, 'SelectRowRangeByKey', bUpdatedSelection);
                bUpdatedSelection = ApplySelectedItems(columnRanges, 'SelectColumnRangeByKey', bUpdatedSelection);
                for (var i = 0; i < cellRanges.length; i++) {
                    var rowRangeKeys = cellRanges[i].rowRange.keys;
                    var colRangeKeys = cellRanges[i].colRange.keys;

                    grid.SelectCellRangeByKey(rowRangeKeys[0], rowRangeKeys[rowRangeKeys.length - 1], colRangeKeys[0], colRangeKeys[colRangeKeys.length - 1], bUpdatedSelection);
                }
            }
        }
        function InitializeColConfigGridRows(params) {
            params.tableCache = new SP.JsGrid.TableCache();
            var colArray = allColumns.GetColumnArray();
            var view = [];
            var records = [];
            var recordFactory = new SP.JsGrid.RecordFactory(params.tableViewParams.gridFieldMap, 'FieldKey');
            var initialCheckedRecordKeys = [];
            var initialCheckboxDisabledRecordKeys = [];

            for (var i = 0; i < colArray.length; i++) {
                var column = colArray[i];
                var columnKey = column.columnKey;

                if (columnKey != SP.JsGrid.RecordIndicatorCheckboxColumnKey) {
                    view.push(columnKey);
                    records[columnKey] = recordFactory.MakeRecord({
                        'FieldKey': columnKey,
                        'ColWidth': column.width
                    }, {
                        'ColName': column.name,
                        'ColWidth': column.width.toString()
                    }, true);
                    if (column.isVisible) {
                        initialCheckedRecordKeys.push(columnKey);
                    }
                    if (!column.isHidable) {
                        initialCheckboxDisabledRecordKeys.push(columnKey);
                    }
                }
            }
            params.tableCache.AddRecordsToCache(records);
            params.tableViewParams.checkSelectionCheckedRecordKeys = initialCheckedRecordKeys;
            params.tableViewParams.checkSelectionCheckboxDisabledRecordKeys = initialCheckboxDisabledRecordKeys;
            params.tableViewParams.rowViewParams.view = view;
        }
        function InitializeColConfigGridColumns(tableViewParams) {
            tableViewParams.columns = new SP.JsGrid.ColumnInfoCollection([new SP.JsGrid.ColumnInfo(SP.JsGrid.Res.columnName, null, 'ColName', 170), new SP.JsGrid.ColumnInfo(SP.JsGrid.Res.columnWidth, null, 'ColWidth', 145)]);
            if (bResizableColumns) {
                (tableViewParams.columns.GetColumnByKey('ColWidth')).fnGetCellEditMode = function(record, fieldKey) {
                    return (allColumns.GetColumnByKey(record.key())).isResizable ? SP.JsGrid.EditMode.ReadWrite : SP.JsGrid.EditMode.ReadOnly;
                };
            }
            else {
                tableViewParams.bEditingEnabled = false;
            }
            tableViewParams.gridFieldMap = {
                'FieldKey': new SP.JsGrid.GridField('FieldKey', true, false),
                'ColName': new SP.JsGrid.GridField('ColName', false, true),
                'ColWidth': new SP.JsGrid.GridField('ColWidth', true, true)
            };
            tableViewParams.gridFieldMap['ColName'].SetEditMode(SP.JsGrid.EditMode.ReadOnly);
            tableViewParams.gridFieldMap['ColName'].SetSingleValuePropType(SP.JsGrid.PropertyType.Utils.GetPropType('String'));
            var basePropType = SP.JsGrid.Internal.Property.GetPropType('JSNumber');
            var colWidthPropType = SP.Internal.JS.object(basePropType);

            colWidthPropType.ID = 'ColWidthJSNumber';
            colWidthPropType.BeginValidateNormalizeConvert = function(recordKey, fieldKey, newValue, bIsLocalized, fnCallback, fnError) {
                basePropType.BeginValidateNormalizeConvert.apply(this, [recordKey, fieldKey, newValue, bIsLocalized, PostProcess, fnError]);
                function PostProcess(result) {
                    result.isValid = result.isValid && result.dataValue > 0 && result.dataValue <= 1000;
                    fnCallback(result);
                }
            };
            SP.JsGrid.PropertyType.RegisterNewDerivedCustomPropType(colWidthPropType, 'JSNumber');
            tableViewParams.gridFieldMap['ColWidth'].SetSingleValuePropType(colWidthPropType);
        }
        this.GetHeight = function() {
            return 360;
        };
        this.GetWidth = function() {
            return 600;
        };
        function Close(fnOnClose) {
            try {
                grid.Dispose();
            }
            catch (e) { }
            $clearHandlers(upBtn);
            $clearHandlers(dnBtn);
            $clearHandlers(okBtn);
            $clearHandlers(cancelBtn);
            $clearHandlers(parentElem);
            if (fnOnClose != null) {
                fnOnClose();
            }
        }
        this.Close = function() {
            Close();
        };
        this.Open = function(parentEl, fnOnClose) {
            parentElem = parentEl;
            parentElem.innerHTML = '<div style="position:relative;overflow:auto;text-align:' + objBag.RTL.left + ';padding:10px;height:' + (this.GetHeight() - 20) + 'px;width:' + (this.GetWidth() - 20) + 'px;">' + '<table>' + '<tr>' + '<td>' + '<div id="' + objBag.gridId + '_ccGridParentElement" style="height:280px;width:400px;float:' + objBag.RTL.right + ';"></div>' + '</td>' + '<td style="height:280px;padding-left:10px;vertical-align:middle;">' + '<input id="' + objBag.gridId + '_ccUp" class="ms-ButtonHeightWidth" type="button" value="' + SP.JsGrid.Res.moveUp + '">' + '<div style="height:15px;"></div>' + '<input id="' + objBag.gridId + '_ccDown" class="ms-ButtonHeightWidth" type="button" value="' + SP.JsGrid.Res.moveDown + '">' + '</td>' + '</tr>' + '<tr style="padding-top:15px;">' + '<td>' + '<input id="' + objBag.gridId + '_ccOK" class="ms-ButtonHeightWidth" type="button" value="' + SP.JsGrid.Res.ok + '" style="float:' + objBag.RTL.right + ';">' + '</td>' + '<td style="padding-left:10px;">' + '<input id="' + objBag.gridId + '_ccCancel" class="ms-ButtonHeightWidth" type="button" value="' + SP.JsGrid.Res.cancel + '">' + '</td>' + '</tr>' + '</table>' + '</div>';
            var gridParentElem = $get(objBag.gridId + '_ccGridParentElement');

            upBtn = $get(objBag.gridId + '_ccUp');
            dnBtn = $get(objBag.gridId + '_ccDown');
            upBtn.disabled = (dnBtn.disabled = !bMovableColumns);
            okBtn = $get(objBag.gridId + '_ccOK');
            cancelBtn = $get(objBag.gridId + '_ccCancel');
            grid = new SP.JsGrid.JsGridControl(gridParentElem, false);
            var gridParams = new SP.JsGrid.JsGridControl.Parameters();

            gridParams.name = SP.JsGrid.Res.columnConfigurationName;
            InitializeColConfigGridColumns(gridParams.tableViewParams);
            InitializeColConfigGridRows(gridParams);
            gridParams.tableViewParams.bEditingEnabled = true;
            gridParams.tableViewParams.bRecordIndicatorCheckboxesEnabled = true;
            gridParams.tableViewParams.operationalConstantsFieldKeyMap = {};
            gridParams.tableViewParams.bHidableColumns = false;
            gridParams.tableViewParams.bSortableColumns = false;
            gridParams.tableViewParams.bAutoFilterableColumns = false;
            gridParams.tableViewParams.allowedSelectionTypes = SP.JsGrid.SelectionTypeFlags.SingleRowRange | SP.JsGrid.SelectionTypeFlags.SingleColRange | SP.JsGrid.SelectionTypeFlags.SingleCell;
            gridParams.tableViewParams.messageOverrides = {
                localizedConversionError: SP.JsGrid.Res.columnConfigurationInvalidColumnWidth
            };
            grid.Init(gridParams);
            setTimeout(function() {
                grid.Focus();
            }, 0);
            $addHandler(upBtn, 'click', function() {
                ShiftSelection(true, gridParams.tableViewParams.rowViewParams);
            });
            $addHandler(dnBtn, 'click', function() {
                ShiftSelection(false, gridParams.tableViewParams.rowViewParams);
            });
            $addHandler(okBtn, 'click', function() {
                if (ApplyChanges(gridParams.tableViewParams.rowViewParams.view, gridParams.tableCache)) {
                    Close(fnOnClose);
                }
                else {
                    grid.Focus();
                }
            });
            $addHandler(cancelBtn, 'click', function() {
                Close(fnOnClose);
            });
            $addHandler(parentElem, 'keydown', function() {
                var letter = (String.fromCharCode(event.keyCode)).toUpperCase();
                var ctrlDown = event.ctrlKey;

                if (ctrlDown && letter == 'Z') {
                    gridParams.commandMgr.Undo();
                }
                else if (ctrlDown && letter == 'Y') {
                    gridParams.commandMgr.Redo();
                }
            });
        };
    };
    SP.JsGrid.Internal.ColumnMenuManager = function(objBag, autoFilterState, autoFilterEntries, gridFieldMap, fnGetLocStr) {
        var _this = this;
        var cache = autoFilterEntries || {};
        var columnMenuLoading, columnMenu;
        var loadingMenuItem;
        var paneMgr = objBag.paneMgr;
        var delegateMgr = objBag.delegateMgr;
        var addColumnMgr;
        var jsGridObj = objBag.jsGridObj;
        var bDisposed = false;

        function Init() {
            autoFilterState = autoFilterState == null ? {} : autoFilterState;
            jsGridObj.AttachEvent(SP.JsGrid.EventType.OnPropertyChanged, OnPropertyChanged);
            jsGridObj.AttachEvent(SP.JsGrid.EventType.OnRecordInserted, OnRecordInserted);
            jsGridObj.AttachEvent(SP.JsGrid.EventType.OnRecordDeleted, OnRecordDeleted);
            addColumnMgr = new SP.JsGrid.Internal.AddColumnManager(objBag);
        }
        this.Dispose = function() {
            jsGridObj.DetachEvent(SP.JsGrid.EventType.OnPropertyChanged, OnPropertyChanged);
            jsGridObj.DetachEvent(SP.JsGrid.EventType.OnRecordInserted, OnRecordInserted);
            jsGridObj.DetachEvent(SP.JsGrid.EventType.OnRecordDeleted, OnRecordDeleted);
            addColumnMgr.Dispose();
            bDisposed = true;
        };
        this.SetAutoFilterState = function(state) {
            autoFilterState = state == null ? {} : state;
            this.ClearCache();
        };
        this.SeedAutoFilterEntryCache = function(entries) {
            cache = entries || {};
        };
        this.ClearCache = function() {
            cache = {};
        };
        this.CanExpandMenu = function(column, bHidableColumns, bSortableColumns, bAutoFilterableColumns, bResizableColumns) {
            return bHidableColumns || bResizableColumns || bSortableColumns && delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.Sort) || bAutoFilterableColumns && column.isAutoFilterable && delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.GetAutoFilterEntries) && delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.AutoFilter) && delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.LaunchFilterDialog) || column.columnKey == SP.JsGrid.RecordIndicatorCheckboxColumnKey || delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.WillAddColumnMenuItems) && delegateMgr.Apply(SP.JsGrid.DelegateType.WillAddColumnMenuItems, column.columnKey);
        };
        this.ExpandMenu = function(column, pos, fnOnColumnMenuHidden, bHidableColumns, bSortableColumns, bAutoFilterableColumns, attachElement) {
            var bMenuHidden = false;

            function OnMenuHidden() {
                bMenuHidden = true;
                fnOnColumnMenuHidden();
            }
            var columnKey = column.columnKey;
            var menuToShow;
            var menuParentNode;

            if (!objBag.spGrid) {
                attachElement = null;
                menuParentNode = document.body;
            }
            else {
                menuParentNode = attachElement || jsGridObj.parentNode;
            }
            columnMenuLoading = new SP.JsGrid.ContextMenu(menuParentNode, jsGridObj.parentNode.id + "_columnmenuloading");
            columnMenu = (menuToShow = new SP.JsGrid.ContextMenu(menuParentNode, jsGridObj.parentNode.id + "_columnmenu"));
            columnMenuLoading.EnableCompactMode();
            columnMenu.EnableCompactMode();
            delegateMgr.Apply(SP.JsGrid.DelegateType.AddColumnMenuItems, columnKey, InsertMenuItemParallel, InsertSeparatorParallel);
            if (bHidableColumns && column.isHidable) {
                InsertSeparatorParallelIfNeeded();
                InsertMenuItemParallel(fnGetLocStr('HideColumn'), function() {
                    jsGridObj.HideColumn(columnKey);
                }, SP.JsGrid.ImagesDirectory + "jsgrid-hide-column.png");
            }
            if (!column.isFooter) {
                if (objBag.spGrid) {
                    InsertMenuItemParallel(fnGetLocStr('RenameColumn'), function() {
                        OnColumnRename(columnKey);
                    }, SP.JsGrid.ImagesDirectory + "editheader.png", null, null, null);
                }
            }
            else {
                addColumnMgr.PopulateNewColumnMenu(columnMenu);
            }
            AddColumnConfigurationDialogMenuItem();
            if (bSortableColumns && delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.Sort) && column.isSortable) {
                InsertSeparatorParallelIfNeeded();
                InsertMenuItemParallel(fnGetLocStr('SortAsc'), function() {
                    OnSort(columnKey, false);
                }, GetThemedLocalizedImageUrl("SortUpGlyph.png"));
                InsertMenuItemParallel(fnGetLocStr('SortDesc'), function() {
                    OnSort(columnKey, true);
                }, GetThemedLocalizedImageUrl("SortDownGlyph.png"));
            }
            if (bAutoFilterableColumns && column.isAutoFilterable && delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.GetAutoFilterEntries) && delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.AutoFilter) && delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.LaunchFilterDialog)) {
                InsertSeparatorParallelIfNeeded();
                InsertMenuItemParallel(fnGetLocStr('ClearFilter'), function() {
                    ClearColumnFilter(columnKey);
                }, columnKey in autoFilterState ? GetThemedImageUrl("DeleteFilterGlyph.png") : GetThemedImageUrl("DisabledDeleteFilterGlyph.png"), null, !(columnKey in autoFilterState));
                if (columnKey in cache) {
                    AddAutoFilterMenuItems(columnKey);
                }
                else {
                    loadingMenuItem = columnMenuLoading.InsertMenuItem(fnGetLocStr('LoadingMsg'), null, null, null, true);
                    menuToShow = columnMenuLoading;
                    RequestAutoFilterEntries(columnKey, function OnAutoFilterRequestComplete() {
                        if (!bMenuHidden && !bDisposed) {
                            if (columnKey in cache) {
                                AddAutoFilterMenuItems(columnKey);
                            }
                            columnMenuLoading.SetOnMouseOut(null);
                            columnMenuLoading.Hide();
                            if (attachElement != null) {
                                columnMenu.ShowAttached(attachElement, OnMenuHidden);
                            }
                            else {
                                columnMenu.Show(pos, OnMenuHidden);
                            }
                        }
                    });
                }
            }
            if (columnKey == SP.JsGrid.RecordIndicatorCheckboxColumnKey) {
                InsertSeparatorParallelIfNeeded();
                InsertMenuItemParallel(fnGetLocStr('CheckAllRecords'), function() {
                    (jsGridObj.GetCheckSelectionManager()).CheckAllRecords();
                }, null, null, false, false);
                InsertMenuItemParallel(fnGetLocStr('ClearCheckedRecords'), function() {
                    (jsGridObj.GetCheckSelectionManager()).ClearCheckedRecords();
                }, null, null, false, false);
            }
            if (!menuToShow.IsEmpty()) {
                if (attachElement != null) {
                    menuToShow.ShowAttached(attachElement, OnMenuHidden);
                }
                else {
                    menuToShow.Show(pos, OnMenuHidden);
                }
            }
            return !menuToShow.IsEmpty();
        };
        function AddColumnConfigurationDialogMenuItem() {
            var defd;

            try {
                defd = typeof SP.UI.ModalDialog.showModalDialog;
            }
            catch (e) { }
            var childDialog = defd && SP.UI.ModalDialog.get_childDialog();
            var childDialogUrl = childDialog && childDialog.get_url();

            if (!objBag.spGrid && (childDialogUrl == null || !document.URL.startsWith(childDialogUrl))) {
                InsertMenuItemParallel(fnGetLocStr('ConfigureCols'), function() {
                    objBag.paneMgr.ShowColumnConfigurationDialog();
                }, SP.JsGrid.ImagesDirectory + "configcolumns.png");
            }
        }
        function AddAutoFilterMenuItems(columnKey) {
            function OnAutoFilter(e) {
                AddColumnFilter(columnKey, e.dataValue);
            }
            Sys.Debug.assert(columnKey in cache, 'Expected AutoFilter cache entry ' + columnKey + ' is missing');
            var entries = cache[columnKey];
            var columnState = autoFilterState[columnKey] === '' ? null : autoFilterState[columnKey];

            if (entries.length != 0) {
                for (var i = 0; i < entries.length; i++) {
                    var entry = entries[i];

                    columnMenu.InsertMenuItem(entry.displayString == null || entry.displayString == '' ? SP.JsGrid.Res.autoFilterBlank : entry.displayString, (function(e) {
                        return function() {
                            OnAutoFilter(e);
                        };
                    })(entry), null, null, false, columnKey in autoFilterState && gridFieldMap[columnKey].CompareSingleDataEqual(entry.dataValue === '' ? null : entry.dataValue, columnState));
                }
            }
            else if (!objBag.spGrid) {
                columnMenu.InsertMenuItem(fnGetLocStr('FilterMenuItem'), function() {
                    delegateMgr.Apply(SP.JsGrid.DelegateType.LaunchFilterDialog, columnKey);
                }, SP.JsGrid.ImagesDirectory + 'filter.gif');
            }
        }
        function RequestAutoFilterEntries(initiatingColumnKey, fnOnRequestComplete) {
            var columns = objBag.jsGridObj.GetColumns();
            var columnKeys = [];

            for (var i = 0; i < columns.length; i++) {
                var key = columns[i].columnKey;

                if (!(key in cache)) {
                    columnKeys.push(key);
                }
            }
            delegateMgr.Apply(SP.JsGrid.DelegateType.GetAutoFilterEntries, autoFilterState, initiatingColumnKey, columnKeys, OnSuccess, fnOnRequestComplete);
            function OnSuccess(entries) {
                for (var key in entries) {
                    cache[key] = entries[key];
                }
                fnOnRequestComplete();
            }
        }
        function AddColumnFilter(columnKey, filterValue) {
            var newState = SP.Internal.JS.CloneObj(autoFilterState, false);

            newState[columnKey] = filterValue;
            delegateMgr.Apply(SP.JsGrid.DelegateType.AutoFilter, newState);
            _this.ClearCache();
        }
        function ClearColumnFilter(columnKey) {
            var newState = SP.Internal.JS.CloneObj(autoFilterState, false);

            delete newState[columnKey];
            delegateMgr.Apply(SP.JsGrid.DelegateType.AutoFilter, newState);
            _this.ClearCache();
        }
        function OnPropertyChanged(args) {
            delete cache[args.fieldKey];
        }
        function OnRecordInserted(args) {
            _this.ClearCache();
        }
        function OnRecordDeleted(args) {
            _this.ClearCache();
        }
        function InsertMenuItemParallel(text, fnItemClicked, imageUri, imageAltText, bDisabled, bChecked) {
            columnMenuLoading.InsertMenuItem(text, fnItemClicked, imageUri, imageAltText, bDisabled, bChecked);
            columnMenu.InsertMenuItem(text, fnItemClicked, imageUri, imageAltText, bDisabled, bChecked);
        }
        function InsertSeparatorParallel() {
            columnMenuLoading.InsertSeparator();
            columnMenu.InsertSeparator();
        }
        function InsertSeparatorParallelIfNeeded() {
            if (!columnMenu.IsEmpty()) {
                InsertSeparatorParallel();
            }
        }
        function OnSort(columnKey, bDescending) {
            delegateMgr.Apply(SP.JsGrid.DelegateType.Sort, [{
                columnName: columnKey,
                isDescending: bDescending
            }]);
        }
        function OnNextPage() {
            delegateMgr.Apply(SP.JsGrid.DelegateType.NextPage);
        }
        function OnColumnRename(columnKey) {
            paneMgr.RenameColumn(columnKey);
        }
        Init();
    };
    SP.JsGrid.CommandManager = function(maxUndoDepth) {
        var lockCount = 0;
        var undoStack = [];
        var redoStack = [];
        var undoRealCmdCount = 0;
        var redoRealCmdCount = 0;
        var groupStack = [];
        var _cmdTypeEnum = SP.JsGrid.CommandManager.CommandType;
        var bApplyingOrUndoing;
        var bExecuting;
        var preExecuteNotifiers = [];

        this.IsUndoEnabled = function() {
            return maxUndoDepth > 0;
        };
        this.OpenGroup = function() {
            if (bApplyingOrUndoing) {
                Sys.Debug.assert(false, "Cannot open a Command Group within an Apply/Undo");
                return;
            }
            groupStack.push([]);
        };
        this.CloseGroup = function(name, type, bReverseOnUndo) {
            if (bApplyingOrUndoing) {
                Sys.Debug.assert(false, "Cannot close a Command Group within an Apply/Undo");
                return;
            }
            Sys.Debug.assert(groupStack.length != 0);
            var group = groupStack.pop();

            if (group.length == 0) {
                return;
            }
            var groupCmd = group.length == 1 ? group[0] : new SP.JsGrid.CommandManager.AggregateCommand(group, bReverseOnUndo);

            AppendToUndoStack(groupCmd, name, type);
        };
        this.Execute = function(cmd, name, type) {
            if (bApplyingOrUndoing) {
                Sys.Debug.assert(false, "Cannot add a command to the undo stack within an Apply/Undo");
                cmd.Apply();
                return;
            }
            CleanUpRedoStack();
            AppendToUndoStack(cmd, name, type);
            PreExecuteNotify();
            bExecuting = true;
            cmd.Apply();
            bExecuting = false;
        };
        this.Undo = function() {
            var namedCmd;

            try {
                if (lockCount != 0 || groupStack.length > 0 || !undoRealCmdCount || bApplyingOrUndoing || bExecuting) {
                    return false;
                }
                PreExecuteNotify();
                bApplyingOrUndoing = true;
                do {
                    namedCmd = undoStack.pop();
                    namedCmd.cmd.Undo();
                    redoStack.push(namedCmd);
                } while (namedCmd.type == _cmdTypeEnum.Implicit);
                undoRealCmdCount--;
                redoRealCmdCount++;
            }
            catch (ex) {
                ULS.SendExceptionJS(ULSCat.msoulscat_WSS_JsGrid, ex);
                if (ex instanceof InvalidChangeKeyError) {
                    throw new CommandManagerError('Failed to Undo command with Name:' + namedCmd.name + ' and Type:' + namedCmd.type + ' due to Invalid change key: ' + ((namedCmd.cmd.GetChangeKey()).GetVersionNumber()).toString());
                }
                else {
                    throw ex;
                }
            }
            finally {
                bApplyingOrUndoing = false;
            }
            return true;
        };
        this.Redo = function() {
            var namedCmd;

            try {
                if (lockCount != 0 || groupStack.length != 0 || !redoRealCmdCount || bApplyingOrUndoing || bExecuting) {
                    return false;
                }
                PreExecuteNotify();
                bApplyingOrUndoing = true;
                do {
                    namedCmd = redoStack.pop();
                    namedCmd.cmd.Apply();
                    undoStack.push(namedCmd);
                } while (namedCmd.type == _cmdTypeEnum.Implicit);
                redoRealCmdCount--;
                undoRealCmdCount++;
            }
            catch (ex) {
                ULS.SendExceptionJS(ULSCat.msoulscat_WSS_JsGrid, ex);
                if (ex instanceof InvalidChangeKeyError) {
                    throw new CommandManagerError('Failed to Redo command with Name:' + namedCmd.name + ' and Type:' + namedCmd.type + ' due to Invalid change key: ' + ((namedCmd.cmd.GetChangeKey()).GetVersionNumber()).toString());
                }
                else {
                    throw ex;
                }
            }
            finally {
                bApplyingOrUndoing = false;
            }
            return true;
        };
        this.CanUndo = function() {
            return undoRealCmdCount > 0;
        };
        this.CanRedo = function() {
            return redoRealCmdCount > 0;
        };
        this.GetUndoStack = function() {
            return undoStack;
        };
        this.GetRedoStack = function() {
            return redoStack;
        };
        this.ClearUndoStack = function() {
            CleanUpUndoStack();
        };
        this.ClearRedoStack = function() {
            CleanUpRedoStack();
        };
        this.Lock = function() {
            lockCount++;
        };
        this.Unlock = function() {
            lockCount = Math.max(lockCount - 1, 0);
        };
        this.AddPreExecuteNotifier = function(fnPreExecuteWaitCallback) {
            preExecuteNotifiers.push(fnPreExecuteWaitCallback);
        };
        this.RemovePreExecuteNotifier = function(fnPreExecuteWaitCallback) {
            var r = false;

            for (var i = 0; i < preExecuteNotifiers.length; i++) {
                if (preExecuteNotifiers[i] == fnPreExecuteWaitCallback) {
                    preExecuteNotifiers.splice(i, 1);
                    i--;
                    r = true;
                    break;
                }
            }
            return r;
        };
        function PreExecuteNotify() {
            var currentNotifers = [].concat(preExecuteNotifiers);

            for (var i = 0; i < currentNotifers.length; i++) {
                currentNotifers[i]();
            }
        }
        function CleanUpUndoStack() {
            for (var i = 0; i < undoStack.length; i++) {
                DisposeCmd(undoStack[i].cmd, SP.JsGrid.CommandManager.DisposeState.Applied);
            }
            undoStack = [];
            undoRealCmdCount = 0;
        }
        function CleanUpRedoStack() {
            if (redoStack.length != 0) {
                for (var i = redoStack.length - 1; i >= 0; i--) {
                    DisposeCmd(redoStack[i].cmd, SP.JsGrid.CommandManager.DisposeState.Unapplied);
                }
                redoStack = [];
                redoRealCmdCount = 0;
            }
        }
        function AppendToUndoStack(cmd, name, type) {
            if (groupStack.length != 0) {
                groupStack[groupStack.length - 1].push(cmd);
            }
            else if (undoRealCmdCount != 0 || type != _cmdTypeEnum.Implicit) {
                undoStack.push({
                    cmd: cmd,
                    name: name,
                    type: type
                });
                undoRealCmdCount += type != _cmdTypeEnum.Implicit ? 1 : 0;
                if (undoStack.length > maxUndoDepth) {
                    if (undoStack[0].type != _cmdTypeEnum.Implicit) {
                        undoRealCmdCount--;
                    }
                    DisposeCmd((undoStack.shift()).cmd, SP.JsGrid.CommandManager.DisposeState.Applied);
                    while (undoStack.length && undoStack[0].type == _cmdTypeEnum.Implicit) {
                        DisposeCmd((undoStack.shift()).cmd, SP.JsGrid.CommandManager.DisposeState.Applied);
                    }
                }
            }
        }
        function DisposeCmd(cmd, state) {
            if (cmd.Dispose != null) {
                cmd.Dispose(state);
            }
        }
    };
    SP.JsGrid.CommandManager.CommandType = {
        Explicit: 0,
        Implicit: 1
    };
    SP.JsGrid.CommandManager.DisposeState = {
        Applied: 0,
        Unapplied: 1
    };
    SP.JsGrid.CommandManager.AggregateCommand = function(cmdArray, bReverseOnUndo) {
        Sys.Debug.assert(cmdArray != null && cmdArray.length != 0);
        this.cmdArray = cmdArray;
        this.bReverseOnUndo = bReverseOnUndo;
    };
    SP.JsGrid.CommandManager.AggregateCommand.prototype = {
        Apply: function() {
            var len = this.cmdArray.length;

            for (var i = 0; i < len; i++) {
                this.cmdArray[i].Apply();
            }
        },
        Undo: function() {
            var len = this.cmdArray.length, i;

            if (this.bReverseOnUndo) {
                for (i = len - 1; i >= 0; i--) {
                    this.cmdArray[i].Undo();
                }
            }
            else {
                for (i = 0; i < len; i++) {
                    this.cmdArray[i].Undo();
                }
            }
        },
        Dispose: function(state) {
            var len = this.cmdArray.length;

            for (var i = 0; i < len; i++) {
                var cmd = this.cmdArray[i];

                if (cmd.Dispose != null) {
                    cmd.Dispose(state);
                }
            }
        }
    };
    ;
    CommandManagerError.prototype = new Error();
    CommandManagerError.prototype.constructor = CommandManagerError;
    SP.JsGrid.DeserializationMode = {
        Full: 0,
        TableView: 1,
        RowView: 2,
        Slice: 3,
        AutoFilter: 4
    };
    SP.JsGrid.SelectionTypeFlags = {
        NoRows: 0x00,
        SingleRow: 0x01,
        SingleRowRange: 0x03,
        MultipleRowRanges: 0x07,
        _RowMask: 0x07,
        NoCols: 0x00,
        SingleCol: 0x08,
        SingleColRange: 0x18,
        MultipleColRanges: 0x38,
        _ColMask: 0x38,
        NoCells: 0x00,
        SingleCell: 0x40,
        SingleCellRange: 0xC0,
        MultipleCellRanges: 0x1C0,
        _CellMask: 0x1C0
    };
    SP.JsGrid.LinkType = {
        FinishFinish: 0,
        FinishStart: 1,
        StartFinish: 2,
        StartStart: 3
    };
    SP.JsGrid.ClickContext = {
        SelectAllSquare: 0,
        RowHeader: 1,
        ColumnHeader: 2,
        Cell: 3,
        Gantt: 4,
        Other: 5
    };
    SP.JsGrid.SelectionType = {
        None: 0,
        CellRange: 1,
        RowRange: 2,
        ColumnRange: 3
    };
    SP.JsGrid.EventType = {
        OnCellFocusChanged: 0,
        OnRowFocusChanged: 1,
        OnCellEditBegin: 2,
        OnCellEditCompleted: 3,
        OnRightClick: 4,
        OnPropertyChanged: 6,
        OnRecordInserted: 7,
        OnRecordDeleted: 8,
        OnRecordChecked: 9,
        OnCellErrorStateChanged: 10,
        OnEntryRecordAdded: 11,
        OnEntryRecordCommitted: 13,
        OnEntryRecordPropertyChanged: 14,
        OnRowErrorStateChanged: 15,
        OnDoubleClick: 16,
        OnBeforeGridDispose: 17,
        OnSingleCellClick: 18,
        OnInitialChangesForChangeKeyComplete: 19,
        OnVacateChange: 20,
        OnGridErrorStateChanged: 21,
        OnSingleCellKeyDown: 22,
        OnRecordsReordered: 23,
        OnBeforePropertyChanged: 24,
        OnRowEscape: 25,
        OnBeginRenameColumn: 26,
        OnEndRenameColumn: 27,
        OnPasteBegin: 28,
        OnPasteEnd: 29,
        OnBeginRedoDataUpdateChange: 30,
        OnBeginUndoDataUpdateChange: 31
    };
    SP.JsGrid.Internal.EventType = {
        OnRowHeaderStateChanged: 0,
        OnGridDisposing: 1,
        OnChangeKeyCreated: 2,
        OnChangeKeyInitialUpdateFinished: 3,
        OnBeforeRecordInserted: 4,
        OnBeforeRecordDeleted: 5
    };
    SP.JsGrid.DelegateType = {
        ExpandColumnMenu: 1,
        AddColumnMenuItems: 2,
        Sort: 3,
        Filter: 4,
        InsertRecord: 5,
        DeleteRecords: 6,
        IndentRecords: 7,
        OutdentRecords: 8,
        IsRecordInsertInView: 9,
        ExpandDelayLoadedHierarchyNode: 10,
        AutoFilter: 11,
        ExpandConflictResolution: 12,
        GetAutoFilterEntries: 13,
        LaunchFilterDialog: 14,
        ShowColumnConfigurationDialog: 15,
        GetRecordEditMode: 16,
        GetGridRowStyleId: 17,
        CreateEntryRecord: 18,
        TryInsertEntryRecord: 19,
        WillAddColumnMenuItems: 20,
        NextPage: 21,
        AddNewColumn: 22,
        RemoveColumnFromView: 23,
        ReorderColumnPositionInView: 24,
        TryCreateProvisionalRecord: 25,
        CanReorderRecords: 26,
        AddNewColumnMenuItems: 27,
        TryBeginPaste: 28,
        AllowSelectionChange: 29,
        GetFieldEditMode: 30,
        GetFieldReadOnlyActiveState: 31,
        OnBeforeRecordReordered: 32
    };
    SP.JsGrid.Internal.DelegateType = {
        CallAsyncFn: 0,
        GetLocalizedString: 1,
        DoLargeTask: 2
    };
    SP.JsGrid.Internal.LoadErrorState = {};
    SP.JsGrid.OperationalConstants = {
        HierarchyMain: 0,
        HierarchyOutlineLevel: 1,
        GroupingOutlineLevel: 2,
        HierarchyDescendantCount: 3,
        GroupingDescendantCount: 4,
        GanttDependants: 5,
        GanttBarStyleIds: 6,
        GridRowStyleId: 7,
        RecordEditMode: 8
    };
    SP.JsGrid.Internal.MinColumnWidth = 37;
    SP.JsGrid.Internal.RowHeaderWidth = 25;
    SP.JsGrid.Internal.SplitterWidth = 6;
    SP.JsGrid.RecordIndicatorCheckboxColumnKey = "JsGridRecordIndicatorCheckboxes";
    SP.JsGrid.NewRowKeyPrefix = "NewRowKey";
    SP.JsGrid.ErrorWidgetId = "ErrorWidget";
    SP.JsGrid.RecordIndicatorControlId = "DISP_RECORDINDICATORCHECKBOX";
    SP.JsGrid.HierarchyControlId = "DISP_HIERARCHY";
    SP.JsGrid.TextDirection = {
        Default: 0,
        RightToLeft: 1,
        LeftToRight: 2
    };
    SP.JsGrid.PaneId = {
        MainGrid: 0,
        PivotedGrid: 1,
        Gantt: 2
    };
    SP.JsGrid.PaneLayout = {
        GridOnly: 0,
        GridAndGantt: 1,
        GridAndPivotedGrid: 2
    };
    SP.JsGrid.EditMode = {
        ReadOnly: 0,
        ReadWrite: 1,
        ReadOnlyDefer: 2,
        ReadWriteDefer: 3,
        Defer: 4
    };
    SP.JsGrid.GanttDrawBarFlags = {
        LeftLink: 0x01,
        RightLink: 0x02
    };
    SP.JsGrid.GanttBarDateType = {
        Start: 0,
        End: 1
    };
    SP.JsGrid.ValidationState = {
        Valid: 0,
        Pending: 1,
        Invalid: 2
    };
    SP.JsGrid.HierarchyMode = {
        None: 0,
        Standard: 1,
        Grouping: 2
    };
    SP.JsGrid.EditActorWriteType = {
        Both: 1,
        LocalizedOnly: 2,
        DataOnly: 3,
        Either: 4
    };
    SP.JsGrid.EditActorReadType = {
        Both: 1,
        LocalizedOnly: 2,
        DataOnly: 3
    };
    SP.JsGrid.EditActorUpdateType = {
        Committed: 0,
        Uncommitted: 1
    };
    SP.JsGrid.SortMode = {
        Ascending: 1,
        Descending: -1,
        None: 0
    };
    SP.JsGrid.RowHeaderStyleId = {
        Transfer: 'Transfer',
        Conflict: 'Conflict'
    };
    SP.JsGrid.RowHeaderAutoStyleId = {
        Dirty: 'Dirty',
        Error: 'Error',
        NewRow: 'NewRow'
    };
    SP.JsGrid.RowHeaderStatePriorities = {
        Dirty: 10,
        Transfer: 30,
        CellError: 40,
        Conflict: 50,
        RowError: 60,
        NewRow: 90
    };
    SP.JsGrid.UpdateSerializeMode = {
        Cancel: 0,
        Default: 1,
        PropDataOnly: 2,
        PropLocalizedOnly: 3,
        PropBoth: 4
    };
    SP.JsGrid.UpdateTrackingMode = {
        PropData: 2,
        PropLocalized: 3,
        PropBoth: 4
    };
    SP.JsGrid.ImagesDirectory = "/_layouts/15/images/";
    SP.JsGrid.UserAction = {
        UserEdit: 'User Edit',
        DeleteRecord: 'Delete Record',
        InsertRecord: 'Insert Record',
        Indent: 'Indent',
        Outdent: 'Outdent',
        Fill: 'Fill',
        Paste: 'Paste',
        CutPaste: 'Cut/Paste'
    };
    SP.JsGrid.ReadOnlyActiveState = {
        ReadOnlyActive: 0,
        ReadOnlyDisabled: 1
    };
    SP.JsGrid.ContextMenu = function(parentNode, id) {
        var popupAnchor;
        var menuElement;
        var itemCount = 0;
        var functionDispatch = [];
        var _this = this;
        var isRtl = IsElementRtl(parentNode);

        this.GetMenuElement = function() {
            return menuElement;
        };
        this.EnableCompactMode = function() {
            menuElement.setAttribute("CompactMode", "true");
        };
        this.IsOpen = function() {
            return MenuHtc_isOpen(menuElement);
        };
        this.IsEmpty = function() {
            return itemCount == 0;
        };
        this.InsertMenuItem = function(text, fnItemClicked, imageUri, imageAltText, bDisabled, bChecked) {
            functionDispatch.push(fnItemClicked);
            var item = new SP.JsGrid.MenuItem(CAMOpt(menuElement, text, id + '_onclick(' + (functionDispatch.length - 1) + ');', imageUri, imageAltText != null ? imageAltText : text));

            item.Enable(!bDisabled);
            item.Check(bChecked);
            itemCount++;
            return item;
        };
        this.InsertSeparator = function() {
            CAMSep(menuElement);
        };
        this.Hide = function() {
            if (this.IsOpen()) {
                MenuHtc_hide();
            }
        };
        this.SetOnMouseOut = function(optfnOnMouseOut) {
            menuElement._onDestroy = function() {
                _this.Dispose();
                if (optfnOnMouseOut != null) {
                    optfnOnMouseOut();
                }
            };
        };
        this.Show = function(pos, optfnOnMouseOut) {
            this.Hide();
            popupAnchor.style.top = pos.top + pos.height + 'px';
            popupAnchor.style.left = pos.left + pos.width + 'px';
            OMenu(menuElement, popupAnchor, false, true, 0);
            NavigateToMenu(menuElement);
            this.SetOnMouseOut(optfnOnMouseOut);
        };
        this.ShowAttached = function(elem, optfnOnMouseOut) {
            this.Hide();
            OMenu(menuElement, elem, false, true, 0);
            NavigateToMenu(menuElement);
            this.SetOnMouseOut(optfnOnMouseOut);
        };
        this.Refresh = function() {
            if (this.IsOpen()) {
                OMenu(menuElement, popupAnchor, true, false, 0);
            }
        };
        this.Dispose = function() {
            this.Hide();
            menuElement._onDestroy = null;
            if (popupAnchor != null && SP.Internal.DomElement.GetParentElement(popupAnchor)) {
                popupAnchor.parentNode.removeChild(popupAnchor);
                popupAnchor = null;
            }
            if (menuElement != null && SP.Internal.DomElement.GetParentElement(menuElement)) {
                menuElement.parentNode.removeChild(menuElement);
                menuElement = null;
            }
            window[id + '_onclick'] = null;
        };
        function Init() {
            menuElement = CMenu(id);
            popupAnchor = document.createElement('div');
            popupAnchor.style.cssText = 'position:absolute;visibility:hidden;width:250px;';
            parentNode.appendChild(popupAnchor);
            window[id + '_onclick'] = function(idx) {
                setTimeout(functionDispatch[idx], 0);
            };
        }
        Init();
    };
    SP.JsGrid.MenuItem = function(itemElem) {
        this.Enable = function(bEnable) {
            itemElem.setAttribute("enabled", bEnable);
        };
        this.Check = function(bCheck) {
            itemElem.setAttribute("checked", bCheck);
        };
    };
    if (!Type.isNamespace('SP.JsGrid')) {
        Type.registerNamespace('SP.JsGrid');
    }
    SP.JsGrid.DisplayControl = (function() {
        function PropTypeNeedsCSRItemToRender(propType, value) {
            return typeof propType.LocalizedValueToCSRValue != 'function' || value == null || value.localized == null;
        }
        function RenderWithCSR(record, field, csrField, jsGridObj, csrItem, containerElem, value, propType, column) {
            var renderCtx = jsGridObj.GetSpCsrRenderCtx();
            var listSchema = renderCtx.ListSchema;

            Sys.Debug.assert(renderCtx != null);
            Sys.Debug.assert(listSchema != null);
            Sys.Debug.assert(csrField != null);
            if (csrItem == null) {
                csrItem = {};
            }
            if (field.hasLocalizedValue && typeof propType.LocalizedValueToCSRValue == 'function') {
                var csrValue = field._propType.LocalizedValueToCSRValue(value.localized);

                csrItem[csrField.RealFieldName] = (csrItem[csrField.Name] = csrValue);
            }
            renderCtx.CurrentItem = csrItem;
            renderCtx.CurrentFieldSchema = csrField;
            var tr = containerElem.parentNode;

            Sys.Debug.assert(tr.tagName.toLowerCase() == "tr");
            if (tr.getAttribute("iid") == null) {
                tr.setAttribute("iid", GenerateIID(renderCtx));
            }
            if (csrField.listItemMenu == "TRUE") {
                var td = containerElem;

                Sys.Debug.assert(td.tagName.toLowerCase() == "td");
                td.setAttribute("IsECB", "TRUE");
            }
            var elem = document.createElement("span");
            var realFieldNames = {
                "DocIcon": "File_x0020_Type",
                "ThumbnailOnForm": "FileRef",
                "PreviewOnForm": "FileRef"
            };
            var realFieldName = csrField.RealFieldName in realFieldNames ? realFieldNames[csrField.RealFieldName] : csrField.RealFieldName;

            if (!(realFieldName in csrItem)) {
                return elem;
            }
            var renderedHtml = spMgr.RenderField(renderCtx, csrField, csrItem, listSchema);

            if (renderedHtml != null) {
                Sys.Debug.assert(renderedHtml.constructor == String);
                elem.innerHTML = renderedHtml;
            }
            if (column.fnGetDisplayControlName != null) {
                var displayControl = SP.JsGrid.Internal.Property.GetDisplayControlForProperty(propType, column.fnGetDisplayControlName(record, field.key));

                if (displayControl instanceof SP.JsGrid.DisplayControl.HierarchyDisplayControl) {
                    var expandCollapseContainer = elem.querySelector('.ms-list-TitleLink');

                    if (expandCollapseContainer != null) {
                        var expandCollapseSpan = document.createElement("span");

                        expandCollapseSpan.style.display = "table-cell";
                        var contentSpan = document.createElement("span");

                        contentSpan.style.display = "table-cell";
                        while (expandCollapseContainer.hasChildNodes()) {
                            contentSpan.appendChild(expandCollapseContainer.removeChild(expandCollapseContainer.firstChild));
                        }
                        expandCollapseContainer.appendChild(expandCollapseSpan);
                        expandCollapseContainer.appendChild(contentSpan);
                        var marginSpan = document.createElement("span");

                        expandCollapseSpan.appendChild(marginSpan);
                        return {
                            'containerElem': elem,
                            'leftMostElem': marginSpan,
                            'expandCollapseContainer': expandCollapseSpan
                        };
                    }
                }
            }
            return elem;
        }
        function RenderImage(imgSrc, toolTip, fnClick, styleName, bOnlyReturnElem) {
            if (imgSrc == null) {
                return null;
            }
            var img = (new SP.JsGrid.Image(imgSrc, false)).Render(toolTip, fnClick);

            if (styleName) {
                img.className = styleName;
            }
            img.style.border = '0px';
            return bOnlyReturnElem ? img : {
                elem: img,
                fnDispose: function() {
                    if (img != null && img.Dispose != null) {
                        img.Dispose();
                        img = null;
                    }
                }
            };
        }
        function RenderText(text, renderInfo, field, styleName, styleForLinks) {
            if (text == "" || text == null || text == SP.JsGrid.EmptyValue || text == SP.JsGrid.InvalidValue) {
                return null;
            }
            var elem = document.createElement('span');
            var innerElem;

            if (renderInfo.fnClick != null) {
                innerElem = document.createElement('a');
                innerElem.style.cssText = styleForLinks;
                elem.appendChild(innerElem);
                innerElem.href = 'javascript:';
                $addHandler(innerElem, 'click', function(eventInfo) {
                    renderInfo.fnClick(eventInfo);
                });
                $addHandler(innerElem, 'keydown', function(eventInfo) {
                    if (eventInfo.keyCode == Sys.UI.Key.enter) {
                        renderInfo.fnClick(eventInfo);
                        SP.Internal.DomElement.StopEvent(eventInfo);
                    }
                });
                innerElem.tabIndex = -1;
            }
            else {
                innerElem = elem;
            }
            SP.Internal.DomElement.SetTextNoBR(innerElem, text);
            if (renderInfo.toolTip != null) {
                innerElem.title = renderInfo.toolTip;
            }
            if (styleName) {
                elem.className = styleName;
            }
            if (field.textDirection != SP.JsGrid.TextDirection.Default) {
                elem.dir = field.textDirection == SP.JsGrid.TextDirection.RightToLeft ? 'rtl' : 'ltr';
            }
            var r = elem;

            if (renderInfo.fnClick != null) {
                r = {
                    elem: elem,
                    fnDispose: function() {
                        $clearHandlers(innerElem);
                        innerElem = (elem = (r = null));
                    }
                };
            }
            return r;
        }
        function RenderCheckbox(bDisabled, dataValue, fnOnCheckChanged) {
            var r = document.createElement('div');

            r.style.cssText = 'text-align:center';
            var e = document.createElement('input');

            e.type = 'checkbox';
            e.tabIndex = -1;
            r.appendChild(e);
            e.disabled = bDisabled;
            e.checked = dataValue;
            if (fnOnCheckChanged != null) {
                $addHandler(e, 'mousedown', function(eventInfo) {
                    SP.Internal.DomElement.StopEvent(eventInfo);
                });
                $addHandler(e, 'click', fnOnCheckChanged);
            }
            r = {
                elem: r
            };
            r.fnDispose = function() {
                r = null;
                $clearHandlers(e);
                e = null;
            };
            return r;
        }
        function GetSingleValueClick(record, column, field, propType, localizedValue, dataValue) {
            if (propType != null && propType.bHyperlink) {
                return function() {
                    window.open(propType.GetAddress(dataValue));
                };
            }
            var fnCustomClick = column.fnShouldLinkSingleValue != null && column.fnShouldLinkSingleValue(record, field.key, dataValue, localizedValue) && column.fnSingleValueClicked;

            return fnCustomClick ? function() {
                fnCustomClick(record, field.key, dataValue);
            } : null;
        }
        function GetSingleValueToolTip(record, column, field, localizedValue, dataValue) {
            var toolTip = column.fnGetSingleValueTooltip == null ? null : column.fnGetSingleValueTooltip(record, field.key, dataValue, localizedValue);

            return toolTip == null ? localizedValue : toolTip;
        }
        function GetSingleValueRenderInfo(record, column, field, propType, localizedValue, dataValue) {
            var toolTip = GetSingleValueToolTip(record, column, field, localizedValue, dataValue);
            var fnClick = GetSingleValueClick(record, column, field, propType, localizedValue, dataValue);

            return {
                toolTip: toolTip,
                fnClick: fnClick
            };
        }
        function RenderImageForSingleValue(record, column, field, propType, localizedValue, dataValue, imgSrc, className, styleForLinks) {
            var renderInfo = GetSingleValueRenderInfo(record, column, field, propType, localizedValue, dataValue);
            var element = RenderImage(imgSrc, renderInfo.toolTip, renderInfo.fnClick, className);

            return element == null ? [] : [element];
        }
        function RenderTextForSingleValue(record, column, field, propType, localizedValue, dataValue, imgSrc, className, styleForLinks) {
            var renderInfo = GetSingleValueRenderInfo(record, column, field, propType, localizedValue, dataValue);
            var element = RenderText(localizedValue, renderInfo, field, className, styleForLinks);

            return element == null ? [] : [element];
        }
        function RenderImageAndTextForSingleValue(record, column, field, propType, localizedValue, dataValue, imgSrc, className, styleForLinks) {
            var renderInfo = GetSingleValueRenderInfo(record, column, field, propType, localizedValue, dataValue);
            var element1 = RenderImage(imgSrc, renderInfo.toolTip, renderInfo.fnClick, className);
            var element2 = RenderText(localizedValue, renderInfo, field, className, styleForLinks);
            var r = [];

            if (element1 != null) {
                r.push(element1);
            }
            if (element2 != null) {
                r.push(element2);
            }
            return r;
        }
        function RenderImageAndOrText(value, record, column, field, propType, style, fnSingleValueRenderer, bUseMvSeparator, RTL, styleForLinks) {
            var r = [];
            var imgSources = propType != null && propType.GetImageSource ? propType.GetImageSource(record, value.data) : null;
            var className = RTL.bEnabled ? 'jsgrid-control-text-rtl' : 'jsgrid-control-text';

            if (propType != null && propType.bMultiValue) {
                var locStrArray = propType.LocStrToLocStrArray(value.localized);

                for (var i = 0; i < locStrArray.length; i++) {
                    var locSingleValue = i < locStrArray.length - 1 && bUseMvSeparator ? locStrArray[i] + propType.separator : locStrArray[i];

                    r = r.concat(fnSingleValueRenderer(record, column, field, propType.singleValuePropType, locSingleValue, value.data ? value.data[i] : null, imgSources ? imgSources[i] : null, className, styleForLinks));
                }
            }
            else {
                r = fnSingleValueRenderer(record, column, field, propType, value.localized, value.data, imgSources, className, styleForLinks);
            }
            return r.length == 1 ? r[0] : r.length == 0 ? null : {
                multipleChildren: r
            };
        }
        return {
            ImageDisplayControl: {
                Id: 'DISP_IMAGE',
                Render: function(value, record, column, field, propType, style, jsGridObj, RTL, containerElem) {
                    return RenderImageAndOrText(value, record, column, field, propType, style, RenderImageForSingleValue, false, RTL);
                },
                FocusNext: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, true);
                },
                FocusPrevious: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, false);
                },
                OnKeyDown: function(eventInfo, value, record, column, field, propType, jsGridObj) {
                    if (propType.bMultiValue) {
                        return false;
                    }
                    var ctrlOnly = eventInfo.ctrlKey && !eventInfo.altKey && !eventInfo.shiftKey;

                    if (ctrlOnly && eventInfo.keyCode == Sys.UI.Key.enter) {
                        var fnClick = GetSingleValueClick(record, column, field, propType, value.localized, value.data);

                        if (fnClick != null) {
                            fnClick(eventInfo);
                            SP.Internal.DomElement.StopEvent(eventInfo);
                            return true;
                        }
                    }
                    return false;
                }
            },
            ImageTextDisplayControl: {
                Id: 'DISP_IMAGETEXT',
                _styleForLinks: null,
                Render: function(value, record, column, field, propType, style, jsGridObj, RTL, containerElem) {
                    return RenderImageAndOrText(value, record, column, field, propType, style, RenderImageAndTextForSingleValue, true, RTL, this._styleForLinks);
                },
                FocusNext: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, true);
                },
                FocusPrevious: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, false);
                },
                OnKeyDown: function(eventInfo, value, record, column, field, propType, jsGridObj) {
                    if (propType.bMultiValue) {
                        return false;
                    }
                    var ctrlOnly = eventInfo.ctrlKey && !eventInfo.altKey && !eventInfo.shiftKey;

                    if (ctrlOnly && eventInfo.keyCode == Sys.UI.Key.enter) {
                        var fnClick = GetSingleValueClick(record, column, field, propType, value.localized, value.data);

                        if (fnClick != null) {
                            fnClick(eventInfo);
                            SP.Internal.DomElement.StopEvent(eventInfo);
                            return true;
                        }
                    }
                    return false;
                }
            },
            TextDisplayControl: {
                Id: 'DISP_TEXT',
                _styleForLinks: null,
                Render: function(value, record, column, field, propType, style, jsGridObj, RTL, containerElem) {
                    return RenderImageAndOrText(value, record, column, field, propType, style, RenderTextForSingleValue, true, RTL, this._styleForLinks);
                },
                FocusNext: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, true);
                },
                FocusPrevious: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, false);
                },
                OnKeyDown: function(eventInfo, value, record, column, field, propType, jsGridObj) {
                    if (propType.bMultiValue) {
                        return false;
                    }
                    var ctrlOnly = eventInfo.ctrlKey && !eventInfo.altKey && !eventInfo.shiftKey;

                    if (ctrlOnly && eventInfo.keyCode == Sys.UI.Key.enter) {
                        var fnClick = GetSingleValueClick(record, column, field, propType, value.localized, value.data);

                        if (fnClick != null) {
                            fnClick(eventInfo);
                            SP.Internal.DomElement.StopEvent(eventInfo);
                            return true;
                        }
                    }
                    return false;
                }
            },
            CheckboxDisplayControl: {
                Id: 'DISP_CHECKBOX',
                Render: function(value, record, column, field, propType, style, jsGridObj, RTL, containerElem) {
                    Sys.Debug.assert(!propType.bMultiValue);
                    return jsGridObj.IsGroupingRecordKey(record.key()) ? null : RenderCheckbox(false, propType.GetBool(value.data), null);
                },
                FocusNext: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, true);
                },
                FocusPrevious: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, false);
                }
            },
            RecordIndicatorCheckboxControl: function(id, fnUpdateCheckStatus, fnIsHidden, fnIsDisabled, fnIsChecked) {
                this.Id = id + SP.JsGrid.RecordIndicatorControlId;
                this.Render = function(value, record, column, field, propType, style, jsGridObj, RTL) {
                    var recordKey = record.key();

                    function OnCheck(eventInfo) {
                        fnUpdateCheckStatus(recordKey);
                    }
                    return fnIsHidden(recordKey) ? null : RenderCheckbox(fnIsDisabled(recordKey), fnIsChecked(recordKey), OnCheck);
                };
                this.OnKeyDown = function(eventInfo, value, record, column, field, propType) {
                    if (eventInfo.keyCode == Sys.UI.Key.space || eventInfo.charCode == Sys.UI.Key.space) {
                        fnUpdateCheckStatus(record.key());
                        SP.Internal.DomElement.StopEvent(eventInfo);
                        return true;
                    }
                    return false;
                };
                this.FocusNext = function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, true);
                };
                this.FocusPrevious = function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, false);
                };
            },
            HierarchyDisplayControl: function(id, posConverter, fnGetNodeHierInfo, fnOnExpand, fnOnCollapse, fnGetContentForCell, fnGetControlNameForCell) {
                var _nodeTypeEnum = SP.JsGrid.Internal.HierarchyManager.NodeType;
                var _initialOffset = 4;
                var _imgPaddingRight = 4;
                var _imgPaddingTop = 4;

                this.Id = id + SP.JsGrid.HierarchyControlId;
                this.Render = function(value, record, column, field, propType, style, jsGridObj, RTL) {
                    var recordKey = record.key();
                    var nodeInfo = fnGetNodeHierInfo(record);
                    var rtlStr = RTL.bEnabled ? 'rtl' : '';
                    var imgSrc = nodeInfo.nodeType == _nodeTypeEnum.Expanded ? GetThemedImageUrl("commentcollapse12" + rtlStr + ".png") : nodeInfo.nodeType == _nodeTypeEnum.Collapsed ? GetThemedImageUrl("commentexpand12" + rtlStr + ".png") : null;
                    var elem = fnGetContentForCell(column, record, field.key, style, fnGetControlNameForCell(record, field.key));
                    var _indentOffset = jsGridObj.GetSpCsrRenderCtx() != null ? -1 : 0;
                    var _levelSize = jsGridObj.GetSpCsrRenderCtx() != null ? 22 : 13;
                    var _imgPaddingLeft = _levelSize - 9 - (jsGridObj.GetSpCsrRenderCtx() != null ? _imgPaddingRight : 0);

                    if (jsGridObj.GetSpCsrRenderCtx() != null && !(jsGridObj.GetSpCsrRenderCtx()).ListData.HierarchyHasIndention) {
                        _levelSize = 0;
                    }
                    if (nodeInfo.nodeType != _nodeTypeEnum.Leaf) {
                        var imgElem = RenderImage(imgSrc, String.format(nodeInfo.nodeType == _nodeTypeEnum.Expanded ? SP.JsGrid.Res.hierarchyExpanded : SP.JsGrid.Res.hierarchyCollapsed, (nodeInfo.indent + 1).toString()), nodeInfo.nodeType == _nodeTypeEnum.Expanded ? OnCollapse : OnExpand, null, true);

                        imgElem.style['margin' + RTL.Left] = _levelSize * (nodeInfo.indent + _indentOffset) + _imgPaddingLeft + 'px';
                        if (jsGridObj.GetSpCsrRenderCtx() != null) {
                            imgElem.style['margin' + RTL.Right] = _imgPaddingRight + 'px';
                            imgElem.style['marginTop'] = _imgPaddingTop + 'px';
                        }
                        imgElem.width = 9;
                        imgElem.height = 9;
                        var elems = [{
                            elem: imgElem,
                            fnDispose: Dispose
                        }];

                        if (elem != null && elem.multipleChildren != null) {
                            elems = elems.concat(elem.multipleChildren);
                        }
                        else if (elem != null && elem.expandCollapseContainer != null) {
                            elem.expandCollapseContainer.insertBefore(imgElem, elem.expandCollapseContainer.firstChild);
                            return {
                                'elem': elem.containerElem,
                                'fnDispose': Dispose
                            };
                        }
                        else if (elem != null) {
                            elems.push(elem);
                        }
                        return {
                            multipleChildren: elems
                        };
                    }
                    else {
                        if (elem != null) {
                            var leftMostElem = elem.leftMostElem != null ? elem.leftMostElem : elem.multipleChildren != null ? elem.multipleChildren[0] : elem;

                            if (leftMostElem.elem != null) {
                                leftMostElem = leftMostElem.elem;
                            }
                            leftMostElem.style['margin' + RTL.Left] = _levelSize * (nodeInfo.indent + _indentOffset + 1) + 'px';
                        }
                        if (elem != null && elem.containerElem != null) {
                            return elem.containerElem;
                        }
                        return elem;
                    }
                    function Dispose() {
                        if (imgElem.Dispose != null) {
                            imgElem.Dispose();
                        }
                        imgElem = null;
                        leftMostElem = null;
                        elems = null;
                    }
                    function OnExpand() {
                        fnOnExpand(recordKey);
                    }
                    function OnCollapse() {
                        fnOnCollapse(recordKey);
                    }
                };
                this.OnKeyDown = function(eventInfo, value, record, column, field, propType, jsGridObj) {
                    function TryToExpandCollapse(bExpand) {
                        var nodeInfo = fnGetNodeHierInfo(record);

                        if (bExpand && nodeInfo.nodeType == _nodeTypeEnum.Collapsed) {
                            fnOnExpand(record.key());
                        }
                        else if (!bExpand && nodeInfo.nodeType == _nodeTypeEnum.Expanded) {
                            fnOnCollapse(record.key());
                        }
                        SP.Internal.DomElement.StopEvent(eventInfo);
                    }
                    function TryOriginalControlOnKeyDown() {
                        var displayControl = SP.JsGrid.Internal.Property.GetDisplayControlForProperty(propType, fnGetControlNameForCell(record, field.key));

                        if (displayControl.OnKeyDown != null) {
                            return displayControl.OnKeyDown(eventInfo, value, record, column, field, propType, jsGridObj);
                        }
                        return false;
                    }
                    var altAndShift = !eventInfo.ctrlKey && eventInfo.altKey && eventInfo.shiftKey;

                    if (altAndShift) {
                        if (eventInfo.keyCode == SP.Internal.Key.plus || eventInfo.keyCode == SP.Internal.Key.numpad_plus) {
                            TryToExpandCollapse(true);
                            return true;
                        }
                        else if (eventInfo.keyCode == SP.Internal.Key.minus || eventInfo.keyCode == SP.Internal.Key.numpad_minus) {
                            TryToExpandCollapse(false);
                            return true;
                        }
                    }
                    return TryOriginalControlOnKeyDown();
                };
                this.FocusNext = function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, true);
                };
                this.FocusPrevious = function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, false);
                };
            },
            CSRDisplayControl: {
                Id: 'DISP_CSR',
                Render: function(value, record, column, field, propType, style, jsGridObj, RTL, containerElem) {
                    var csrItem = record.fieldRawDataMap.csrInfo;
                    var csrField = field.csrInfo;
                    var stale = csrItem != null && csrItem.stale != null && csrItem.stale[field.key];
                    var valueMatchesRecord = true;

                    if (record.HasDataValue(field.key)) {
                        valueMatchesRecord = record.GetDataValue(field.key) == value.data;
                    }
                    else {
                        valueMatchesRecord = value.data == null || value.data == SP.JsGrid.EmptyValue;
                    }
                    if (record.HasLocalizedValue(field.key)) {
                        valueMatchesRecord = record.GetLocalizedValue(field.key) == value.localized;
                    }
                    else {
                        valueMatchesRecord = value.localized == null || value.localized == SP.JsGrid.EmptyValue;
                    }
                    var isGroupRecord = jsGridObj.IsGroupingRecordKey(record.recordKey);
                    var isGroupColumn = jsGridObj.IsGroupingColumnKey(column.columnKey);
                    var isEditFieldInNewRow = record.bIsNewRow && (field.GetPropType()).ID == "SPEdit";
                    var isEmptyBooleanValue = (field.GetPropType()).ID == "DropdownBoolean" && value.data == null;

                    if (isGroupRecord && !isGroupColumn || isEditFieldInNewRow || isEmptyBooleanValue) {
                        return null;
                    }
                    var propType = field.GetPropType();
                    var noItemFallback = csrItem == null && PropTypeNeedsCSRItemToRender(propType, value);

                    if (!valueMatchesRecord || csrField == null || stale || noItemFallback || field.key == "JSGrid_NewColumn") {
                        if (!Boolean(value) && noItemFallback && csrField != null && csrField.RealFieldName == "Title" && (csrField.listItemMenu == "TRUE" || csrField.CalloutMenu == "TRUE")) {
                            var emptyDiv = document.createElement('div');

                            emptyDiv.className = "ms-list-TitleLink";
                            return emptyDiv;
                        }
                        return RenderImageAndOrText(value, record, column, field, propType, style, RenderTextForSingleValue, false, RTL);
                    }
                    Sys.Debug.assert(PropTypeNeedsCSRItemToRender(propType, value) ? csrItem != null : true);
                    return RenderWithCSR(record, field, csrField, jsGridObj, csrItem, containerElem, value, propType, column);
                }
            },
            UserDisplayControl: {
                Id: 'DISP_USER',
                CanRenderPresence: function() {
                    return EnsureIMNControl() && IMNControlObj.PresenceEnabled;
                },
                Render: function(value, record, column, field, propType, style, jsGridObj, RTL) {
                    function RenderPresenceImage(propType, localizedValue, dataValue, posInMultiValue) {
                        function UpdatePresenceInfoAsync(sipAddress, imgElem) {
                            setTimeout(function() {
                                IMNRC(sipAddress, imgElem);
                            }, 0);
                        }
                        var r;

                        if (SP.JsGrid.DisplayControl.UserDisplayControl.CanRenderPresence()) {
                            var sipAddress = propType.GetSipAddress != null ? propType.GetSipAddress(record, dataValue, posInMultiValue) : dataValue;
                            var cellControl = document.createElement('span');

                            cellControl.className = RTL.bEnabled ? 'jsgrid-control-text-rtl' : 'jsgrid-control-text';
                            var imnSpan = document.createElement('span');

                            imnSpan.className = "ms-imnSpan";
                            var imnWrapperSpan = document.createElement('span');

                            imnWrapperSpan.className = "ms-spimn-presenceWrapper ms-imnImg ms-spimn-imgSize-10x10";
                            var image = RenderImage("/_layouts/15/images/spimn.png?rev=23", '', null, 'ms-spimn-img ms-spimn-presence-disconnected-10x10x32', true);

                            image.name = 'imnmark';
                            image.id = SP.JsGrid.Utility.GetIMNMarkerId(jsGridObj.parentNode.id, record.key(), field.key, sipAddress);
                            image.setAttribute('ShowOfflinePawn', 1);
                            image.setAttribute('sip', sipAddress);
                            imnWrapperSpan.appendChild(image);
                            var anchor = document.createElement("a");

                            anchor.onclick = IMNImageOnClickHandler;
                            anchor.className = "ms-imnlink";
                            anchor.href = "javascript:;";
                            anchor.appendChild(imnWrapperSpan);
                            imnSpan.appendChild(anchor);
                            cellControl.appendChild(imnSpan);
                            UpdatePresenceInfoAsync(sipAddress, image);
                            r = {
                                elem: cellControl,
                                fnDispose: function() {
                                    $clearHandlers(anchor);
                                    $clearHandlers(image);
                                    r = (cellControl = (imnSpan = (anchor = (image = null))));
                                }
                            };
                        }
                        return r;
                    }
                    function RenderPresenceForSingleUser(propType, localizedValue, dataValue, posInMultiValue) {
                        if (localizedValue == "" || localizedValue == null || localizedValue == SP.JsGrid.EmptyValue || localizedValue == SP.JsGrid.InvalidValue) {
                            return [];
                        }
                        var renderInfo = GetSingleValueRenderInfo(record, column, field, propType, localizedValue, dataValue);
                        var element1 = jsGridObj.IsGroupingRecordKey(record.key()) ? null : RenderPresenceImage(propType, localizedValue, dataValue, posInMultiValue);
                        var element2 = RenderText(localizedValue, renderInfo, field, element1 != null ? null : 'jsgrid-control-text');
                        var r = [];

                        if (element1 != null) {
                            r.push(element1);
                        }
                        if (element2 != null) {
                            r.push(element2);
                        }
                        return r;
                    }
                    function RenderPresence() {
                        var r = [];

                        if (propType.bMultiValue) {
                            var locStrArray = propType.LocStrToLocStrArray(value.localized);

                            for (var i = 0; i < locStrArray.length; i++) {
                                var locSingleValue = i < locStrArray.length - 1 ? locStrArray[i] + propType.separator : locStrArray[i];

                                r = r.concat(RenderPresenceForSingleUser(propType.singleValuePropType ? propType.singleValuePropType : propType, locSingleValue, value.data ? value.data[i] : null, i));
                            }
                        }
                        else {
                            r = RenderPresenceForSingleUser(propType, value.localized, value.data, null);
                        }
                        return r.length == 1 ? r[0] : r.length == 0 ? null : {
                            multipleChildren: r
                        };
                    }
                    return RenderPresence();
                },
                FocusNext: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, true);
                },
                FocusPrevious: function(domElementsCollection, focusedDomElement) {
                    return SP.JsGrid.Utility.FocusElementInDOMCollection(domElementsCollection, focusedDomElement, false);
                },
                OnKeyDown: function(eventInfo, value, record, column, field, propType, jsGridObj) {
                    function TryToExpandPresenceControl() {
                        var ctrlAndAlt = eventInfo.ctrlKey && eventInfo.altKey && !eventInfo.shiftKey;

                        if (ctrlAndAlt) {
                            if (eventInfo.keyCode == Sys.UI.Key.down) {
                                if (SP.JsGrid.DisplayControl.UserDisplayControl.CanRenderPresence()) {
                                    var sipAddress = propType.GetSipAddress != null ? propType.GetSipAddress(record, value.data) : value.data;

                                    if (sipAddress != null && sipAddress != '') {
                                        var imnImgId = SP.JsGrid.Utility.GetIMNMarkerId(jsGridObj.parentNode.id, record.key(), field.key, sipAddress);
                                        var img = document.getElementById(imnImgId);

                                        if (img != null) {
                                            var r = IMNGetOOUILocation(img);

                                            if ('ShowOOUI' in IMNControlObj) {
                                                IMNControlObj.ShowOOUI(sipAddress, 1, Math.round(r.oouiX), Math.round(r.oouiY));
                                            }
                                            if ('DoAccelerator' in IMNControlObj) {
                                                IMNControlObj.DoAccelerator();
                                            }
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                        return false;
                    }
                    function TryUserLinkOnKeyDown() {
                        var ctrlOnly = eventInfo.ctrlKey && !eventInfo.altKey && !eventInfo.shiftKey;

                        if (ctrlOnly && eventInfo.keyCode == Sys.UI.Key.enter) {
                            var fnClick = GetSingleValueClick(record, column, field, propType, value.localized, value.data);

                            if (fnClick != null) {
                                fnClick(eventInfo);
                                SP.Internal.DomElement.StopEvent(eventInfo);
                                return true;
                            }
                        }
                        return false;
                    }
                    if (propType.bMultiValue) {
                        return false;
                    }
                    return TryToExpandPresenceControl() || TryUserLinkOnKeyDown();
                }
            }
        };
    })();
    SP.JsGrid.DisplayControl.Type = {
        Image: 'DISP_IMAGE',
        ImageText: 'DISP_IMAGETEXT',
        Text: 'DISP_TEXT',
        Checkbox: 'DISP_CHECKBOX',
        Hierarchy: 'DISP_HIERARCHY',
        RecordIndicatorCheckbox: 'DISP_RECORDINDICATORCHECKBOX',
        CSR: 'DISP_CSR',
        User: 'DISP_USER'
    };
    if (!Type.isNamespace('SP.JsGrid')) {
        Type.registerNamespace('SP.JsGrid');
    }
    SP.JsGrid.EditControl = {
        ProxyControl: function(baseControl) {
            var derived = SP.Internal.JS.object(baseControl);
            var _bIsFocused = false;
            var _bIsBound = false;
            var _bIsEditing = false;
            var _bIsInit = false;

            function Init() {
                Sys.Debug.assert(!_bIsInit);
                _bIsInit = true;
            }
            derived.Dispose = function() {
                Sys.Debug.assert(_bIsInit);
                _bIsInit = false;
                baseControl.Dispose.apply(this, arguments);
            };
            derived.BindToCell = function(cellContext) {
                Sys.Debug.assert(_bIsInit);
                Sys.Debug.assert(!_bIsBound);
                _bIsBound = true;
                baseControl.BindToCell.apply(this, arguments);
            };
            derived.Unbind = function() {
                Sys.Debug.assert(_bIsInit);
                Sys.Debug.assert(_bIsBound);
                _bIsBound = false;
                baseControl.Unbind.apply(this, arguments);
            };
            derived.OnBeginEdit = function() {
                Sys.Debug.assert(_bIsInit);
                Sys.Debug.assert(_bIsBound);
                Sys.Debug.assert(_bIsFocused);
                Sys.Debug.assert(!_bIsEditing);
                _bIsEditing = true;
                baseControl.OnBeginEdit.apply(this, arguments);
            };
            derived.OnEndEdit = function() {
                Sys.Debug.assert(_bIsInit);
                Sys.Debug.assert(_bIsBound);
                Sys.Debug.assert(_bIsFocused);
                Sys.Debug.assert(_bIsEditing);
                _bIsEditing = false;
                baseControl.OnEndEdit.apply(this, arguments);
            };
            derived.SetSize = function(width, height) {
                Sys.Debug.assert(_bIsInit);
                Sys.Debug.assert(_bIsBound);
                baseControl.SetSize.apply(this, arguments);
            };
            Init();
            return derived;
        },
        EditBoxEditControl: function(gridContext, gridTextInputElement) {
            var id = 'jsgrid_editbox';
            var _tbGrid = gridTextInputElement;
            var _tbOwn;
            var _this = this;
            var _parentNode = gridContext.parentNode;
            var _bUsingGridTextInputElement = gridTextInputElement != null;
            var _bInEdit = false;
            var _cellContext;

            this.SupportedWriteMode = SP.JsGrid.EditActorWriteType.LocalizedOnly;
            this.SupportedReadMode = SP.JsGrid.EditActorReadType.LocalizedOnly;
            function Init() {
                Sys.Debug.assert(_tbGrid == null || SP.Internal.DomElement.ElementAttachedToDom(_tbGrid));
                _tbOwn = document.createElement('input');
                _tbOwn.id = id;
                _tbOwn.style.cssText = 'visibility:hidden;position:absolute;top:0px;left:0px;';
                _parentNode.appendChild(_tbOwn);
                UpdateTextBoxProperty(["type"], "text");
                var bgColorCss = SP.Internal.DomElement.GetComputedStyle(_tbGrid || _tbOwn, "backgroundColor", "background-color");
                var bgColorInHex = "#fff";

                if (bgColorCss != null && bgColorCss.length > 0) {
                    var bgColor = SP.JsGrid.Internal.Color.HexStringToColor(bgColorCss);

                    bgColor = SP.JsGrid.Internal.Color.RemoveAlphaChannel(bgColor);
                    bgColorInHex = SP.JsGrid.Internal.Color.ColorToHexString(bgColor);
                }
                if (bgColorInHex != null && bgColorInHex.length > 0) {
                    UpdateTextBoxProperty(["style", "backgroundColor"], bgColorInHex);
                }
                UpdateTextBoxProperty(["className"], 'jsgrid-control-editbox');
                UpdateTextBoxProperty(["tabIndex"], -1);
                UpdateTextBoxProperty(["style", "direction"], gridContext.RTL.ltr);
            }
            this.GetCellContext = function() {
                return _cellContext;
            };
            this.GetOriginalValue = function() {
                return _cellContext.originalValue.localized;
            };
            this.SetValue = function(value) {
                _cellContext.SetCurrentValue({
                    localized: value
                });
            };
            this.Dispose = function() {
                $clearHandlers(_tbOwn);
            };
            this.GetInputElement = function() {
                return _tbGrid || _tbOwn;
            };
            this.Focus = function(eventInfo) {
                try {
                    var tb = GetCurrentTextBoxInputControl();

                    if (eventInfo == null) {
                        tb.focus();
                        tb.value = tb.value;
                    }
                    else if (_bUsingGridTextInputElement) {
                        gridContext.OnActivateActor();
                        if (eventInfo.type == 'mousedown' || eventInfo.type == 'gridapi' || eventInfo.type == 'keydown' && eventInfo.keyCode == SP.Internal.Key.F2) {
                            HandleMouseDownOrF2OrGridAPI();
                        }
                    }
                    else {
                        tb.focus();
                        if (eventInfo.type == 'mousedown' || eventInfo.type == 'gridapi' || eventInfo.type == 'keydown' && eventInfo.keyCode == SP.Internal.Key.F2) {
                            HandleMouseDownOrF2OrGridAPI();
                        }
                        else if (SP.JsGrid.Utility.IsChar(eventInfo)) {
                            var value = String.fromCharCode(eventInfo.charCode);

                            tb.value = value;
                            this.SetValue(value);
                        }
                    }
                }
                catch (e) {
                    Sys.Debug.assert(false, "Incorrectly trying to focus the EditBoxEditControl while hidden?");
                }
                function HandleMouseDownOrF2OrGridAPI() {
                    var currentValue = _this.GetOriginalValue();

                    tb.value = currentValue == null || currentValue == SP.JsGrid.EmptyValue ? '' : currentValue;
                }
            };
            this.BindToCell = function(cellContext) {
                _cellContext = cellContext;
                SizeToCell();
                if (_cellContext.field.textDirection != SP.JsGrid.TextDirection.Default) {
                    UpdateTextBoxProperty(["style", "direction"], _cellContext.field.textDirection == SP.JsGrid.TextDirection.RightToLeft ? 'rtl' : 'ltr');
                }
                UpdateTextBoxValue('');
            };
            this.OnBeginEdit = function(eventInfo) {
                _bUsingGridTextInputElement = _tbGrid != null && eventInfo.type == "keypress";
                var tb = GetCurrentTextBoxInputControl();

                _cellContext.Show(tb);
                _bInEdit = true;
                SetupHandlers(true);
                if (eventInfo.type == 'mousedown' && !_bUsingGridTextInputElement) {
                    setTimeout(function() {
                        _this.Focus(eventInfo);
                    }, 0);
                }
                else {
                    _this.Focus(eventInfo);
                }
            };
            this.Unbind = function() {
                UpdateTextBoxValue('');
            };
            this.OnEndEdit = function() {
                var originalValue = this.GetOriginalValue();
                var tb = GetCurrentTextBoxInputControl();

                originalValue = originalValue == null || originalValue == SP.JsGrid.EmptyValue ? '' : originalValue;
                if (tb.value != originalValue) {
                    this.SetValue(tb.value);
                }
                SetupHandlers(false);
                _cellContext.Hide(tb);
                _bInEdit = false;
            };
            this.OnCellMove = function() {
                SizeToCell();
                if (_bInEdit) {
                    _cellContext.Show(GetCurrentTextBoxInputControl());
                }
            };
            this.OnValueChanged = function(newValue) {
                UpdateTextBoxValue(newValue.localized == null || newValue.localized == SP.JsGrid.EmptyValue ? '' : newValue.localized);
            };
            this.IsCurrentlyUsingGridTextInputElement = function() {
                return _bUsingGridTextInputElement;
            };
            function SetupHandlers(bAttach) {
                var tb = GetCurrentTextBoxInputControl();

                if (bAttach) {
                    $addHandler(tb, 'focus', gridContext.OnActivateActor);
                    $addHandler(tb, 'blur', gridContext.OnDeactivateActor);
                    if (!_bUsingGridTextInputElement) {
                        $addHandler(tb, 'keydown', gridContext.OnKeyDown);
                    }
                    $addHandler(tb, 'keyup', OnKeyUp);
                    $addHandler(tb, 'mousedown', OnMouseDown);
                }
                else {
                    $removeHandler(tb, 'focus', gridContext.OnActivateActor);
                    $removeHandler(tb, 'blur', gridContext.OnDeactivateActor);
                    if (!_bUsingGridTextInputElement) {
                        $removeHandler(tb, 'keydown', gridContext.OnKeyDown);
                    }
                    $removeHandler(tb, 'keyup', OnKeyUp);
                    $removeHandler(tb, 'mousedown', OnMouseDown);
                }
            }
            function OnKeyUp() {
                _this.SetValue((GetCurrentTextBoxInputControl()).value);
            }
            function SizeToCell() {
                _this.SetSize(_cellContext.cellWidth - 10, _cellContext.cellHeight - 6);
            }
            this.SetSize = function(width, height) {
                UpdateTextBoxProperty(["style", "width"], width + 'px');
                UpdateTextBoxProperty(["style", "height"], height + 'px');
            };
            function OnMouseDown(eventInfo) {
                eventInfo.stopPropagation();
            }
            function GetCurrentTextBoxInputControl() {
                return _bUsingGridTextInputElement ? _tbGrid : _tbOwn;
            }
            function UpdateTextBoxValue(val) {
                _tbOwn.value = val;
                if (_bUsingGridTextInputElement) {
                    _tbGrid.value = val;
                }
            }
            function SetProp(obj, props, val) {
                for (var i = 0; i < props.length - 1; i++) {
                    obj = obj[props[i]];
                }
                obj[props[props.length - 1]] = val;
            }
            function UpdateTextBoxProperty(props, val) {
                SetProp(_tbOwn, props, val);
                if (_bUsingGridTextInputElement) {
                    SetProp(_tbGrid, props, val);
                }
            }
            Init();
        },
        ComboBoxEditControl: function(gridContext) {
            var id = 'jsgrid_combobox';
            var _comboBoxCtrl, _container;
            var _this = this;
            var _sentinelValue = 'sentinel';
            var _processingEsc;
            var _bComboBoxInTypeAheadEditing;
            var _parentNode = gridContext.parentNode;
            var _cellContext;
            var _dropDownHidden = true;
            var _isDirty;
            var _disposeFns = [];
            var _itemCache;
            var _isBound = false;
            var _shouldBind = false;

            this.SupportedWriteMode = SP.JsGrid.EditActorWriteType.LocalizedOnly;
            this.SupportedReadMode = SP.JsGrid.EditActorReadType.LocalizedOnly;
            function Init() {
                _container = document.createElement('div');
                _container.id = id;
                _container.style.cssText = "position:absolute;visibility:hidden;border:0px;top:0px;background-color:transparent;";
                if (gridContext.RTL.bEnabled) {
                    _container.style.right = "0px";
                }
                else {
                    _container.style.left = "0px";
                }
                _container.style.direction = gridContext.RTL.ltr;
                _parentNode.appendChild(_container);
            }
            this.Dispose = function() {
                _parentNode.removeChild(_container);
            };
            this.BindToCell = function(cellContext) {
                _shouldBind = true;
                _isBound = false;
                EnsureScriptFunc('SP.UI.ComboBox.js', 'SP.UI.ComboBox', function() {
                    if (_shouldBind) {
                        _isBound = true;
                        _cellContext = cellContext;
                        _this.SetSize(_cellContext.cellWidth, _cellContext.cellHeight);
                        var comboInfo = new SP.UI.ComboBox.SPComboInfo();

                        comboInfo.set_itemFocusCallback(OnListItemFocused);
                        comboInfo.set_multipleSelect(_cellContext.propType.bMultiValue);
                        comboInfo.set_allowMultiEdits(true);
                        comboInfo.set_limitToList(_cellContext.propType.bMultiValue || _cellContext.propType.GetIsLimitedToList != null && _cellContext.propType.GetIsLimitedToList());
                        comboInfo.set_RTL(gridContext.RTL.bEnabled);
                        comboInfo.set_getDataCallback(GetListData);
                        comboInfo.set_separatorCharacters(_cellContext.propType.separator + ' ');
                        comboInfo.set_columnCount(2);
                        comboInfo.set_columnWidths('0px;1px');
                        comboInfo.set_expandSpace(_cellContext.cellExpandSpace);
                        comboInfo.set_listMaxWidth(Math.max(200, _cellContext.cellWidth));
                        comboInfo.set_listMinWidth(_cellContext.cellWidth);
                        _comboBoxCtrl = SP.UI.ComboBox.ComboBox.createComboBox(id, _sentinelValue, comboInfo);
                        comboInfo.set_dropdownStateCallback(OnDropDownStateChanged);
                        _comboBoxCtrl.add_valueUpdatedEvent(OnValueChanged);
                        _comboBoxCtrl.add_focusEvent(gridContext.OnActivateActor);
                        _comboBoxCtrl.add_blurEvent(gridContext.OnDeactivateActor);
                        LayoutPickerControl();
                        SetComboBoxValue(_cellContext.originalValue);
                        $addHandler(_container, 'keydown', OnKeyDown);
                    }
                });
            };
            this.Unbind = function() {
                _shouldBind = false;
                if (_isBound) {
                    _this.OnEndEdit();
                    $removeHandler(_container, 'keydown', OnKeyDown);
                    _cellContext.Hide(_container);
                    _isDirty = false;
                    _comboBoxCtrl.dispose();
                    while (_disposeFns.length > 0) {
                        _disposeFns.shift()();
                    }
                    _itemCache = null;
                }
                _isBound = false;
            };
            this.Expand = function() {
                if (_isBound) {
                    _comboBoxCtrl.openDropdown();
                    (_comboBoxCtrl.get_focusElement()).focus();
                }
            };
            this.Collapse = function() {
                if (_isBound) {
                    _comboBoxCtrl.closeDropdown();
                }
            };
            this.OnBeginEdit = function(eventInfo) {
                if (_isBound && eventInfo != null) {
                    if (SP.JsGrid.Utility.IsChar(eventInfo)) {
                        _bComboBoxInTypeAheadEditing = true;
                        _this.Expand();
                        _comboBoxCtrl.set_displayText(String.fromCharCode(eventInfo.charCode));
                    }
                    else if (eventInfo.type == 'keydown') {
                        if (eventInfo.keyCode == SP.Internal.Key.F2) {
                            _this.Expand();
                            _comboBoxCtrl.set_displayText(_comboBoxCtrl.get_displayText());
                        }
                        else if (eventInfo.keyCode == SP.Internal.Key.IMEInput) {
                            _this.Expand();
                            _comboBoxCtrl.set_displayText('');
                        }
                    }
                }
            };
            this.OnEndEdit = function() {
                if (_isBound) {
                    _comboBoxCtrl.commit();
                    _comboBoxCtrl.closeDropdown();
                }
            };
            this.OnCellMove = function() {
                if (_isBound) {
                    _comboBoxCtrl.closeDropdown();
                    LayoutPickerControl();
                }
            };
            this.OnValueChanged = function(newValue) {
                if (_isBound) {
                    SetComboBoxValue(newValue);
                }
            };
            this.SetSize = function(width, height) {
                if (_isBound) {
                    _container.style.minWidth = width + 'px';
                    _container.style.width = width + 'px';
                    _container.style.height = height + 'px';
                }
            };
            function LayoutPickerControl() {
                _this.SetSize(_cellContext.cellWidth, _cellContext.cellHeight);
                (_comboBoxCtrl.get_comboInfo()).set_listMaxWidth(Math.max(200, _cellContext.cellWidth));
                (_comboBoxCtrl.get_comboInfo()).set_listMinWidth(_cellContext.cellWidth);
                _cellContext.Show(_container);
                _comboBoxCtrl.notifySetLayout();
            }
            function OnKeyDown(domEvent) {
                if (domEvent.keyCode == Sys.UI.Key.esc) {
                    _processingEsc = true;
                    setTimeout(function() {
                        gridContext.OnKeyDown(domEvent);
                        _comboBoxCtrl.set_currentValue(_sentinelValue);
                        SetComboBoxValue(_cellContext.originalValue);
                        _processingEsc = false;
                    }, 0);
                }
                else {
                    gridContext.OnKeyDown(domEvent);
                }
            }
            function OnValueChanged() {
                if (_isBound) {
                    if (_processingEsc) {
                        return;
                    }
                    var newValue = GetComboBoxValue();

                    if (newValue) {
                        _cellContext.SetCurrentValue(newValue);
                        _isDirty = true;
                    }
                }
            }
            function OnDropDownStateChanged(bShown) {
                if (_processingEsc) {
                    return;
                }
                _dropDownHidden = !bShown;
                gridContext.bLightFocus = !bShown;
                if (bShown) {
                    _cellContext.NotifyExpandControl();
                }
                else if (_isDirty) {
                    _cellContext.NotifyEditComplete();
                    _isDirty = false;
                }
            }
            function OnListItemFocused(prevDomElem, newDomElem) {
                var elem;

                if (prevDomElem != null) {
                    elem = prevDomElem.childNodes[prevDomElem.childNodes.length - 1].firstChild;
                    Sys.UI.DomElement.removeCssClass(elem, 'cb-dp-rw-selected');
                }
                if (newDomElem != null) {
                    elem = newDomElem.childNodes[newDomElem.childNodes.length - 1].firstChild;
                    Sys.UI.DomElement.addCssClass(elem, 'cb-dp-rw-selected');
                }
            }
            function GetCellValue(prop, fieldKey) {
                var value = {};

                if (prop.HasDataValue(fieldKey)) {
                    value.data = prop.GetData(fieldKey);
                }
                if (prop.HasLocalizedValue(fieldKey)) {
                    value.localized = prop.GetLocalized(fieldKey);
                }
                if (prop.propType != null && prop.propType.GetDisplayValue != null) {
                    value.localized = prop.propType.GetDisplayValue(_cellContext.record, value.data, value.localized);
                }
                return value;
            }
            function GetListData(fnOnDataLoaded) {
                _itemCache = [];
                _cellContext.propType.GetItems(ProcessListData);
                function AddChild(child, elem) {
                    if (child.fnDispose != null) {
                        _disposeFns.push(child.fnDispose);
                        child = child.elem;
                    }
                    elem.appendChild(child);
                }
                function ProcessListData(itemProps) {
                    if (itemProps == null) {
                        fnOnDataLoaded(null, null, false, true);
                    }
                    else {
                        var renderer = SP.JsGrid.Internal.Property.GetDisplayControlForProperty(_cellContext.propType);

                        if (renderer == SP.JsGrid.Internal.Property.GetDisplayControl(SP.JsGrid.DisplayControl.Type.CSR)) {
                            renderer = SP.JsGrid.Internal.Property.GetDisplayControl(SP.JsGrid.DisplayControl.Type.Text);
                        }
                        if (_cellContext.propType.IsComboBoxTextOnly) {
                            renderer = SP.JsGrid.Internal.Property.GetDisplayControl(SP.JsGrid.DisplayControl.Type.Text);
                        }
                        else if (renderer.Id == SP.JsGrid.DisplayControl.Type.Image) {
                            renderer = SP.JsGrid.Internal.Property.GetDisplayControl(SP.JsGrid.DisplayControl.Type.ImageText);
                        }
                        var singleValuePropType = _cellContext.propType.singleValuePropType || _cellContext.propType;
                        var comboBoxItems = [], elements = [];

                        for (var i = 0; i < itemProps.length; i++) {
                            var value = GetCellValue(itemProps[i], _cellContext.fieldKey);
                            var outerElem = document.createElement('div');
                            var elem = document.createElement('div');

                            elem.style.cssText = 'white-space:nowrap;padding:4px';
                            outerElem.appendChild(elem);
                            var content = renderer.Render(value, _cellContext.record, _cellContext.column, _cellContext.field, singleValuePropType, {}, gridContext.jsGridObj, gridContext.RTL);

                            if (content != null) {
                                if (content.multipleChildren != null) {
                                    if (gridContext.RTL.bEnabled) {
                                        content.multipleChildren.reverse();
                                    }
                                    for (var j = 0; j < content.multipleChildren.length; j++) {
                                        AddChild(content.multipleChildren[j], elem);
                                    }
                                }
                                else {
                                    AddChild(content, elem);
                                }
                            }
                            if (_cellContext.propType.GetStyleId != null) {
                                var styleId = _cellContext.propType.GetStyleId(value.data);

                                if (styleId != null) {
                                    SP.JsGrid.Style.ApplyCellStyle(elem, gridContext.styleManager.GetCellStyle(styleId));
                                    elem.origBackgroundColor = SP.Internal.DomElement.GetComputedStyle(elem, 'backgroundColor', 'background-color');
                                }
                            }
                            _itemCache.push(value);
                            comboBoxItems.push([i + 1, value.localized]);
                            elements.push([document.createElement('div'), outerElem]);
                        }
                        fnOnDataLoaded(comboBoxItems, elements, false, false);
                    }
                    if (!_bComboBoxInTypeAheadEditing) {
                        SetComboBoxValue(_cellContext.originalValue);
                    }
                    else {
                        _bComboBoxInTypeAheadEditing = false;
                    }
                }
            }
            function GetComboBoxValue() {
                var value = _comboBoxCtrl.get_currentValue();

                if (value == _sentinelValue) {
                    return null;
                }
                if (_cellContext.propType.bMultiValue) {
                    Sys.Debug.assert(value != null, 'MV fill-in ID-based lists not supported by CB - can\'t get current value');
                    if (value != null) {
                        Sys.Debug.assert(_itemCache != null, 'OnValueChanged fired and returned IDs, but getDataCallback was never called by CB');
                    }
                    var data = [], locArr = [];
                    var splits = value.split(';#');

                    for (var i = 0; i < splits.length; i++) {
                        var id = splits[i];

                        if (id != '') {
                            data.push(_itemCache[id - 1].data);
                            locArr.push(_itemCache[id - 1].localized);
                        }
                    }
                    return {
                        data: data,
                        localized: locArr.join(_cellContext.propType.separator)
                    };
                }
                else {
                    if (value == null || value == '') {
                        var fillInValue = _comboBoxCtrl.get_displayText();

                        return {
                            localized: fillInValue
                        };
                    }
                    else {
                        Sys.Debug.assert(_itemCache != null, 'OnValueChanged fired and returned IDs, but getDataCallback was never called by CB');
                        var id = value;

                        Sys.Debug.assert(_itemCache[id - 1] != null, 'CB returned invalid id: "' + id + '"');
                        return {
                            data: _itemCache[id - 1].data,
                            localized: _itemCache[id - 1].localized
                        };
                    }
                }
            }
            function SetComboBoxValue(value) {
                if (_itemCache == null) {
                    _comboBoxCtrl.set_displayText(value.localized == null ? '' : value.localized);
                    return;
                }
                var ids = [];
                var bLookupIsDataVsLocalized = value.data != SP.JsGrid.EmptyValue;
                var svPropType = _cellContext.propType.bMultiValue ? _cellContext.propType.singleValuePropType : _cellContext.propType;
                var fillInValue;

                if (_cellContext.propType.bMultiValue) {
                    var lookupArray = bLookupIsDataVsLocalized ? value.data : _cellContext.propType.LocStrToLocStrArray(value.localized);

                    if (lookupArray != null) {
                        for (var i = 0; i < lookupArray.length; i++) {
                            ids.push(GetId(lookupArray[i]));
                        }
                    }
                }
                else {
                    var id = GetId(bLookupIsDataVsLocalized ? value.data : value.localized);

                    if (id != null) {
                        ids.push(id);
                    }
                    else {
                        fillInValue = value.localized;
                    }
                }
                _comboBoxCtrl.set_currentValue(ids.join(';#'));
                if (fillInValue != null) {
                    _comboBoxCtrl.set_displayText(fillInValue);
                }
                function GetId(lookup) {
                    var idx;

                    if (lookup != null) {
                        idx = SP.Internal.JS.FindInArray(_itemCache, bLookupIsDataVsLocalized ? DataEqual : LocalizedEqual);
                    }
                    return idx == null ? null : idx + 1;
                    function DataEqual(entry) {
                        var eqFn = svPropType.IsDataEqual;

                        return eqFn == null ? entry.data == lookup : eqFn(entry.data, lookup);
                    }
                    function LocalizedEqual(entry) {
                        return entry.localized == lookup;
                    }
                }
            }
            Init();
        },
        CheckboxEditControl: function(gridContext) {
            this.SupportedWriteMode = SP.JsGrid.EditActorWriteType.DataOnly;
            this.SupportedReadMode = SP.JsGrid.EditActorReadType.DataOnly;
            var _this = this;
            var _parentNode = gridContext.parentNode;
            var _cellContext;
            var mainDiv, cbx;
            var _checkboxActive = false;
            var _potentialToggleCoords = null;
            var _divShown = false;

            function Init() {
                gridContext.bLightFocus = true;
                mainDiv = document.createElement('div');
                mainDiv.style.cssText = 'position:absolute;top:0px;left:0px;visibility:hidden;text-align:center;background-color:#ffffff;';
                _parentNode.appendChild(mainDiv);
                cbx = document.createElement('input');
                cbx.type = 'checkbox';
                cbx.tabIndex = -1;
                mainDiv.appendChild(cbx);
                $addHandler(cbx, 'focus', gridContext.OnActivateActor);
                $addHandler(cbx, 'blur', gridContext.OnDeactivateActor);
                $addHandler(document.body, 'mouseup', function(eventInfo) {
                    if (_checkboxActive && !_divShown && _potentialToggleCoords != null) {
                        var cbLoc = SP.Internal.DomElement.GetLocation(cbx);
                        var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);

                        if (SP.Internal.DomElement.PointInDomElem(mouseLoc.x, mouseLoc.y, cbx, cbLoc) && SP.Internal.DomElement.PointInDomElem(_potentialToggleCoords.x, _potentialToggleCoords.y, cbx, cbLoc)) {
                            cbx.checked = !_cellContext.propType.GetBool(_cellContext.originalValue.data);
                            ApplyUpdate();
                        }
                    }
                    _divShown = false;
                });
                $addHandler(document.body, 'mousedown', function(eventInfo) {
                    var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);

                    _potentialToggleCoords = {
                        x: mouseLoc.x,
                        y: mouseLoc.y
                    };
                });
                $addHandler(mainDiv, 'mousedown', function(eventInfo) {
                    _divShown = true;
                });
                $addHandler(mainDiv, 'focus', function(eventInfo) {
                    cbx.focus();
                });
            }
            this.Dispose = function() {
                $clearHandlers(mainDiv);
                $clearHandlers(cbx);
                _parentNode.removeChild(mainDiv);
            };
            this.BindToCell = function(cellContext) {
                _cellContext = cellContext;
                Sys.Debug.assert(!_cellContext.propType.bMultiValue);
                _checkboxActive = true;
                LayoutControl();
                cbx.checked = _cellContext.propType.GetBool(_cellContext.originalValue.data);
                $addHandler(cbx, 'keydown', gridContext.OnKeyDown);
                $addHandler(cbx, 'click', ApplyUpdate);
            };
            this.OnCellMove = function() {
                LayoutControl();
            };
            this.SetSize = function(width, height) {
                mainDiv.style.width = width + 'px';
                var paddingTop = Math.floor((height - cbx.clientHeight) / 2);

                mainDiv.style.padding = paddingTop + "px 0px 0px 0px";
                mainDiv.style.height = height - paddingTop + 'px';
            };
            function LayoutControl() {
                _this.SetSize(_cellContext.cellWidth, _cellContext.cellHeight);
                _cellContext.Show(mainDiv);
            }
            this.Unbind = function() {
                _checkboxActive = false;
                $removeHandler(cbx, 'keydown', gridContext.OnKeyDown);
                $removeHandler(cbx, 'click', ApplyUpdate);
                _cellContext.Hide(mainDiv);
            };
            this.OnValueChanged = function() {
                cbx.checked = _cellContext.propType.GetBool(_cellContext.originalValue.data);
            };
            this.OnKeyDown = function(eventInfo) {
                if (eventInfo.keyCode == Sys.UI.Key.space || eventInfo.charCode == Sys.UI.Key.space) {
                    cbx.checked = !cbx.checked;
                    ApplyUpdate();
                    SP.Internal.DomElement.StopEvent(eventInfo);
                    return true;
                }
                return false;
            };
            this.OnBeginEdit = function(eventInfo) {
                cbx.focus();
            };
            this.OnEndEdit = function() {
            };
            function ApplyUpdate() {
                _cellContext.SetCurrentValue({
                    data: cbx.checked
                });
                _cellContext.NotifyEditComplete();
            }
            Init();
        }
    };
    SP.JsGrid.EditControl.GetHyperlinkEditControl = function(gridContext, gridTextInputElement) {
        var editBoxEditControl = new SP.JsGrid.EditControl.EditBoxEditControl(gridContext, gridTextInputElement);

        editBoxEditControl.SetValue = function(value) {
            var _tb = editBoxEditControl.GetInputElement();
            var _cellContext = editBoxEditControl.GetCellContext();
            var oldDisplay = _cellContext.originalValue.data != null ? _cellContext.originalValue.data.display : null;
            var oldAddress = _cellContext.originalValue.data != null ? _cellContext.originalValue.data.address : null;
            var newDisplay = oldDisplay == null || oldDisplay == '' || oldDisplay == oldAddress ? _tb.value : oldDisplay;
            var hyperlinkData = {
                address: _tb.value,
                display: newDisplay
            };

            _cellContext.SetCurrentValue({
                data: hyperlinkData
            });
        };
        editBoxEditControl.GetOriginalValue = function() {
            var _cellContext = editBoxEditControl.GetCellContext();

            return _cellContext.originalValue.data != null ? _cellContext.originalValue.data.address : null;
        };
        editBoxEditControl.OnValueChanged = function(newValue) {
            var _tb = editBoxEditControl.GetInputElement();

            _tb.value = newValue.data == null || newValue.data.address == null || newValue.data == SP.JsGrid.EmptyValue || newValue.data.address == SP.JsGrid.EmptyValue ? '' : newValue.data.address;
        };
        return editBoxEditControl;
    };
    SP.JsGrid.EditControl.Type = {
        EditBox: 'EDIT_EDITBOX',
        ComboBox: 'EDIT_COMBOBOX',
        Checkbox: 'EDIT_CHECKBOX',
        Hyperlink: 'EDIT_HYPERLINK'
    };
    if (!Type.isNamespace('SP.JsGrid')) {
        Type.registerNamespace('SP.JsGrid');
    }
    SP.JsGrid.WidgetControl = {
        DemoWidget: function(gridContext) {
            this.SupportedWriteMode = SP.JsGrid.EditActorWriteType.LocalizedOnly;
            this.SupportedReadMode = SP.JsGrid.EditActorReadType.LocalizedOnly;
            var _this = this;
            var _parentNode = gridContext.parentNode;
            var _cellContext;
            var mainDiv;
            var _widgetHeight;

            function Init() {
                mainDiv = document.createElement('div');
                mainDiv.id = 'mainDiv';
                mainDiv.style.cssText = 'position:absolute; top:0px;left:0px; visibility:hidden; font-size:10; background-color:#ffffff; line-height:100px; border:4px solid:#333333; height:100px; width:200px; overflow-x:hidden;';
                _parentNode.appendChild(mainDiv);
            }
            this.Dispose = function() {
                $clearHandlers(mainDiv);
                _parentNode.removeChild(mainDiv);
            };
            this.BindToCell = function(cellContext) {
                _cellContext = cellContext;
                mainDiv.innerText = _cellContext.originalValue.localized == SP.JsGrid.EmptyValue ? '' : _cellContext.originalValue.localized;
                _widgetHeight = mainDiv.offsetHeight;
            };
            this.Unbind = function() {
            };
            this.GetIcon = function() {
                return (new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'jsgridcluster.png', true, 'clip16x16', 'jsgridcluster_cell-error')).Render(SP.JsGrid.Res.openErrorWidget);
            };
            this.Collapse = function() {
                mainDiv.style.visibility = 'hidden';
                _cellContext.NotifyCollapseWidget();
            };
            this.Expand = function() {
                _cellContext.NotifyExpandWidget();
                var tdRect = _cellContext.cellRect;

                mainDiv.style.top = (_cellContext.cellExpandSpace.bottom > _widgetHeight || _cellContext.cellExpandSpace.top < _widgetHeight ? tdRect.y + tdRect.height + 3 : tdRect.y - _widgetHeight - 3) + 'px';
                mainDiv.style.left = tdRect.x - (gridContext.RTL.bEnabled ? mainDiv.offsetWidth - tdRect.width : 2) + 'px';
                mainDiv.style.visibility = '';
            };
            this.OnValueChanged = function(newValue) {
                mainDiv.innerText = newValue.localized;
            };
            Init();
        },
        ErrorWidget: function(gridContext, errorMgr) {
            this.SupportedWriteMode = SP.JsGrid.EditActorWriteType.Either;
            this.SupportedReadMode = SP.JsGrid.EditActorReadType.Both;
            var id = SP.JsGrid.ErrorWidgetId;
            var _this = this;
            var _parentNode = gridContext.parentNode;
            var _cellContext;
            var mainDiv, focusElement, errorSpan;
            var _widgetHeight;

            function Init() {
                gridContext.bLightFocus = true;
                mainDiv = document.createElement('div');
                mainDiv.id = id + '_mainDiv';
                mainDiv.style.cssText = 'z-index:1;visibility:hidden; font-size:10; position:absolute; top:0px;left:0px; background-color:#FFE0E0; border:1px solid #DD3300; padding:5px 10px; color:#333333 !important';
                _parentNode.appendChild(mainDiv);
                focusElement = document.createElement('input');
                focusElement.id = id + "_focuselem";
                focusElement.style.cssText = 'position:fixed;top:0px;left:-10px;height:0px;width:0px;';
                focusElement.setAttribute('role', 'presentation');
                mainDiv.appendChild(focusElement);
                errorSpan = document.createElement('span');
                errorSpan.id = id + '_errorSpan';
                mainDiv.appendChild(errorSpan);
            }
            this.Dispose = function() {
                _parentNode.removeChild(mainDiv);
            };
            this.BindToCell = function(cellContext) {
                _cellContext = cellContext;
                $addHandler(mainDiv, 'keydown', gridContext.OnKeyDown);
            };
            this.Unbind = function() {
                $clearHandlers(mainDiv);
            };
            this.GetIcon = function() {
                return (new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'jsgridcluster.png', true, 'clip16x16', 'jsgridcluster_cell-error')).Render(SP.JsGrid.Res.openErrorWidget);
            };
            this.Collapse = function() {
                mainDiv.style.visibility = 'hidden';
                _cellContext.NotifyCollapseWidget();
            };
            this.Expand = function() {
                SP.Internal.DomElement.SetText(errorSpan, errorMgr.GetMessageForCell(_cellContext.record.key(), _cellContext.fieldKey));
                _widgetHeight = mainDiv.offsetHeight;
                var tdRect = _cellContext.cellRect;

                mainDiv.style.top = (_cellContext.cellExpandSpace.bottom > _widgetHeight || _cellContext.cellExpandSpace.top < _widgetHeight ? tdRect.y + tdRect.height + 3 : tdRect.y - _widgetHeight - 3) + 'px';
                mainDiv.style.left = tdRect.x - (gridContext.RTL.bEnabled ? mainDiv.offsetWidth - tdRect.width : 2) + 'px';
                _cellContext.NotifyExpandWidget();
                mainDiv.style.visibility = '';
                focusElement.focus();
            };
            this.OnValueChanged = function(newValue) {
            };
            Init();
        },
        DateWidget: function(gridContext) {
            this.SupportedWriteMode = SP.JsGrid.EditActorWriteType.LocalizedOnly;
            this.SupportedReadMode = SP.JsGrid.EditActorReadType.LocalizedOnly;
            var _parentNode = gridContext.parentNode;
            var _cellContext;
            var _box, _anchor, _iframe;
            var _widgetHeight = 200;
            var _this = this;
            var _curValue;

            function ClickDatePickerFn(arg1, arg2, arg3, callback) {
                var loadedFn = function() {
                    if (typeof clickDatePicker == 'function') {
                        clickDatePicker(arg1, arg2, arg3);
                    }
                    if (callback != null) {
                        callback();
                    }
                };

                if (typeof EnsureScriptFunc == 'function') {
                    EnsureScriptFunc('datepicker.js', 'clickDatePicker', loadedFn);
                }
                else {
                    loadedFn();
                }
            }
            var strDatePickerImageID = typeof g_strDatePickerImageID != 'undefined' ? g_strDatePickerImageID : "DatePickerImage";
            var strDatePickerFrameID = typeof g_strDatePickerFrameID != 'undefined' ? g_strDatePickerFrameID : "DatePickerFrame";

            function Init() {
                _box = document.createElement('input');
                _box.id = 'datewidgetinput-' + _parentNode.id;
                _box.style.cssText = 'display:none;position:absolute;top:0px;left:0px';
                _box.onvaluesetfrompicker = OnValueSetHandler;
                _box.tabIndex = -1;
                _parentNode.appendChild(_box);
                _anchor = document.createElement('div');
                _anchor.id = _box.id + strDatePickerImageID;
                _anchor.style.cssText = 'position:absolute;background:transparent;visibility:hidden;height:0px;z-index:-1';
                _parentNode.appendChild(_anchor);
                _iframe = document.createElement('iframe');
                _iframe.id = _box.id + strDatePickerFrameID;
                _iframe.src = SP.JsGrid.ImagesDirectory + 'blank.gif';
                _iframe.frameBorder = '0';
                _iframe.scrolling = 'no';
                _iframe.title = SP.JsGrid.Res.calendarTitle;
                _iframe.style.cssText = 'display:none;position:absolute;width:220px;z-index:1';
                _iframe.tabIndex = -1;
                _parentNode.appendChild(_iframe);
                if (window.g_strDateTimeControlIDs == null) {
                    g_strDateTimeControlIDs = [];
                }
                g_strDateTimeControlIDs['JsGridDatePicker'] = _box.id;
            }
            this.Dispose = function() {
                _box.onvaluesetfrompicker = null;
                _parentNode.removeChild(_box);
                _parentNode.removeChild(_anchor);
                _parentNode.removeChild(_iframe);
            };
            this.BindToCell = function(cellContext) {
                _cellContext = cellContext;
                _curValue = _cellContext.originalValue.localized == SP.JsGrid.EmptyValue ? '' : _cellContext.originalValue.localized;
            };
            this.Unbind = function() {
                _curValue = null;
            };
            this.Expand = function() {
                var tdRect = _cellContext.cellRect;

                Sys.Debug.assert(tdRect != null);
                if (tdRect != null) {
                    _anchor.style.width = tdRect.width + 'px';
                    _anchor.style.top = (_cellContext.cellExpandSpace.bottom > _widgetHeight || _cellContext.cellExpandSpace.top < _widgetHeight ? tdRect.y + tdRect.height + 3 : tdRect.y - _widgetHeight - 3) + 'px';
                    _anchor.style.left = tdRect.x - (gridContext.RTL.bEnabled ? _anchor.offsetWidth - tdRect.width : 2) + 'px';
                    _anchor.style.visibility = '';
                    _box.value = _curValue != null ? _curValue : '';
                    _cellContext.NotifyExpandWidget();
                    ClickDatePickerFn(_box.id, GetDatePickerQueryString(), _box.value, function() {
                        var origResultFunc = _iframe.resultfunc;

                        _iframe.resultfunc = function(arg) {
                            if (arg == null) {
                                _cellContext.NotifyEditComplete(true);
                            }
                            _this.Collapse();
                            origResultFunc(arg);
                        };
                    });
                }
            };
            this.GetIcon = function() {
                return (new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'calendar.gif')).Render(SP.JsGrid.Res.openCalendar);
            };
            this.Collapse = function() {
                if (Sys.UI.DomElement.getVisible(_iframe)) {
                    ClickDatePickerFn(_box.id, GetDatePickerQueryString(), _box.value, function() {
                        _cellContext.NotifyCollapseWidget();
                    });
                }
                else {
                    _cellContext.NotifyCollapseWidget();
                }
            };
            this.OnValueChanged = function(newValue) {
                _curValue = newValue.localized;
            };
            function OnValueSetHandler() {
                _cellContext.SetCurrentValue({
                    localized: _box.value
                });
                _cellContext.NotifyEditComplete();
            }
            function GetDatePickerQueryString() {
                return [SP.Utilities.Utility.getLayoutsPageUrl('iframe.aspx?'), '&cal=', _spRegionalSettings.calendarType, '&lcid=', _spRegionalSettings.localeId, '&langid=', _spPageContextInfo.currentLanguage, '&tz=', _spRegionalSettings.timeZone, '&time24=', _spRegionalSettings.time24 ? 'true' : 'false', '&ww=', _spRegionalSettings.workDays, '&fdow=', _spRegionalSettings.firstDayOfWeek, '&fwoy=', _spRegionalSettings.firstWeekOfYear, '&hj=', _spRegionalSettings.adjustHijriDays, '&swn=', _spRegionalSettings.showWeeks ? 'true' : 'false', '&minjday=109207', '&maxjday=2666269', '&dateonly=', _cellContext.field.dateOnly ? 'true' : 'false', '&date='].join('');
            }
            Init();
        },
        AddressBookWidget: function(gridContext) {
            this.SupportedWriteMode = SP.JsGrid.EditActorWriteType.Either;
            this.SupportedReadMode = SP.JsGrid.EditActorReadType.Both;
            var _currentLocVal;
            var _this = this;
            var _modalAddressBookVisible;

            function Init() {
            }
            this.Dispose = function() {
            };
            this.BindToCell = function(cellContext) {
                _cellContext = cellContext;
                _currentLocVal = _cellContext.originalValue.localized == SP.JsGrid.EmptyValue ? '' : _cellContext.originalValue.localized;
            };
            this.Unbind = function() {
            };
            this.Expand = function() {
                _cellContext.NotifyExpandWidget();
                var ppfn = (_cellContext.propType.bMultiValue ? _cellContext.propType.singleValuePropType : _cellContext.propType).GetPeoplePickerUrl;
                var dialogUrl = ppfn(_cellContext.fieldKey);
                var options = {
                    width: 575,
                    height: 500,
                    resizeable: true,
                    url: dialogUrl,
                    dialogReturnValueCallback: OnAddressBookDismissed
                };

                EnsureScriptParams("SP.UI.Dialog.js", "SP.UI.ModalDialog.showModalDialog", options);
                _modalAddressBookVisible = true;
            };
            this.GetIcon = function() {
                return (new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'addressbook.gif')).Render(SP.JsGrid.Res.openAddressBook);
            };
            this.Collapse = function() {
            };
            this.OnValueChanged = function(newValue) {
                _currentLocVal = newValue.localized == SP.JsGrid.EmptyValue ? '' : newValue.localized;
            };
            function OnAddressBookDismissed(dialogResult, xmlText) {
                _modalAddressBookVisible = false;
                if (xmlText == null) {
                    _cellContext.NotifyEditComplete(true);
                }
                else {
                    Sys.Debug.assert(dialogResult == 1);
                    var xmlDoc = SP.Internal.DomElement.GetXmlDomObj(xmlText);
                    var entities = xmlDoc.documentElement.childNodes;
                    var localized = [];
                    var data = [];

                    for (var i = 0; i < entities.length; i++) {
                        var e = entities[i];

                        localized.push(e.getAttribute("DisplayText"));
                        data.push("-1;#" + e.getAttribute("Key"));
                    }
                    if (localized.length != 0) {
                        _cellContext.SetCurrentValue({
                            localized: localized.join("; "),
                            data: data.join(";#")
                        });
                    }
                    _cellContext.NotifyEditComplete();
                }
                _cellContext.NotifyCollapseWidget();
            }
            Init();
        },
        HyperlinkWidget: function(gridContext) {
            this.SupportedWriteMode = SP.JsGrid.EditActorWriteType.Either;
            this.SupportedReadMode = SP.JsGrid.EditActorReadType.Both;
            var id = "HyperlinkWidgetControl";
            var _this = this;
            var _parentNode = gridContext.parentNode;
            var _cellContext;
            var _mainDiv, _displayInput, _addressInput, _verifyButton, _okButton, _cancelButton;
            var _displayInputId, _addressInputId, _verifyButtonId, _okButtonId, _cancelButtonId;
            var _currentDisplayValue, _currentAddress;
            var _widgetHeight;

            function Init() {
                _mainDiv = document.createElement('div');
                _mainDiv.id = 'mainDiv';
                _mainDiv.className = 'jsgrid-widget-hyperlink';
                _mainDiv.style.cssText = 'z-index:1; visibility:hidden; position:absolute; top:0px;left:0px; width:290px; direction:' + gridContext.RTL.ltr + ';';
                _parentNode.appendChild(_mainDiv);
                _addressInputId = String.format('{0}_{1}', id, 'addressInput');
                _verifyButtonId = String.format('{0}_{1}', id, 'verifyButton');
                _displayInputId = String.format('{0}_{1}', id, 'displayInput');
                _okButtonId = String.format('{0}_{1}', id, 'okButton');
                _cancelButtonId = String.format('{0}_{1}', id, 'cancelButton');
                var cancelButtonHtml = String.format('<DIV style="margin:3px 10px 0px 10px; text-align:{0};"><img src="{1}" alt="{2}" title="{2}" id="{3}" tabIndex="-1" style="cursor:pointer;"/></DIV>', gridContext.RTL.Right, SP.JsGrid.ImagesDirectory + 'closexon.png', SP.JsGrid.Res.close, _cancelButtonId);
                var verifyHtml = String.format('<a href="javascript:;" id="{0}" title="{1}" style="float:{2};">{1}</a>', _verifyButtonId, SP.JsGrid.Res.testHyperlink, gridContext.RTL.Right);
                var sectionHtml = '<DIV style="margin:3px 10px 9px 10px;"><LABEL for={0}>{1}</LABEL>{3}<DIV style="margin-top:3px;"><INPUT id={0} style="width:268px; padding:0px;" maxLength="1024" type="text"></DIV><DIV style="margin-top:3px;">{2}</DIV></DIV>';
                var addressSectionHtml = String.format(sectionHtml, _addressInputId, SP.JsGrid.Res.hyperlinkAddress, SP.JsGrid.Res.hyperlinkAddressExample, verifyHtml);
                var displaySectionHtml = String.format(sectionHtml, _displayInputId, SP.JsGrid.Res.hyperlinkDisplay, SP.JsGrid.Res.hyperlinkDisplayExample, '');
                var okButtonHtml = String.format('<DIV style="padding:3px 10px 3px 10px; text-align:{0}" class="jsgrid-widget-hyperlink-buttonarea"><a href="javascript:;" title="{1}" id="{2}" class="jsgrid-widget-hyperlink-okbutton">{1}</a></DIV>', gridContext.RTL.Right, SP.JsGrid.Res.ok, _okButtonId);

                _mainDiv.innerHTML = [cancelButtonHtml, addressSectionHtml, displaySectionHtml, okButtonHtml].join('');
                _widgetHeight = _mainDiv.offsetHeight;
                _addressInput = $get(_addressInputId);
                _verifyButton = $get(_verifyButtonId);
                _displayInput = $get(_displayInputId);
                _okButton = $get(_okButtonId);
                _cancelButton = $get(_cancelButtonId);
                $addHandler(_displayInput, 'keyup', OnDisplayValueUpdated);
                $addHandler(_okButton, 'click', OnOK);
                $addHandler(_cancelButton, 'click', OnCancel);
                $addHandler(_verifyButton, 'click', OnVerify);
                $addHandler(_mainDiv, 'keydown', OnKeyDown);
                $addHandler(_mainDiv, 'mousedown', OnMouseDown);
            }
            this.Dispose = function() {
                $clearHandlers(_displayInput);
                $clearHandlers(_okButton);
                $clearHandlers(_cancelButton);
                $clearHandlers(_verifyButton);
                $clearHandlers(_mainDiv);
                _parentNode.removeChild(_mainDiv);
            };
            this.BindToCell = function(cellContext) {
                _cellContext = cellContext;
                _currentDisplayValue = _cellContext.originalValue.localized != SP.JsGrid.EmptyValue ? _cellContext.originalValue.localized : _cellContext.propType.GetAddress(_cellContext.originalValue.data);
                _currentAddress = _cellContext.originalValue.data != SP.JsGrid.EmptyValue ? _cellContext.propType.GetAddress(_cellContext.originalValue.data) : _cellContext.originalValue.localized;
            };
            this.Unbind = function() {
            };
            this.GetIcon = function() {
                return (new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'link.gif')).Render(SP.JsGrid.Res.editHyperlink);
            };
            this.Collapse = function() {
                _mainDiv.style.visibility = 'hidden';
                _cellContext.NotifyCollapseWidget();
            };
            this.Expand = function() {
                var tdRect = _cellContext.cellRect;

                _mainDiv.style.top = (_cellContext.cellExpandSpace.bottom > _widgetHeight || _cellContext.cellExpandSpace.top < _widgetHeight ? tdRect.y + tdRect.height + 3 : tdRect.y - _widgetHeight - 3) + 'px';
                _mainDiv.style.left = (gridContext.RTL.bEnabled ? tdRect.x : tdRect.x + tdRect.width - _mainDiv.offsetWidth) + 'px';
                _currentDisplayValue = _cellContext.originalValue.localized != SP.JsGrid.EmptyValue ? _cellContext.originalValue.localized : _cellContext.propType.GetAddress(_cellContext.originalValue.data);
                _currentAddress = _cellContext.originalValue.data != SP.JsGrid.EmptyValue ? _cellContext.propType.GetAddress(_cellContext.originalValue.data) : _cellContext.originalValue.localized;
                _displayInput.value = _currentDisplayValue;
                _addressInput.value = _currentAddress;
                _cellContext.NotifyExpandWidget();
                _mainDiv.style.visibility = '';
                _addressInput.focus();
                _addressInput.value = _addressInput.value;
            };
            this.OnValueChanged = function(newValue) {
                _currentDisplayValue = newValue.localized == null || newValue.localized == SP.JsGrid.EmptyValue ? '' : newValue.localized;
                _currentAddress = newValue.data == null || newValue.data == SP.JsGrid.EmptyValue ? _currentDisplayValue : _cellContext.propType.GetAddress(newValue.data);
            };
            function OnDisplayValueUpdated() {
                SetCurrentValue();
            }
            function OnOK(evt) {
                SetCurrentValue();
                _cellContext.NotifyEditComplete();
                _this.Collapse();
                if (evt != null && evt.preventDefault != null) {
                    evt.preventDefault();
                }
                return false;
            }
            function OnCancel() {
                _cellContext.NotifyEditComplete(true);
            }
            function OnVerify() {
                window.open(_addressInput.value);
            }
            function SetCurrentValue() {
                _cellContext.SetCurrentValue({
                    localized: _displayInput.value,
                    data: {
                        address: _addressInput.value,
                        display: _displayInput.value
                    }
                });
            }
            function OnKeyDown(eventInfo) {
                var noActionKeys = !eventInfo.ctrlKey && !eventInfo.altKey && !eventInfo.shiftKey;

                if (HandleKey()) {
                    SP.Internal.DomElement.StopEvent(eventInfo);
                }
                else {
                    eventInfo.stopPropagation();
                }
                function HandleKey() {
                    switch (eventInfo.keyCode) {
                    case Sys.UI.Key.esc:
                        OnCancel();
                        return true;
                    case Sys.UI.Key.enter:
                        if (eventInfo.target == _cancelButton) {
                            OnCancel();
                        }
                        else if (eventInfo.target == _verifyButton) {
                            OnVerify();
                        }
                        else {
                            OnOK();
                        }
                        return true;
                    case Sys.UI.Key.tab:
                        if (noActionKeys) {
                            if (eventInfo.target == _okButton) {
                                _cancelButton.focus();
                                return true;
                            }
                        }
                        else if (eventInfo.shiftKey) {
                            if (eventInfo.target == _cancelButton) {
                                _okButton.focus();
                                return true;
                            }
                            else if (eventInfo.target == _verifyButton) {
                                _cancelButton.focus();
                                return true;
                            }
                        }
                        break;
                    }
                    return false;
                }
            }
            function OnMouseDown(eventInfo) {
                eventInfo.stopPropagation();
            }
            Init();
        }
    };
    SP.JsGrid.WidgetControl.Type = {
        Demo: 'WIDGET_DEMO',
        Date: 'WIDGET_DATE',
        AddressBook: 'WIDGET_ADDRESSBOOK',
        Hyperlink: 'WIDGET_HYPERLINK'
    };
    SP.JsGrid.Internal.MVCController = function(objBag, fnGetLocStr, bEnableDiffTracking) {
        var hierarchyMgr;
        var origFnGetDisplayControlName;
        var _this = this;
        var bEditingEnabled;
        var bNewRowEnabled;
        var controller = this;
        var versionMgr = objBag.versionMgr = new SP.JsGrid.Internal.VersionManager(objBag, DoPhysicalPropChange, DoPhysicalRowInsert, DoPhysicalRowDelete, DoPhysicalLevelChange, GetRecord);
        var checkSelMgr = new SP.JsGrid.Internal.CheckSelectionManager(objBag);
        var pendingChangeMgr = objBag.pendingChangeMgr = new SP.JsGrid.Internal.PendingChangesManager(objBag);
        var propUpdateMgr = new SP.JsGrid.Internal.PropertyUpdateManager(objBag);

        objBag.tableCache.fnApplyUpdatesToNewRecord = function(record) {
            versionMgr.ApplyChangesToRecord(record);
        };
        var diffTracker = bEnableDiffTracking ? InitDiffTracker() : null;
        var editUtil = objBag.editUtil = new EditUtility();
        var processingNewRow = false;
        var gridFieldMap;
        var posConverter;
        var operationalUtil;
        var columns;
        var defaultEditMode;
        var hierarchyMode;
        var hierarchyDelayLoadKeySet;
        var actionsAssociatedWithUndo = {};
        var eventSinks = {
            OnPropertiesChanged: function(propertyUpdates, changeName, optChangeKey, optfnOnChangeKeyAvailable) {
                _this.UpdateProperties(propertyUpdates, changeName, optChangeKey, optfnOnChangeKeyAvailable);
            },
            OnNodeExpanded: function(recordKey) {
                _this.ExpandNode(recordKey);
            },
            OnNodeCollapsed: function(recordKey) {
                _this.CollapseNode(recordKey);
            },
            OnFocusedCellChanged: function(focusedCellExpandedArgs) {
                OnCellFocusedChanged(focusedCellExpandedArgs);
            }
        };

        this.GetCurrentDataValue = function(recordKey, fieldKey) {
            var r = versionMgr.GetCurrentValue(recordKey, fieldKey);

            if (r == SP.JsGrid.EmptyValue) {
                var rec = objBag.tableCache.GetCachedRecord(recordKey);

                r = rec != null ? rec.GetDataValue(fieldKey) : null;
            }
            else {
                r = r.GetData();
            }
            return r;
        };
        this.GetEarliestChangeKeyForRecord = function(recordKey) {
            return versionMgr.GetEarliestPropChangeKeyForRecord(recordKey);
        };
        this.GetCurrentLocalizedValue = function(recordKey, fieldKey) {
            var r = versionMgr.GetCurrentValue(recordKey, fieldKey);

            if (r == SP.JsGrid.EmptyValue) {
                var rec = objBag.tableCache.GetCachedRecord(recordKey);

                r = rec != null ? rec.GetLocalizedValue(fieldKey) : null;
            }
            else {
                r = r.GetLocalized();
            }
            return r;
        };
        this.GetPropType = function(recordKey, fieldKey) {
            var record = objBag.tableCache.GetCachedRecord(recordKey);
            var r = null;

            if (record != null && record.GetProp(fieldKey) != null) {
                r = (record.GetProp(fieldKey)).propType;
            }
            else if (objBag.entryRecordMgr.IsEntryRecordKey(recordKey) && objBag.jsGridParams.tableViewParams.gridFieldMap[fieldKey] != null) {
                r = objBag.jsGridParams.tableViewParams.gridFieldMap[fieldKey].GetPropType();
            }
            else if (fieldKey == SP.JsGrid.RecordIndicatorCheckboxColumnKey) {
                r = SP.JsGrid.Internal.Property.GetPropType('RecordIndicatorCheckBoxBoolean');
            }
            if (r == null)
                r = SP.JsGrid.Internal.Property.GetPropType('String');
            return r;
        };
        this.ClearAllPropChangesForRecord = function(recordKey) {
            versionMgr.ClearAllPropChangesForRecord(recordKey);
        };
        this.NotifyDataAvailable = function() {
            objBag.paneMgr.RefreshAllRows(0);
        };
        this.NotifySave = function() {
            if (diffTracker != null) {
                diffTracker.Clear();
            }
        };
        this.ClearChanges = function() {
            objBag.commandMgr.ClearUndoStack();
            if (diffTracker != null) {
                diffTracker.Clear();
            }
            if (versionMgr != null) {
                versionMgr.Clear();
            }
        };
        this.GetViewEventSinks = function() {
            return eventSinks;
        };
        this.ClearTableView = function() {
            objBag.entryRecordMgr.NotifyTableViewCleared();
            objBag.paneMgr.ClearView();
        };
        this.TryReadPropForChangeKey = function(recordKey, fieldKey, changeKey) {
            return versionMgr.TryReadPropForChangeKey(recordKey, fieldKey, changeKey);
        };
        this.SetTableView = function(rowViewParams, pColumns, pgridFieldMap, pDefaultEditMode, pbNewRowEnabled, pbEditingEnabled, splitterPos, pPosConverter, pOperationalUtil, fnGetGridRowStyleId, allowedSelectionTypes, bMovableColumns, bResizableColumns, bHidableColumns, bSortableColumns, bAutoFilterableColumns, bRowHeadersEnabled, paneLayout, ganttParams, pivotedGridParams, bRowCheckboxes, checkSelectionCheckboxHiddenRecordKeys, checkSelectionCheckboxDisabledRecordKeys, checkSelectionCheckedRecordKeys) {
            posConverter = pPosConverter;
            operationalUtil = pOperationalUtil;
            columns = pColumns;
            defaultEditMode = pDefaultEditMode;
            gridFieldMap = pgridFieldMap;
            bNewRowEnabled = pbNewRowEnabled;
            bEditingEnabled = pbEditingEnabled;
            SetRowViewInternal(rowViewParams, false);
            checkSelMgr.SetTableView(checkSelectionCheckboxHiddenRecordKeys, checkSelectionCheckboxDisabledRecordKeys, checkSelectionCheckedRecordKeys);
            if (objBag.columnMenuMgr != null) {
                objBag.columnMenuMgr.Dispose();
            }
            objBag.columnMenuMgr = new SP.JsGrid.Internal.ColumnMenuManager(objBag, rowViewParams.autoFilterState, rowViewParams.autoFilterEntries, gridFieldMap, fnGetLocStr);
            objBag.paneMgr.SetView(posConverter, columns, gridFieldMap, rowViewParams.topViewIdx, operationalUtil, splitterPos, fnGetGridRowStyleId, allowedSelectionTypes, bMovableColumns, bResizableColumns, bHidableColumns, bSortableColumns, bAutoFilterableColumns, bRowHeadersEnabled, paneLayout, ganttParams, pivotedGridParams, bRowCheckboxes, rowViewParams.sortState);
            UpdateFilterAndSortState(rowViewParams.sortState, rowViewParams.filterState, rowViewParams.autoFilterState);
        };
        this.SetRowView = function(rowViewParams) {
            SetRowViewInternal(rowViewParams, true);
            objBag.columnMenuMgr.SetAutoFilterState(rowViewParams.autoFilterState);
            objBag.columnMenuMgr.SeedAutoFilterEntryCache(rowViewParams.autoFilterEntries);
        };
        this.ChangeKeys = function(oldKey, newKey) {
            objBag.paneMgr.ChangeKeys(oldKey, newKey);
            versionMgr.ChangeKeysOnPropUpdates(oldKey, newKey);
            SP.JsGrid.AsynchronousCellUpdater.ChangeRecordKeys(oldKey, newKey);
            objBag.rowHeaderStateMgr.ChangeKeys(oldKey, newKey);
            objBag.errorMgr.ChangeKeys(oldKey, newKey);
            if (!objBag.entryRecordMgr.IsEntryRecordKey(oldKey)) {
                objBag.tableCache.ChangeKeys(oldKey, newKey);
                if (hierarchyMgr != null) {
                    hierarchyMgr.ChangeKeys(oldKey, newKey);
                }
            }
        };
        function UpdateFilterAndSortState(sortState, filterState, autoFilterState) {
            objBag.paneMgr.SetSortState(sortState);
            var curState = new SP.Utilities.Set(autoFilterState);

            if (filterState != null) {
                curState = curState.Union(filterState);
            }
            objBag.paneMgr.SetFilterState(curState.ToArray());
        }
        ;
        function SetRowViewInternal(rowViewParams, bUpdatePaneManager) {
            objBag.tableCache.SetView(rowViewParams.view, rowViewParams.minimalInfo && rowViewParams.minimalInfo.recordCount);
            hierarchyMode = rowViewParams.hierarchyMode;
            if (hierarchyMode == SP.JsGrid.HierarchyMode.None) {
                DisableHierarchy();
            }
            else {
                EnableHierarchy(hierarchyMode == SP.JsGrid.HierarchyMode.Grouping ? rowViewParams.groupingLevel : null, hierarchyMode == SP.JsGrid.HierarchyMode.Grouping ? rowViewParams.groupingRecordKeyPrefix : null, rowViewParams.unfilteredHierarchyMgr, rowViewParams.hierarchyDelayLoadKeys, rowViewParams.hierarchyState, rowViewParams.filteredDescCounts);
            }
            if (bUpdatePaneManager) {
                objBag.paneMgr.NotifyNewRowStateChanged(true);
                objBag.paneMgr.RefreshAllRows(rowViewParams.topViewIdx);
                UpdateFilterAndSortState(rowViewParams.sortState, rowViewParams.filterState, rowViewParams.autoFilterState);
            }
        }
        ;
        this.GetHierarchyManager = function() {
            return hierarchyMgr;
        };
        this.GetOutlineLevel = function(record) {
            Sys.Debug.assert(hierarchyMgr != null);
            return hierarchyMgr.GetOutlineLevel(record);
        };
        this.GetDiffTracker = function() {
            Sys.Debug.assert(diffTracker != null);
            return diffTracker != null ? diffTracker.ExternalAPI : null;
        };
        this.UpdateProperties = function(updateRequests, changeName, changeKey, optfnOnChangeKeyAvailable) {
            Sys.Debug.assert(updateRequests.length > 0);
            var cmd;

            if (changeKey == null) {
                objBag.commandMgr.OpenGroup();
                cmd = this.CreateDataUpdateCmd();
                changeKey = cmd.GetChangeKey();
            }
            if (optfnOnChangeKeyAvailable != null) {
                optfnOnChangeKeyAvailable(changeKey);
            }
            propUpdateMgr.ApplyPropUpdates(updateRequests, changeKey);
            if (cmd != null) {
                objBag.commandMgr.Execute(cmd, changeName, SP.JsGrid.CommandManager.CommandType.Explicit);
                objBag.commandMgr.CloseGroup(changeName, SP.JsGrid.CommandManager.CommandType.Explicit, true);
            }
            return changeKey;
        };
        this.InsertHiddenRecord = function(recordKey, changeKey, optAfterRecordKey) {
            if (optAfterRecordKey != null && objBag.entryRecordMgr.IsEntryRecordKey(optAfterRecordKey)) {
                alert(fnGetLocStr('NoInsertAfterEntryRow'));
                return null;
            }
            return InsertRecordAfterCore(GenerateRowUpdateForInsert(recordKey, false, optAfterRecordKey, false, false), changeKey);
        };
        this.InsertRecordAfter = function(afterRecordKey, newRecord, changeKey, bUpdateFocusPos, bDoNotUpdatePaneOnFirstAdd, optVisualAfterRecordKey, bUseVisualAfterRecordKey) {
            if (objBag.entryRecordMgr.IsEntryRecordKey(afterRecordKey)) {
                alert(fnGetLocStr('NoInsertAfterEntryRow'));
                return null;
            }
            objBag.tableCache.SeedInsertedRecord(newRecord);
            return InsertRecordAfterCore(GenerateRowUpdateForInsert(newRecord.key(), true, afterRecordKey, bUpdateFocusPos, bDoNotUpdatePaneOnFirstAdd, optVisualAfterRecordKey, bUseVisualAfterRecordKey), changeKey);
        };
        function InsertRecordAfterCore(update, changeKey) {
            var cmd;

            if (update.bIsInView && hierarchyMode == SP.JsGrid.HierarchyMode.Grouping && hierarchyMgr.GetUnfilteredHierarchyMgr() != null) {
                alert(fnGetLocStr('NoInsertWhenGrouped'));
                return null;
            }
            if (changeKey == null) {
                cmd = _this.CreateDataUpdateCmd();
                changeKey = cmd.GetChangeKey();
            }
            versionMgr.AddRowInsertChange(update, changeKey);
            if (cmd != null) {
                objBag.commandMgr.Execute(cmd, SP.JsGrid.UserAction.InsertRecord, SP.JsGrid.CommandManager.CommandType.Explicit);
            }
            return changeKey;
        }
        this.InsertRecordBefore = function(beforeRecordKey, newRecord, changeKey, bUpdateFocusPos) {
            var afterRecordKey;
            var visualAfterKey;

            if (beforeRecordKey == null) {
                afterRecordKey = posConverter.RecordIdxToRecordKey(objBag.tableCache.GetRecordCount() - 1);
            }
            else {
                var beforeRecordIdx = posConverter.RecordKeyToRecordIdx(beforeRecordKey);

                visualAfterKey = beforeRecordIdx == 0 ? null : posConverter.RecordIdxToRecordKey(beforeRecordIdx - 1);
                if (hierarchyMgr != null && !hierarchyMgr.IsGrouped()) {
                    afterRecordKey = hierarchyMgr.GetAfterKeyFromBeforeKey(beforeRecordKey);
                }
                else {
                    afterRecordKey = visualAfterKey;
                }
                Sys.Debug.assert(afterRecordKey != null, "Cannot determine afterRecordKey from beforeRecordKey");
            }
            return this.InsertRecordAfter(afterRecordKey, newRecord, changeKey, bUpdateFocusPos, false, visualAfterKey, afterRecordKey != visualAfterKey);
        };
        this.DeleteRecords = function(recordKeys, changeKey) {
            var cmd;

            if (SP.Internal.JS.FindInArray(recordKeys, function(item) {
                return objBag.entryRecordMgr.IsEntryRecordKey(item);
            }) != null) {
                alert(fnGetLocStr('OpNotSupportedOnEntryRow'));
                return null;
            }
            if (IsGrouped()) {
                var unfilteredHierarchyMgr = hierarchyMgr.GetUnfilteredHierarchyMgr();

                for (var i = 0; i < recordKeys.length; i++) {
                    if (hierarchyMgr.IsGroupingRecord(recordKeys[i])) {
                        alert(fnGetLocStr('NoDeletingGroupingRow'));
                        return null;
                    }
                    if (unfilteredHierarchyMgr != null && unfilteredHierarchyMgr.IsKeyPresent(recordKeys[i])) {
                        alert(fnGetLocStr('NoDeletingGroupedHierarchicalRows'));
                        return null;
                    }
                }
            }
            if (changeKey == null) {
                cmd = this.CreateDataUpdateCmd();
                changeKey = cmd.GetChangeKey();
            }
            for (var i = 0; i < recordKeys.length; i++) {
                versionMgr.AddRowDeleteChange(GenerateRowUpdateForDelete(recordKeys[i]), changeKey);
            }
            if (cmd != null) {
                objBag.commandMgr.Execute(cmd, SP.JsGrid.UserAction.DeleteRecord, SP.JsGrid.CommandManager.CommandType.Explicit);
            }
            return changeKey;
        };
        this.ExpandNode = function(recordKey) {
            if (hierarchyDelayLoadKeySet.Contains(recordKey)) {
                objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.ExpandDelayLoadedHierarchyNode, recordKey);
            }
            else {
                var recordIdx = posConverter.RecordKeyToRecordIdx(recordKey);

                objBag.commandMgr.Execute(CreateHierarchyCommand('expand', recordIdx), "Expand Node", SP.JsGrid.CommandManager.CommandType.Implicit);
            }
        };
        this.CollapseNode = function(recordKey) {
            var recordIdx = posConverter.RecordKeyToRecordIdx(recordKey);

            objBag.commandMgr.Execute(CreateHierarchyCommand('collapse', recordIdx), "Collapse Node", SP.JsGrid.CommandManager.CommandType.Implicit);
        };
        this.GetNodeExpandCollapseState = function(recordKey) {
            if (hierarchyMgr != null) {
                return hierarchyMgr.GetNodeType(recordKey);
            }
            return SP.JsGrid.NodeType.Leaf;
        };
        this.ToggleExpandCollapse = function(recordKey) {
            Sys.Debug.assert(hierarchyMgr != null, "Only call this method when there is a hierarchy manager.");
            if (hierarchyMgr != null) {
                var nodeType = hierarchyMgr.GetNodeType(recordKey);

                if (nodeType === SP.JsGrid.Internal.HierarchyManager.NodeType.Expanded) {
                    this.CollapseNode(recordKey);
                }
                else if (nodeType === SP.JsGrid.Internal.HierarchyManager.NodeType.Collapsed) {
                    this.ExpandNode(recordKey);
                }
                else {
                    Sys.Debug.fail("Don't call this method on leaf nodes");
                }
            }
        };
        this.AdjustRecordsIndentLevel = function(recordKeys, levelDelta, changeKey) {
            if (hierarchyMode == SP.JsGrid.HierarchyMode.Grouping) {
                alert(fnGetLocStr('NoIndentOutdentWhenGrouped'));
                return null;
            }
            Sys.Debug.assert(changeKey == null, 'changeKey not supported');
            Sys.Debug.assert(levelDelta == 1 || levelDelta == -1);
            if (SP.Internal.JS.FindInArray(recordKeys, function(item) {
                return objBag.entryRecordMgr.IsEntryRecordKey(item);
            }) != null) {
                alert(fnGetLocStr('OpNotSupportedOnEntryRow'));
                return null;
            }
            var minimizeInfo = hierarchyMgr.ValidateAndMinimizeKeyList(recordKeys);

            if (minimizeInfo.bLevelZeroFound) {
                alert(fnGetLocStr('OutlineLevelChangeNotSupportedOnTopLevel'));
                return null;
            }
            recordKeys = minimizeInfo.minimizedKeys;
            for (var i = 0; i < recordKeys.length; i++) {
                if (levelDelta == -1 && !hierarchyMgr.CanOutdent(recordKeys[i])) {
                    alert(fnGetLocStr('CannotOutdentFurther'));
                    return null;
                }
                if (levelDelta == 1 && !hierarchyMgr.CanIndent(recordKeys[i])) {
                    return null;
                }
                Sys.Debug.assert(posConverter.RecordKeyToViewIdx(recordKeys[i]) != null);
            }
            objBag.commandMgr.OpenGroup();
            var cmd = this.CreateDataUpdateCmd();

            changeKey = cmd.GetChangeKey();
            var unfilteredHierarchyMgr = hierarchyMgr != null && hierarchyMgr.GetUnfilteredHierarchyMgr();

            Sys.Debug.assert(unfilteredHierarchyMgr != null, 'indent is only valid when there is an unfiltered hierarchy manager');
            if (unfilteredHierarchyMgr != null && recordKeys.length > 1) {
                recordKeys = unfilteredHierarchyMgr.GetKeysInOrder(recordKeys);
            }
            for (var i = 0; i < recordKeys.length; i++) {
                var adoptedChildrenKeys = levelDelta == 1 ? hierarchyMgr.EnsureIndentPreconditionsMet(recordKeys[i]) : hierarchyMgr.EnsureOutdentPreconditionsMet(recordKeys[i]);

                versionMgr.AddIndentLevelChange(recordKeys[i], levelDelta, adoptedChildrenKeys, changeKey);
            }
            objBag.commandMgr.Execute(cmd, null, SP.JsGrid.CommandManager.CommandType.Explicit);
            objBag.commandMgr.CloseGroup(levelDelta == 1 ? SP.JsGrid.UserAction.Indent : SP.JsGrid.UserAction.Outdent, SP.JsGrid.CommandManager.CommandType.Explicit, true);
            return changeKey;
        };
        this.ReorderRecords = function(beginRecordKey, endRecordKey, beforeRecordKey, bSelectAfterwards) {
            var tableCache = objBag.tableCache;
            var beginIdx = tableCache.KeyToRecordIdx(beginRecordKey);
            var endIdx = tableCache.KeyToRecordIdx(endRecordKey);

            if (beginIdx > endIdx) {
                Sys.Debug.assert(false);
                return;
            }
            var rangeInfo = ValidateAndExpandReorderRecords(beginIdx, endIdx);

            if (rangeInfo == null) {
                Sys.Debug.assert(false);
                return;
            }
            var newPos = beforeRecordKey == null ? null : tableCache.KeyToRecordIdx(beforeRecordKey);

            hierarchyMgr.NotifyRecordsReordered(rangeInfo.beginIdx, rangeInfo.endIdx, newPos, rangeInfo.recordKeys, beforeRecordKey);
            tableCache.BulkMoveRecords(rangeInfo.beginIdx, rangeInfo.endIdx, newPos);
            objBag.paneMgr.RefreshAllRows();
            if (bSelectAfterwards) {
                objBag.jsGridObj.SelectRowRangeByKey(beginRecordKey, endRecordKey);
            }
            var changeKey = versionMgr.GetNextVersionKey();

            objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRecordsReordered, new SP.JsGrid.EventArgs.OnRecordsReordered(rangeInfo.recordKeys, changeKey));
            return changeKey;
            function ValidateAndExpandReorderRecords(beginIdx, endIdx) {
                var recordKeys = [];

                for (var i = beginIdx; i <= endIdx; i++) {
                    var recordKey = tableCache.RecordIdxToKey(i);

                    Sys.Debug.assert(recordKey != null);
                    recordKeys.push(recordKey);
                }
                var expandInfo = hierarchyMgr.ValidateAndExpandKeyList(recordKeys);

                if (expandInfo.bGroupingRowFound || expandInfo.bLevelZeroFound) {
                    return null;
                }
                for (var i = 0; i < expandInfo.expandedKeys.length; i++) {
                    endIdx = Math.max(endIdx, tableCache.KeyToRecordIdx(expandInfo.expandedKeys[i]));
                }
                return {
                    beginIdx: beginIdx,
                    endIdx: endIdx,
                    recordKeys: expandInfo.expandedKeys
                };
            }
        };
        this.EnableEditing = function() {
            if (!bEditingEnabled) {
                bEditingEnabled = true;
                objBag.entryRecordMgr.EnsureLastEntryRowExists();
                objBag.paneMgr.NotifyNewRowStateChanged();
                objBag.paneMgr.NotifyCanEditUpdated();
                objBag.ariaMgr.EnableGridEditing(true);
            }
        };
        this.DisableEditing = function() {
            if (bEditingEnabled) {
                objBag.paneMgr.StopEditing(true);
                objBag.paneMgr.UnbindEditing(function() {
                    objBag.entryRecordMgr.ClearUncommittedEntryRecords();
                    objBag.paneMgr.NotifyNewRowStateChanged();
                    objBag.paneMgr.NotifyCanEditUpdated();
                    objBag.ariaMgr.EnableGridEditing(false);
                    bEditingEnabled = false;
                });
            }
        };
        this.TryBeginEdit = function() {
            var focusedPane = objBag.selectionMgr.GetFocusedPane();

            if (focusedPane == null) {
                return false;
            }
            return focusedPane.TryBeginEdit({
                type: "gridapi"
            });
        };
        this.FinalizeEditing = function(fnContinue, fnError) {
            Sys.Debug.assert(fnContinue != null && fnError != null);
            if (bEditingEnabled) {
                objBag.paneMgr.StopEditing(false);
                pendingChangeMgr.WaitForPendingUpdates(function() {
                    if (objBag.errorMgr.AnyErrors()) {
                        fnError();
                        return;
                    }
                    objBag.entryRecordMgr.TryCommitFirstEntryRecords(function() {
                        if (objBag.entryRecordMgr.AnyUncomittedEntryRecords()) {
                            fnError();
                            return;
                        }
                        pendingChangeMgr.WaitForAllChangeKeysToComplete(fnContinue);
                    }, false);
                });
            }
            else {
                fnContinue();
            }
        };
        this.NotifyHide = function() {
            this.FinalizeEditing(function() {
            }, function() {
            });
        };
        this.MarkPropUpdateInvalid = function(recordKey, fieldKey, changeKey, optErrorMsg) {
            return versionMgr.MarkPropUpdateInvalid(recordKey, fieldKey, changeKey, optErrorMsg);
        };
        this.GetCurrentChangeKey = function() {
            return versionMgr.GetCurrentChangeKey();
        };
        this.IsChangeKeyApplied = function(changeKey) {
            return versionMgr.IsChangeKeyApplied(changeKey);
        };
        this.GetChangeKeyForVersion = function(version) {
            return versionMgr.GetChangeKeyForVersion(version);
        };
        this.GetCheckSelectionManager = function() {
            return checkSelMgr != null ? checkSelMgr.ExternalAPI : null;
        };
        function IsGrouped() {
            return hierarchyMgr != null && hierarchyMgr.IsGrouped();
        }
        function EditUtility() {
            this.ValidateAndExpandKeyList = function(recKeys) {
                return hierarchyMgr && hierarchyMgr.GetUnfilteredHierarchyMgr() && hierarchyMgr.ValidateAndExpandKeyList(recKeys);
            };
            this.IsEditingEnabled = function() {
                return bEditingEnabled;
            };
            this.IsNewRowEnabled = function() {
                return bNewRowEnabled && bEditingEnabled && !IsGrouped();
            };
            this.GetFieldValueForCopy = function(record, fieldKey) {
                var localizedValue = record.HasLocalizedValue(fieldKey) ? record.GetLocalizedValue(fieldKey) : null;
                var propType;

                if (fieldKey != SP.JsGrid.RecordIndicatorCheckboxColumnKey) {
                    var prop = record.GetProp(fieldKey);

                    propType = prop && prop.propType;
                }
                else {
                    propType = SP.JsGrid.Internal.Property.GetPropType('RecordIndicatorCheckBoxBoolean');
                }
                if (propType != null && (propType.GetDisplayValue != null || propType.GetCopyValue != null)) {
                    var dataValue = record.HasDataValue(fieldKey) ? record.GetDataValue(fieldKey) : null;

                    if (propType.GetDisplayValue != null) {
                        localizedValue = propType.GetDisplayValue(record, dataValue, localizedValue);
                    }
                    else if (propType.GetCopyValue != null) {
                        localizedValue = propType.GetCopyValue(record, dataValue, localizedValue);
                    }
                }
                return localizedValue != null ? localizedValue : '';
            };
            this.CanBindToField = function(record, optColumn, optFieldKey) {
                return this.CanEditField(record, optColumn, optFieldKey) && !(optFieldKey != null && optFieldKey == SP.JsGrid.RecordIndicatorCheckboxColumnKey);
            };
            this.CanEditField = function(record, optColumn, optFieldKey) {
                if (!bEditingEnabled || record == null) {
                    return false;
                }
                if (!record.bIsNewRow && operationalUtil.GetValue(record, SP.JsGrid.OperationalConstants.GroupingOutlineLevel) != null) {
                    return false;
                }
                if (optFieldKey != null && optFieldKey == SP.JsGrid.RecordIndicatorCheckboxColumnKey) {
                    return true;
                }
                var cellEditMode = optColumn != null && optColumn.fnGetCellEditMode != null ? optColumn.fnGetCellEditMode(record, optFieldKey) : null;

                cellEditMode = cellEditMode == null ? SP.JsGrid.EditMode.Defer : cellEditMode;
                var recEditMode = record.bIsNewRow ? SP.JsGrid.EditMode.ReadWriteDefer : objBag.delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.GetRecordEditMode) ? objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.GetRecordEditMode, record) : null;

                recEditMode = recEditMode == null ? operationalUtil.GetValue(record, SP.JsGrid.OperationalConstants.RecordEditMode) : recEditMode;
                recEditMode = recEditMode == null ? SP.JsGrid.EditMode.Defer : recEditMode;
                var fieldEditMode = null;

                if (optFieldKey != null) {
                    fieldEditMode = objBag.delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.GetFieldEditMode) ? objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.GetFieldEditMode, optFieldKey) : fieldEditMode;
                    fieldEditMode = fieldEditMode == null ? gridFieldMap[optFieldKey].GetEditMode() : fieldEditMode;
                }
                if (fieldEditMode == null) {
                    fieldEditMode = SP.JsGrid.EditMode.Defer;
                }
                var editMode = Math.min(Math.min(Math.min(recEditMode, fieldEditMode), cellEditMode), defaultEditMode);

                return editMode == SP.JsGrid.EditMode.ReadWrite || editMode == SP.JsGrid.EditMode.ReadWriteDefer || editMode == SP.JsGrid.EditMode.Defer;
            };
        }
        function InitDiffTracker() {
            var r = new SP.JsGrid.Internal.DiffTracker(objBag, function(changeKey, optRecords, bGetPreviousChange) {
                return versionMgr.GetChange(changeKey, optRecords, bGetPreviousChange);
            });

            versionMgr.OnSynchronizeChange = function(changeKey) {
                return r.NotifySynchronizeToChange(changeKey);
            };
            versionMgr.OnRollbackChange = function(changeKey) {
                return r.NotifyRollbackChange(changeKey);
            };
            versionMgr.OnVacateChange = function(changeKey) {
                return r.NotifyVacateChange(changeKey);
            };
            return r;
        }
        function EnableHierarchy(optGroupingLevel, optGroupingPrefix, optUnfilteredHierarchyMgr, optHierarchyDelayLoadKeys, optHierarchyState, optFilteredDescCounts) {
            DisableHierarchy();
            hierarchyDelayLoadKeySet = new SP.Utilities.Set();
            if (optHierarchyDelayLoadKeys != null) {
                hierarchyDelayLoadKeySet.AddArray(optHierarchyDelayLoadKeys);
            }
            hierarchyMgr = new SP.JsGrid.Internal.HierarchyManager(objBag, posConverter, operationalUtil, optGroupingLevel, optGroupingPrefix, optUnfilteredHierarchyMgr, function(recordKey) {
                _this.ExpandNode(recordKey);
            }, function(recordKey) {
                return objBag.entryRecordMgr.IsEntryRecordKey(recordKey);
            }, hierarchyDelayLoadKeySet, optFilteredDescCounts);
            if (optHierarchyState != null) {
                hierarchyMgr.SetState(optHierarchyState, optUnfilteredHierarchyMgr);
            }
            var column = columns.GetColumnByKey(operationalUtil.GetFieldKey(SP.JsGrid.OperationalConstants.HierarchyMain));

            origFnGetDisplayControlName = column.fnGetDisplayControlName;
            if (objBag.gridControls[SP.JsGrid.HierarchyControlId] == null) {
                objBag.gridControls[SP.JsGrid.HierarchyControlId] = new SP.JsGrid.DisplayControl.HierarchyDisplayControl(objBag.gridId, posConverter, function(record) {
                    return hierarchyMgr.GetNodeInfo(record);
                }, eventSinks.OnNodeExpanded, eventSinks.OnNodeCollapsed, function(column, record, fieldKey, style, optControlName) {
                    return (objBag.paneMgr.GetGridPane()).GetContentForCell(column, record, fieldKey, style, optControlName);
                }, function(record, fieldKey) {
                    return origFnGetDisplayControlName && origFnGetDisplayControlName(record, fieldKey);
                });
                SP.JsGrid.PropertyType.Utils.RegisterDisplayControl(objBag.gridControls[SP.JsGrid.HierarchyControlId].Id, objBag.gridControls[SP.JsGrid.HierarchyControlId], []);
            }
            column.fnGetDisplayControlName = function(record, fieldKey) {
                return objBag.gridControls[SP.JsGrid.HierarchyControlId].Id;
            };
            posConverter.SetHierarchyMgrObj(hierarchyMgr);
        }
        function DisableHierarchy() {
            if (hierarchyMgr != null) {
                (columns.GetColumnByKey(operationalUtil.GetFieldKey(SP.JsGrid.OperationalConstants.HierarchyMain))).fnGetDisplayControlName = origFnGetDisplayControlName;
                posConverter.SetHierarchyMgrObj(null);
                hierarchyMgr = null;
            }
        }
        function OnCellFocusedChanged(focusedCellChangedArgs) {
            var oldRK = focusedCellChangedArgs.oldRecordKey;

            if (focusedCellChangedArgs.newRecordKey != oldRK) {
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRowFocusChanged, new SP.JsGrid.EventArgs.RowFocusChanged(focusedCellChangedArgs.newRecordKey, focusedCellChangedArgs.oldRecordKey));
            }
            objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnCellFocusChanged, focusedCellChangedArgs);
        }
        this.AttachUndoActionToChangeKey = function(changeKey, fnUndo) {
            var versionNumber = changeKey.GetVersionNumber();

            if (actionsAssociatedWithUndo[versionNumber] == null) {
                actionsAssociatedWithUndo[versionNumber] = [];
            }
            actionsAssociatedWithUndo[versionNumber].push(fnUndo);
        };
        this.CreateDataUpdateCmd = function(bUseCustomInitialUpdate) {
            var bApplied = false;
            var changeKey = versionMgr.GetNextVersionKey();

            objBag.intEventMgr.FireEvent(SP.JsGrid.Internal.EventType.OnChangeKeyCreated, new SP.JsGrid.Internal.EventArgs.ChangeKeyStageUpdated(changeKey));
            changeKey.Reserve();
            return {
                Apply: function() {
                    if (bApplied) {
                        objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnBeginRedoDataUpdateChange, new SP.JsGrid.EventArgs.OnBeginRedoDataUpdateChange(changeKey));
                    }
                    objBag.paneMgr.ClearAllChangeIndications();
                    versionMgr.ApplyChangeKey(changeKey);
                    if (!bApplied && !bUseCustomInitialUpdate) {
                        objBag.intEventMgr.FireEvent(SP.JsGrid.Internal.EventType.OnChangeKeyInitialUpdateFinished, new SP.JsGrid.Internal.EventArgs.ChangeKeyStageUpdated(changeKey));
                    }
                    bApplied = true;
                },
                Undo: function() {
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnBeginUndoDataUpdateChange, new SP.JsGrid.EventArgs.OnBeginUndoDataUpdateChange(changeKey));
                    objBag.paneMgr.ClearAllChangeIndications();
                    versionMgr.UndoChangeKey(changeKey);
                    var associatedUndos = actionsAssociatedWithUndo[changeKey.GetVersionNumber()];

                    if (associatedUndos != null) {
                        for (var i = associatedUndos.length - 1; i >= 0; i--) {
                            associatedUndos[i]();
                        }
                    }
                    actionsAssociatedWithUndo[changeKey.GetVersionNumber()] = null;
                },
                Dispose: function(state) {
                    if (state == SP.JsGrid.CommandManager.DisposeState.Unapplied) {
                        versionMgr.VacateChange(changeKey);
                    }
                    changeKey.Release();
                },
                GetChangeKey: function() {
                    return changeKey;
                },
                NotifyInitialUpdateComplete: function() {
                    Sys.Debug.assert(bUseCustomInitialUpdate);
                    objBag.intEventMgr.FireEvent(SP.JsGrid.Internal.EventType.OnChangeKeyInitialUpdateFinished, new SP.JsGrid.Internal.EventArgs.ChangeKeyStageUpdated(changeKey));
                }
            };
        };
        function CreateHierarchyCommand(action, recordIdx) {
            function Collapse() {
                var recordKey = posConverter.RecordIdxToRecordKey(recordIdx);
                var rowDelta = hierarchyMgr.NotifyCollapse(recordIdx, recordKey);
                var viewIdx = posConverter.RecordIdxToViewIdx(recordIdx);

                objBag.paneMgr.NotifyChangedRows(viewIdx, 1);
                objBag.paneMgr.NotifyDeleteRows(viewIdx + 1, rowDelta);
                objBag.paneMgr.ScrollCellIntoView(viewIdx, null);
                objBag.cutcopypasteMgr.CancelMode();
            }
            function Expand() {
                var recordKey = posConverter.RecordIdxToRecordKey(recordIdx);
                var rowDelta = hierarchyMgr.NotifyExpand(recordIdx, recordKey);
                var viewIdx = posConverter.RecordIdxToViewIdx(recordIdx);

                objBag.paneMgr.NotifyChangedRows(viewIdx, 1);
                objBag.paneMgr.NotifyInsertRows(viewIdx + 1, rowDelta, true);
                objBag.paneMgr.ScrollCellIntoView(viewIdx, null);
                objBag.cutcopypasteMgr.CancelMode();
            }
            return action == 'collapse' ? {
                Apply: Collapse,
                Undo: Expand
            } : {
                Apply: Expand,
                Undo: Collapse
            };
        }
        function DoPhysicalPropChange(recordKey, fieldKey, propUpdate, changeKey, validationState, bDataOnly, optRecord, optErrorMsg, optOldValue) {
            objBag.cutcopypasteMgr.CancelMode();
            var oldProp = null;
            var record = optRecord != null ? optRecord : objBag.entryRecordMgr.IsEntryRecordKey(recordKey) ? objBag.entryRecordMgr.GetEntryRecord(recordKey) : objBag.tableCache.GetCachedRecord(recordKey);

            if (propUpdate == null) {
                propUpdate = new SP.JsGrid.Internal.PropertyUpdate(null, '');
            }
            var recValue = new SP.JsGrid.Internal.PropertyUpdate(SP.JsGrid.EmptyValue, SP.JsGrid.EmptyValue);

            if (record != null) {
                var bUpdated = true;

                oldProp = record.GetProp(fieldKey);
                if (oldProp != null) {
                    recValue.localized = oldProp.HasLocalizedValue() ? oldProp.GetLocalized() : SP.JsGrid.EmptyValue;
                    recValue.data = oldProp.HasDataValue() ? oldProp.GetData() : SP.JsGrid.EmptyValue;
                    if (recValue.data != propUpdate.data || recValue.localized != propUpdate.localized) {
                        oldProp.Update(propUpdate.data, propUpdate.localized);
                    }
                    else {
                        bUpdated = false;
                    }
                }
                if (bUpdated) {
                    if (!bDataOnly) {
                        objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnBeforePropertyChanged, new SP.JsGrid.EventArgs.PropertyChanged(recordKey, fieldKey, optOldValue == null ? recValue : optOldValue, propUpdate, oldProp && oldProp.propType, changeKey, validationState));
                    }
                    objBag.paneMgr.NotifyUpdateProperty(recordKey, fieldKey, true, propUpdate, validationState, changeKey);
                }
            }
            objBag.errorMgr.ClearAllErrorsOnCell(recordKey, fieldKey);
            var cellKey = SP.JsGrid.Internal.MakeCellKey(recordKey, fieldKey);

            if (validationState == SP.JsGrid.ValidationState.Invalid) {
                var errorMsg = optErrorMsg != null ? optErrorMsg : propUpdate.localized != SP.JsGrid.EmptyValue ? String.format(fnGetLocStr('LocalizedConversionError'), propUpdate.localized) : fnGetLocStr('GeneralConversionError');

                objBag.errorMgr.SetCellError(recordKey, fieldKey, errorMsg);
            }
            if (!bDataOnly) {
                Sys.Debug.assert(validationState != null);
                if (!objBag.entryRecordMgr.IsEntryRecordKey(recordKey)) {
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnPropertyChanged, new SP.JsGrid.EventArgs.PropertyChanged(recordKey, fieldKey, optOldValue == null ? recValue : optOldValue, propUpdate, oldProp && oldProp.propType, changeKey, validationState));
                }
                else {
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnEntryRecordPropertyChanged, new SP.JsGrid.EventArgs.PropertyChanged(recordKey, fieldKey, optOldValue == null ? recValue : optOldValue, propUpdate, oldProp && oldProp.propType, changeKey, validationState));
                }
            }
        }
        function DoPhysicalLevelChange(recordKey, levelDelta, optAdoptedChildrenKeys, changeKey) {
            objBag.cutcopypasteMgr.CancelMode();
            Sys.Debug.assert(hierarchyMgr != null);
            var visibleUpdates = levelDelta == 1 ? hierarchyMgr.NotifyIndent(recordKey, optAdoptedChildrenKeys && optAdoptedChildrenKeys[0]) : hierarchyMgr.NotifyOutdent(recordKey);

            for (var i = 0; i < visibleUpdates.length; i++) {
                var vu = visibleUpdates[i];

                objBag.paneMgr.NotifyChangedRows(posConverter.RecordKeyToViewIdx(vu.startingRecordKey), vu.count);
            }
        }
        function GetInsertIdxForRowUpdate(rowUpdate, pendingRowUpdates, fnIsRecordAlreadyInserted) {
            var bUseVisualAfterRecordKey = false;
            var curVisualAfterRecordKey = null;

            if ('visualAfterRecordKey' in rowUpdate) {
                bUseVisualAfterRecordKey = true;
                curVisualAfterRecordKey = rowUpdate.visualAfterRecordKey;
                while (curVisualAfterRecordKey != null && pendingRowUpdates != null && pendingRowUpdates[curVisualAfterRecordKey] != null) {
                    curVisualAfterRecordKey = pendingRowUpdates[curVisualAfterRecordKey].visualAfterRecordKey;
                    if (fnIsRecordAlreadyInserted(curVisualAfterRecordKey)) {
                        curVisualAfterRecordKey = null;
                    }
                }
            }
            return GetRecordIdxForInsert(rowUpdate.afterRecordKey, curVisualAfterRecordKey, bUseVisualAfterRecordKey);
        }
        function DoPhysicalRowInsert(rowUpdate, changeKey, fnIsRecordAlreadyInserted, pendingRowUpdates) {
            objBag.cutcopypasteMgr.CancelMode();
            if (fnIsRecordAlreadyInserted(rowUpdate.recordKey)) {
                return null;
            }
            var idx = null;

            objBag.intEventMgr.FireEvent(SP.JsGrid.Internal.EventType.OnBeforeRecordInserted, new SP.JsGrid.Internal.EventArgs.RecordInserted(rowUpdate.recordKey));
            if (rowUpdate.bIsInView) {
                var idx = GetInsertIdxForRowUpdate(rowUpdate, pendingRowUpdates, fnIsRecordAlreadyInserted);
                var parentKeyToRedraw;

                if (hierarchyMgr != null) {
                    parentKeyToRedraw = hierarchyMgr.NotifyInsertRowAfter(rowUpdate.afterRecordKey, idx, rowUpdate.recordKey, rowUpdate.newOutlineLevel);
                }
                objBag.tableCache.InsertRecord(idx, rowUpdate.recordKey);
                if (!rowUpdate.bDoNotUpdatePaneOnFirstInsert) {
                    objBag.paneMgr.NotifyInsertRows(posConverter.RecordIdxToViewIdx(idx), 1, rowUpdate.bUpdateFocusPos, TryRedraw);
                }
                else {
                    delete rowUpdate.bDoNotUpdatePaneOnFirstInsert;
                    TryRedraw();
                }
            }
            objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRecordInserted, new SP.JsGrid.EventArgs.RecordInserted(rowUpdate.recordKey, idx, rowUpdate.afterRecordKey, changeKey));
            return rowUpdate;
            function TryRedraw() {
                if (parentKeyToRedraw != null) {
                    var idx = posConverter.RecordKeyToViewIdx(parentKeyToRedraw);

                    if (idx != null) {
                        objBag.paneMgr.NotifyChangedRows(idx, 1);
                    }
                }
            }
        }
        function DoPhysicalRowDelete(rowUpdate, changeKey, fnIsRecordAlreadyDeleted) {
            objBag.cutcopypasteMgr.CancelMode();
            var r = [];
            var recordKeys = [rowUpdate.recordKey];

            if (fnIsRecordAlreadyDeleted(rowUpdate.recordKey)) {
                return null;
            }
            if (hierarchyMgr != null && hierarchyMgr.GetUnfilteredHierarchyMgr() != null && rowUpdate.bIsInView) {
                var expandInfo = hierarchyMgr.ValidateAndExpandKeyList(recordKeys);

                if (expandInfo.bGroupingRowFound) {
                    alert(fnGetLocStr('NoDeletingGroupingRow'));
                    return null;
                }
                if (expandInfo.bLevelZeroFound) {
                    alert(fnGetLocStr('DeleteNotSupportedOnTopLevel'));
                    return null;
                }
                if (!expandInfo.bAllChildKeysInView) {
                    alert(fnGetLocStr('NoDeletingParentWithMissingChildren'));
                    return null;
                }
                recordKeys = expandInfo.expandedKeys;
                recordKeys.sort(function(l, r) {
                    return posConverter.RecordKeyToRecordIdx(r) - posConverter.RecordKeyToRecordIdx(l);
                });
            }
            for (var i = 0; i < recordKeys.length; i++) {
                var recordKey = recordKeys[i];
                var curRowUpdate = recordKey == rowUpdate.recordKey ? rowUpdate : GenerateRowUpdateForDelete(recordKey);
                var parentViewIdx;
                var recordIdx = null;

                objBag.intEventMgr.FireEvent(SP.JsGrid.Internal.EventType.OnBeforeRecordDeleted, new SP.JsGrid.Internal.EventArgs.RecordDeleted(recordKey));
                if (curRowUpdate.bIsInView) {
                    recordIdx = posConverter.RecordKeyToRecordIdx(recordKey);
                    var viewIdx = posConverter.RecordIdxToViewIdx(recordIdx);

                    if (hierarchyMgr != null) {
                        var parentKeyToRedraw = hierarchyMgr.GetParentKey(recordKey);

                        parentViewIdx = parentKeyToRedraw && posConverter.RecordKeyToViewIdx(parentKeyToRedraw);
                        hierarchyMgr.NotifyDeleteRow(recordKey, recordIdx);
                    }
                    if (objBag.tableCache.IsKeyInView(recordKey)) {
                        objBag.tableCache.DeleteRecord(recordIdx);
                    }
                    if (viewIdx != null) {
                        objBag.paneMgr.NotifyDeleteRows(viewIdx, 1);
                    }
                    if (parentViewIdx != null) {
                        objBag.paneMgr.NotifyChangedRows(parentViewIdx, 1);
                    }
                }
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRecordDeleted, new SP.JsGrid.EventArgs.RecordDeleted(recordKey, recordIdx, changeKey));
                r.push(curRowUpdate);
            }
            return r;
        }
        function GenerateRowUpdateForDelete(recordKey) {
            var bRecordKeyInView = objBag.tableCache.IsKeyInView(recordKey);
            var recordIdx = bRecordKeyInView ? posConverter.RecordKeyToRecordIdx(recordKey) : null;
            var afterRecordKey = null, outlineLevel = 0, visualAfterRecordKey, buseVisualAfterRecordKey;

            if (bRecordKeyInView) {
                afterRecordKey = recordIdx == 0 ? null : posConverter.RecordIdxToRecordKey(recordIdx - 1);
                if (hierarchyMgr != null && hierarchyMgr.GetUnfilteredHierarchyMgr() != null) {
                    var res = hierarchyMgr.GetInsertAfterInfoForDelete(recordKey);

                    buseVisualAfterRecordKey = true;
                    visualAfterRecordKey = afterRecordKey;
                    afterRecordKey = res.insertAfterKey;
                    outlineLevel = res.outlineLevel;
                }
            }
            var r = new SP.JsGrid.Internal.RowUpdate(recordKey, afterRecordKey, outlineLevel, bRecordKeyInView, true, false, visualAfterRecordKey, buseVisualAfterRecordKey);

            return r;
        }
        function GenerateRowUpdateForInsert(recordKey, bRecordKeyInView, afterRecordKey, bUpdateFocusPos, bDoNotUpdatePaneOnFirstInsert, optVisualAfterRecordKey, optbUseAfterRecordKey) {
            var outlineLevel = 0;

            if (bRecordKeyInView && hierarchyMgr != null && !hierarchyMgr.IsGrouped()) {
                outlineLevel = hierarchyMgr.GetInsertAfterInfoForInsert(afterRecordKey, posConverter.RecordIdxToRecordKey(GetRecordIdxForInsert(afterRecordKey, optVisualAfterRecordKey, optbUseAfterRecordKey)));
            }
            return new SP.JsGrid.Internal.RowUpdate(recordKey, afterRecordKey, outlineLevel, bRecordKeyInView, bUpdateFocusPos, bDoNotUpdatePaneOnFirstInsert, optVisualAfterRecordKey, optbUseAfterRecordKey);
        }
        function GetRecord(recordKey) {
            return objBag.tableCache.GetCachedRecord(recordKey);
        }
        function GetRecordIdxForInsert(afterRecordKey, optVisualAfterRecordKey, bUseVisualAfterRecordKey) {
            var afRecKeyToUse = !bUseVisualAfterRecordKey ? afterRecordKey : optVisualAfterRecordKey;
            var afRecIdx = afRecKeyToUse == null ? null : posConverter.RecordKeyToRecordIdx(afRecKeyToUse);

            if (bUseVisualAfterRecordKey && afRecKeyToUse != null && afRecIdx == null) {
                afRecIdx = afterRecordKey == null ? null : posConverter.RecordKeyToRecordIdx(afterRecordKey);
            }
            var r = afRecIdx == null ? 0 : afRecIdx + 1;

            if (IsGrouped()) {
                r = hierarchyMgr.GetNextNonGroupingIdx(r);
            }
            return r;
        }
    };
    SP.JsGrid.Internal.RowUpdate = function(recordKey, afterRecordKey, newOutlineLevel, bIsInView, bUpdateFocusPos, bDoNotUpdatePaneOnFirstInsert, optVisualAfterRecordKey, optbUseAfterRecordKey) {
        this.recordKey = recordKey;
        this.afterRecordKey = afterRecordKey;
        this.newOutlineLevel = newOutlineLevel;
        if (bIsInView) {
            this.bIsInView = bIsInView;
        }
        if (bUpdateFocusPos) {
            this.bUpdateFocusPos = bUpdateFocusPos;
        }
        if (bDoNotUpdatePaneOnFirstInsert) {
            this.bDoNotUpdatePaneOnFirstInsert = bDoNotUpdatePaneOnFirstInsert;
        }
        if (optbUseAfterRecordKey) {
            this.visualAfterRecordKey = optVisualAfterRecordKey;
        }
    };
    SP.JsGrid.Internal.CheckSelectionManager = function(objBag) {
        objBag.checkSelMgr = this;
        var _checkedRecordKeys = new SP.Utilities.Set();
        var _checkedRecordCount;
        var _checkboxDisabledRecordKeys = new SP.Utilities.Set();
        var _checkboxHiddenRecordKeys = new SP.Utilities.Set();
        var _this = this;

        function Init() {
            _checkedRecordCount = 0;
            var control = objBag.gridControls[SP.JsGrid.RecordIndicatorControlId] = new SP.JsGrid.DisplayControl.RecordIndicatorCheckboxControl(objBag.gridId, OnCheckboxClicked, IsRecordIndicatorCheckboxHidden, IsRecordIndicatorCheckboxDisabled, _this.IsRecordIndicatorCheckboxChecked);

            SP.JsGrid.PropertyType.Utils.RegisterDisplayControl(control.Id, control, []);
        }
        function IsRecordIndicatorCheckboxHidden(recordKey) {
            if (_checkboxHiddenRecordKeys.Contains(recordKey)) {
                return true;
            }
            var hierarchyMgr = objBag.controller.GetHierarchyManager();

            return hierarchyMgr != null && hierarchyMgr.IsGroupingRecord(recordKey);
        }
        function IsRecordIndicatorCheckboxDisabled(recordKey) {
            return _checkboxDisabledRecordKeys.Contains(recordKey);
        }
        function CheckRecord(recordKey) {
            if (!_checkedRecordKeys.Contains(recordKey)) {
                ChangeSingleCheckboxState(recordKey);
            }
        }
        function UncheckRecord(recordKey) {
            if (_checkedRecordKeys.Contains(recordKey)) {
                ChangeSingleCheckboxState(recordKey);
            }
        }
        function ChangeMultipleCheckboxStates(recordKeys, bCheck) {
            objBag.commandMgr.Execute({
                Apply: function() {
                    ChangeStatesAction(bCheck);
                },
                Undo: function() {
                    ChangeStatesAction(!bCheck);
                }
            }, 'ChangeIndicatorCheckBox', SP.JsGrid.CommandManager.CommandType.Explicit);
            function ChangeStatesAction(bActuallyChecked) {
                if (bActuallyChecked) {
                    for (var recordKey in recordKeys.GetCollection()) {
                        if (!_checkedRecordKeys.Contains(recordKey)) {
                            _checkedRecordKeys.Add(recordKey);
                            ++_checkedRecordCount;
                        }
                    }
                }
                else {
                    for (var recordKey in recordKeys.GetCollection()) {
                        if (_checkedRecordKeys.Contains(recordKey)) {
                            _checkedRecordKeys.Remove(recordKey);
                            --_checkedRecordCount;
                        }
                    }
                }
                RefreshRecordIndicatorCell(null);
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRecordChecked, new SP.JsGrid.EventArgs.RecordChecked(recordKeys, bActuallyChecked));
            }
        }
        function ChangeSingleCheckboxState(recordKey) {
            objBag.commandMgr.Execute({
                Apply: Toggle,
                Undo: Toggle,
                Dispose: function() {
                    Toggle = null;
                }
            }, 'ChangeIndicatorCheckBox', SP.JsGrid.CommandManager.CommandType.Explicit);
            function Toggle() {
                if (IsRecordIndicatorCheckboxHidden(recordKey) || IsRecordIndicatorCheckboxDisabled(recordKey)) {
                    return;
                }
                var bChecked = !_this.IsRecordIndicatorCheckboxChecked(recordKey);

                if (bChecked) {
                    _checkedRecordKeys.Add(recordKey);
                    ++_checkedRecordCount;
                }
                else {
                    _checkedRecordKeys.Remove(recordKey);
                    --_checkedRecordCount;
                }
                RefreshRecordIndicatorCell(recordKey);
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRecordChecked, new SP.JsGrid.EventArgs.RecordChecked((new SP.Utilities.Set()).AddArray([recordKey]), bChecked));
            }
        }
        function OnCheckboxClicked(recordKey) {
            ChangeSingleCheckboxState(recordKey);
            if (_this.IsRecordIndicatorCheckboxChecked(recordKey)) {
                var selectedKeys = GetRecordKeysWhereColumnIsSelected(SP.JsGrid.RecordIndicatorCheckboxColumnKey);

                if (selectedKeys.Contains(recordKey)) {
                    for (var key in selectedKeys) {
                        if (_checkedRecordKeys.Contains(key) || IsRecordIndicatorCheckboxHidden(key) || IsRecordIndicatorCheckboxDisabled(key)) {
                            selectedKeys.Remove(key);
                        }
                    }
                    ChangeMultipleCheckboxStates(selectedKeys, true);
                }
            }
        }
        function GetRecordKeysWhereColumnIsSelected(columnKey) {
            var rowRanges = objBag.jsGridObj.GetSelectedRowRanges();
            var colRanges = objBag.jsGridObj.GetSelectedColumnRanges();
            var cellRanges = objBag.jsGridObj.GetSelectedCellRanges();
            var keys = new SP.Utilities.Set();

            for (var i = 0; i < colRanges.length; i++) {
                if (SP.Internal.JS.FindInArray(colRanges[i].keys, function(item) {
                    return item == columnKey;
                }) != null) {
                    keys.AddArray(objBag.tableCache.GetView());
                    break;
                }
            }
            if (keys.IsEmpty()) {
                for (var i = 0; i < rowRanges.length; i++) {
                    keys.AddArray(rowRanges[i].keys);
                }
                for (var i = 0; i < cellRanges.length; i++) {
                    if (SP.Internal.JS.FindInArray(cellRanges[i].colRange.keys, function(item) {
                        return item == columnKey;
                    }) != null) {
                        keys.AddArray(cellRanges[i].rowRange.keys);
                    }
                }
            }
            return keys;
        }
        function RefreshRecordIndicatorCell(optRecordKey) {
            objBag.paneMgr.NotifyUpdateProperty(optRecordKey, SP.JsGrid.RecordIndicatorCheckboxColumnKey, false, null);
        }
        this.IsRecordIndicatorCheckboxChecked = function(recordKey) {
            return _checkedRecordKeys.Contains(recordKey);
        };
        this.SetTableView = function(checkSelectionCheckboxHiddenRecordKeys, checkSelectionCheckboxDisabledRecordKeys, checkSelectionCheckedRecordKeys) {
            _checkboxHiddenRecordKeys = new SP.Utilities.Set();
            _checkboxHiddenRecordKeys.AddArray(checkSelectionCheckboxHiddenRecordKeys);
            _checkboxDisabledRecordKeys = new SP.Utilities.Set();
            _checkboxDisabledRecordKeys.AddArray(checkSelectionCheckboxDisabledRecordKeys);
            _checkedRecordKeys = new SP.Utilities.Set();
            _checkedRecordKeys.AddArray(checkSelectionCheckedRecordKeys);
            _checkedRecordCount = checkSelectionCheckedRecordKeys.length;
        };
        this.ExternalAPI = {
            CheckAllRecords: function() {
                var recordKeys = objBag.tableCache.GetView();
                var uncheckedRecords = new SP.Utilities.Set();

                for (var i = 0; i < recordKeys.length; i++) {
                    var recordKey = recordKeys[i];

                    if (!_checkedRecordKeys.Contains(recordKey) && !IsRecordIndicatorCheckboxHidden(recordKey) && !IsRecordIndicatorCheckboxDisabled(recordKey)) {
                        uncheckedRecords.Add(recordKey);
                    }
                }
                ChangeMultipleCheckboxStates(uncheckedRecords, true);
            },
            ClearCheckedRecords: function() {
                var copy = _checkedRecordKeys.Clone();

                ChangeMultipleCheckboxStates(copy, false);
            },
            EnableRecordCheckbox: function(recordKey) {
                if (_checkboxDisabledRecordKeys.Contains(recordKey)) {
                    _checkboxDisabledRecordKeys.Remove(recordKey);
                    RefreshRecordIndicatorCell(recordKey);
                }
            },
            DisableRecordCheckbox: function(recordKey) {
                if (!_checkboxDisabledRecordKeys.Contains(recordKey)) {
                    _checkboxDisabledRecordKeys.Add(recordKey);
                    RefreshRecordIndicatorCell(recordKey);
                }
            },
            ShowRecordCheckbox: function(recordKey) {
                if (_checkboxHiddenRecordKeys.Contains(recordKey)) {
                    _checkboxHiddenRecordKeys.Remove(recordKey);
                    RefreshRecordIndicatorCell(recordKey);
                }
            },
            HideRecordCheckbox: function(recordKey) {
                if (!_checkboxHiddenRecordKeys.Contains(recordKey)) {
                    _checkboxHiddenRecordKeys.Add(recordKey);
                    RefreshRecordIndicatorCell(recordKey);
                }
            },
            CheckRecord: CheckRecord,
            UncheckRecord: UncheckRecord,
            AnyRecordsChecked: function() {
                return !_checkedRecordKeys.IsEmpty();
            },
            GetCheckedRecordKeys: function() {
                return _checkedRecordKeys.GetCollection();
            },
            GetCheckedRecordCount: function() {
                return _checkedRecordCount;
            },
            GetHiddenCheckboxRecordKeys: function() {
                return _checkboxHiddenRecordKeys.GetCollection();
            },
            GetDisabledCheckboxRecordKeys: function() {
                return _checkboxDisabledRecordKeys.GetCollection();
            }
        };
        Init();
    };
    SP.JsGrid.Internal.CutCopyPasteManager = function(objBag, fnGetLocStr) {
        var SelectionType = SP.JsGrid.SelectionType;
        var copyOp;
        var _clipboardMgr = new SP.JsGrid.Internal.ClipboardManager();
        var _this = this;

        this.GetLastOperation = function() {
            return copyOp && {
                gridPane: copyOp.gridPane,
                rowRange: copyOp.rowRange,
                colRange: copyOp.colRange,
                opType: copyOp.opType
            };
        };
        this.CheckClipboard = function() {
            if (copyOp != null && !IsClipboardDataFromLastCopyOperation()) {
                this.CancelMode();
            }
        };
        this.IsSelectionCopyable = function(gridPane) {
            return (objBag.selectionMgr.GetRowRanges(gridPane)).length + (objBag.selectionMgr.GetColumnRanges(gridPane)).length + (objBag.selectionMgr.GetCellRanges(gridPane)).length == 1;
        };
        this.CancelMode = function() {
            var gridPane = copyOp && copyOp.gridPane;

            copyOp = null;
            if (gridPane != null) {
                gridPane.NotifyCopyOperationUpdated();
            }
        };
        this.OnCopy = function(gridPane) {
            var cellRangesToCopy = objBag.selectionMgr.GetLastSelectionRangeNormalized();

            if (cellRangesToCopy == null) {
                return;
            }
            var rowRange = cellRangesToCopy.rowRange;
            var colRange = cellRangesToCopy.colRange;
            var paneConverter = gridPane.GetGridPaneConverter();
            var recordMap;

            objBag.intDelegateMgr.Apply(SP.JsGrid.Internal.DelegateType.CallAsyncFn, function AsyncOp(fnAsyncOpComplete) {
                return recordMap = paneConverter.GetRecordsInvolved(rowRange.begin, rowRange.Size(), function(rm) {
                    recordMap = rm;
                    fnAsyncOpComplete();
                });
            }, function AsyncOpComplete() {
                BaseCopy(gridPane, recordMap, rowRange, colRange, 'copy', false);
            });
        };
        this.OnCut = function(gridPane) {
            if (!objBag.editUtil.IsEditingEnabled()) {
                alert(fnGetLocStr('GridNotEditable'));
                return;
            }
            var cellRangesToCut = objBag.selectionMgr.GetLastSelectionRangeNormalized();

            if (cellRangesToCut == null) {
                return;
            }
            var rowRange = cellRangesToCut.rowRange;
            var colRange = cellRangesToCut.colRange;
            var paneConverter = gridPane.GetGridPaneConverter();
            var bNewRowInvolved = objBag.editUtil.IsNewRowEnabled() && rowRange.end == paneConverter.GetVirtualRowCount() - (objBag.entryRecordMgr.GetEntryRecords()).length;
            var recordKeysInSel = paneConverter.GetRecordKeysInvolved(rowRange.begin, rowRange.Size());
            var recordMap;

            if (bNewRowInvolved) {
                alert(fnGetLocStr('OpNotSupportedOnEntryRow'));
                return;
            }
            var bCutCausesRowDelete = objBag.selectionMgr.GetLastSelectionType() == SelectionType.RowRange && objBag.delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.DeleteRecords);

            if (bCutCausesRowDelete) {
                if (gridPane.Id != SP.JsGrid.PaneId.MainGrid) {
                    alert(fnGetLocStr('NoCuttingRowsInPane'));
                    return;
                }
                var expandInfo = objBag.editUtil.ValidateAndExpandKeyList(recordKeysInSel);

                if (expandInfo != null) {
                    if (!expandInfo.bAllChildKeysInView) {
                        alert(fnGetLocStr('NoDeletingParentWithMissingChildren'));
                        return;
                    }
                    if (expandInfo.expandedKeys.length != recordKeysInSel.length) {
                        alert(fnGetLocStr('NoCuttingParentWithoutChildren'));
                        return;
                    }
                }
            }
            objBag.intDelegateMgr.Apply(SP.JsGrid.Internal.DelegateType.CallAsyncFn, function AsyncOp(fnAsyncOpComplete) {
                return recordMap = paneConverter.GetRecordsInvolved(rowRange.begin, rowRange.Size(), function(rm) {
                    recordMap = rm;
                    fnAsyncOpComplete();
                });
            }, function AsyncOpComplete() {
                if (bCutCausesRowDelete) {
                    if (ContainsReadOnlyRows(recordMap)) {
                        alert(fnGetLocStr('NoCuttingReadOnlyRows'));
                        return;
                    }
                }
                else {
                    if (ContainsReadOnlyCells(gridPane, recordMap, rowRange, colRange)) {
                        alert(fnGetLocStr('NoCuttingReadOnlyCells'));
                        return;
                    }
                }
                BaseCopy(gridPane, recordMap, rowRange, colRange, 'cut', bCutCausesRowDelete);
            });
        };
        this.OnPaste = function(gridPane) {
            if (!objBag.editUtil.IsEditingEnabled()) {
                alert(fnGetLocStr('GridNotEditable'));
                return;
            }
            if (!this.IsSelectionCopyable(gridPane)) {
                alert(fnGetLocStr('MultipleSelections'));
                return false;
            }
            var cbData = GetParsedClipboardData();

            if (cbData == null) {
                return;
            }
            var lastSelRange = objBag.selectionMgr.GetLastSelectionRangeNormalized();

            if (lastSelRange == null) {
                return;
            }
            var rowRangeBeginAdjustForCut = 0;
            var rowCountAdjustForCut = 0;
            var completingCutOp;

            if (copyOp != null && copyOp.opType == 'cut' && IsClipboardDataFromLastCopyOperation()) {
                completingCutOp = {
                    gridPane: copyOp.gridPane,
                    rowRange: copyOp.rowRange,
                    colRange: copyOp.colRange,
                    causesRowDelete: copyOp.bCutCausesRowDelete
                };
                if (completingCutOp.causesRowDelete) {
                    rowRangeBeginAdjustForCut = completingCutOp.gridPane == gridPane && completingCutOp.rowRange.begin < lastSelRange.rowRange.begin ? completingCutOp.rowRange.Size() : 0;
                    rowCountAdjustForCut = completingCutOp.rowRange.Size();
                    if (gridPane.Id != SP.JsGrid.PaneId.MainGrid) {
                        alert(fnGetLocStr('NoPastingRowsInPane'));
                        return;
                    }
                    var destRowRange = new SP.Utilities.Range(lastSelRange.rowRange.begin, lastSelRange.rowRange.begin + completingCutOp.rowRange.Size() - 1);

                    if (destRowRange.Overlaps(completingCutOp.rowRange)) {
                        alert(fnGetLocStr('CutPasteRowOverlap'));
                        return;
                    }
                }
            }
            var selWidth = lastSelRange.colRange.Size();
            var selHeight = lastSelRange.rowRange.Size();
            var paneConverter = gridPane.GetGridPaneConverter();
            var bPastingInNewRow;
            var existingRowsCount = paneConverter.GetVirtualRowCount();

            if (objBag.editUtil.IsNewRowEnabled()) {
                var entryRecordsCount = (objBag.entryRecordMgr.GetEntryRecords()).length;

                bPastingInNewRow = lastSelRange.rowRange.begin >= existingRowsCount - entryRecordsCount;
                existingRowsCount -= entryRecordsCount;
            }
            if (lastSelRange.colRange.begin + cbData.width > paneConverter.GetVirtualColumnCount() || !bPastingInNewRow && lastSelRange.rowRange.begin - rowRangeBeginAdjustForCut + cbData.height > existingRowsCount - rowCountAdjustForCut) {
                alert(fnGetLocStr('NoRoomToPaste'));
                return;
            }
            var bHorizMult = selWidth % cbData.width == 0;
            var bVertMult = selHeight % cbData.height == 0;
            var pasteWidth = completingCutOp == null && bHorizMult && (bVertMult || selHeight < cbData.height) ? selWidth : cbData.width;
            var pasteHeight = completingCutOp == null && bVertMult && (bHorizMult || selWidth < cbData.widfth) ? selHeight : cbData.height;
            var pasteRowRange = new SP.Utilities.Range(lastSelRange.rowRange.begin, lastSelRange.rowRange.begin + pasteHeight - 1);
            var pasteColRange = new SP.Utilities.Range(lastSelRange.colRange.begin, lastSelRange.colRange.begin + pasteWidth - 1);

            objBag.commandMgr.OpenGroup();
            var recordMapForCut, recordMapForPaste;

            if (completingCutOp != null) {
                FetchCutRecords(function() {
                    FetchPasteRecords(function() {
                        TryBeginPaste(CompletePaste);
                    });
                });
            }
            else {
                FetchPasteRecords(function() {
                    TryBeginPaste(CompletePaste);
                });
            }
            function FetchCutRecords(fnNext) {
                objBag.intDelegateMgr.Apply(SP.JsGrid.Internal.DelegateType.CallAsyncFn, function AsyncOp(fnAsyncOpComplete) {
                    return recordMapForCut = (completingCutOp.gridPane.GetGridPaneConverter()).GetRecordsInvolved(completingCutOp.rowRange.begin, completingCutOp.rowRange.Size(), function(rm) {
                        recordMapForCut = rm;
                        fnAsyncOpComplete();
                    });
                }, fnNext);
            }
            function FetchPasteRecords(fnNext) {
                if (!bPastingInNewRow) {
                    objBag.intDelegateMgr.Apply(SP.JsGrid.Internal.DelegateType.CallAsyncFn, function AsyncOp(fnAsyncOpComplete) {
                        return recordMapForPaste = paneConverter.GetRecordsInvolved(pasteRowRange.begin, pasteRowRange.Size(), function(rm) {
                            recordMapForPaste = rm;
                            fnAsyncOpComplete();
                        });
                    }, fnNext);
                }
                else {
                    fnNext();
                }
            }
            function TryBeginPaste(fnNext) {
                if (objBag.delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.TryBeginPaste)) {
                    objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.TryBeginPaste, pasteRowRange.end - pasteRowRange.begin + 1, PerformPaste, fnNext);
                }
                else {
                    PerformPaste(fnNext);
                }
            }
            function PerformPaste(fnNext) {
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnPasteBegin);
                _this.CancelMode();
                if (completingCutOp != null) {
                    if (completingCutOp.causesRowDelete) {
                        objBag.jsGridObj.DeleteRecords(SP.Internal.JS.ConvertSetKeysToArray(recordMapForCut));
                        pasteRowRange.begin -= rowRangeBeginAdjustForCut;
                        pasteRowRange.end -= rowRangeBeginAdjustForCut;
                    }
                    else {
                        objBag.jsGridObj.UpdateProperties(BuildPropertyUpdatesForCut(completingCutOp.gridPane, recordMapForCut, completingCutOp.rowRange, completingCutOp.colRange), SP.JsGrid.UserAction.Paste);
                    }
                }
                gridPane.PutData(cbData, recordMapForPaste, SP.JsGrid.UserAction.Paste, 'TL', pasteRowRange, pasteColRange, fnNext, bPastingInNewRow);
            }
            function CompletePaste(insertedRecordCount) {
                objBag.selectionMgr.SelectRange(gridPane, pasteRowRange.begin, pasteRowRange.begin + Math.min(insertedRecordCount, pasteRowRange.end - pasteRowRange.begin), pasteColRange.begin, pasteColRange.end, SP.JsGrid.Internal.SelectionManager.SelectOp.Set, true, false);
                objBag.commandMgr.CloseGroup(completingCutOp != null ? 'SP.JsGrid.UserAction.CutPaste' : SP.JsGrid.UserAction.Paste, SP.JsGrid.CommandManager.CommandType.Explicit, true);
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnPasteEnd);
            }
        };
        function BaseCopy(gridPane, recordMap, rowRange, colRange, opType, bCutCausesRowDelete) {
            if (!_this.IsSelectionCopyable(gridPane)) {
                alert(fnGetLocStr('MultipleSelections'));
                return false;
            }
            var srcData = gridPane.GetData(recordMap, rowRange, colRange);
            var rows = new Array(rowRange.Size());

            for (var i = 0; i < rows.length; i++) {
                rows[i] = srcData.matrix[i].join('\t');
                rows[i] = NormalizeCRLF(rows[i]);
                rows[i] = rows[i].replace(/\n/g, '<br>');
            }
            _this.CancelMode();
            var textData = rows.join('\r\n');

            if (_clipboardMgr.SetData(textData)) {
                copyOp = {
                    clipboardText: textData,
                    rowRange: rowRange,
                    colRange: colRange,
                    selType: objBag.selectionMgr.GetLastSelectionType(),
                    gridPane: gridPane,
                    opType: opType,
                    bCutCausesRowDelete: bCutCausesRowDelete
                };
                gridPane.NotifyCopyOperationUpdated();
                return true;
            }
            else {
                return false;
            }
        }
        function GetParsedClipboardData() {
            var fromClipboard = _clipboardMgr.GetData();

            if (fromClipboard == null || fromClipboard == '') {
                return null;
            }
            var rows = (NormalizeCRLF(fromClipboard)).split('\n');

            if (rows.length > 1 && rows[rows.length - 1] == '') {
                rows.pop();
            }
            var height = rows.length, width;

            for (var i = 0; i < height; i++) {
                rows[i] = rows[i].split('\t');
                if (width == null) {
                    width = rows[i].length;
                }
                else if (width != rows[i].length) {
                    if (i == height - 1 && rows[i].length == 1 && rows[i][0] == '') {
                        height--;
                        break;
                    }
                    break;
                }
            }
            if (i != height) {
                alert(fnGetLocStr('ClipboardDataNotSquare'));
                return null;
            }
            return {
                matrix: rows,
                width: width,
                height: height
            };
        }
        function ContainsReadOnlyCells(gridPane, recordMap, rowRange, colRange) {
            var paneConverter = gridPane.GetGridPaneConverter();

            for (var i = rowRange.begin; i <= rowRange.end; i++) {
                for (var j = colRange.begin; j <= colRange.end; j++) {
                    var keys = paneConverter.IdxToKey(i, j);

                    if (!objBag.editUtil.CanEditField(recordMap[keys.recordKey], paneConverter.GetColumnByIdx(j), keys.fieldKey)) {
                        return true;
                    }
                }
            }
            return false;
        }
        function ContainsReadOnlyRows(recordMap) {
            for (var key in recordMap) {
                if (!objBag.editUtil.CanEditField(recordMap[key], null, null)) {
                    return true;
                }
            }
            return false;
        }
        function BuildPropertyUpdatesForCut(gridPane, recordMap, rowRange, colRange) {
            var paneConverter = gridPane.GetGridPaneConverter();
            var propertyUpdates = new Array(rowRange.Size() * colRange.Size()), idx = 0;

            for (var i = rowRange.begin; i <= rowRange.end; i++) {
                for (var j = colRange.begin; j <= colRange.end; j++) {
                    var keys = paneConverter.IdxToKey(i, j);

                    propertyUpdates[idx++] = SP.JsGrid.CreateUnvalidatedPropertyUpdate(keys.recordKey, keys.fieldKey, '', true);
                }
            }
            return propertyUpdates;
        }
        function NormalizeCRLF(clipboardText) {
            return (clipboardText.replace(/\r\n/g, '\n')).replace(/\r/g, '\n');
        }
        function IsClipboardDataFromLastCopyOperation() {
            var r = false;
            var clipboardData = _clipboardMgr.GetData();

            if (copyOp.clipboardText == null) {
                r = clipboardData == null;
            }
            else {
                r = (clipboardData && NormalizeCRLF(clipboardData)) == NormalizeCRLF(copyOp.clipboardText);
            }
            return r;
        }
    };
    SP.JsGrid.Internal.ClipboardManager = function() {
        var _mimeType = GetMimeType();
        var _clipboardContext;

        this.SetData = function(data) {
            if (window.clipboardData && window.clipboardData.setData) {
                window.clipboardData.setData(_mimeType, data);
            }
            else if (window.Components) {
                try {
                    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
                }
                catch (e) {
                    _clipboardContext = {};
                    _clipboardContext[_mimeType] = data;
                    return true;
                }
                var stringComp = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
                var transfComp = Components.classes["@mozilla.org/widget/transferable;1"].createInstance(Components.interfaces.nsITransferable);

                transfComp.addDataFlavor(_mimeType);
                var clipboardService = Components.classes["@mozilla.org/widget/clipboard;1"].getService(Components.interfaces.nsIClipboard);

                stringComp.data = data;
                transfComp.setTransferData(_mimeType, stringComp, data.length * 2);
                clipboardService.setData(transfComp, null, Components.interfaces.nsIClipboard.kGlobalClipboard);
            }
            else {
                _clipboardContext = {};
                _clipboardContext[_mimeType] = data;
            }
            return true;
        };
        this.GetData = function() {
            if (window.clipboardData != null && window.clipboardData.getData != null) {
                return window.clipboardData.getData(_mimeType);
            }
            else if (window.Components) {
                try {
                    netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
                }
                catch (e) {
                    return _clipboardContext && _clipboardContext[_mimeType];
                }
                var clipboardService = Components.classes["@mozilla.org/widget/clipboard;1"].getService(Components.interfaces.nsIClipboard);
                var transfComp = Components.classes["@mozilla.org/widget/transferable;1"].createInstance(Components.interfaces.nsITransferable);

                transfComp.addDataFlavor(_mimeType);
                var dataComp = {}, length = {};

                clipboardService.getData(transfComp, Components.interfaces.nsIClipboard.kGlobalClipboard);
                transfComp.getTransferData(_mimeType, dataComp, length);
                dataComp = dataComp && dataComp.value.QueryInterface(Components.interfaces.nsISupportsString);
                return dataComp && dataComp.data.substring(0, length.value / 2);
            }
            else {
                return _clipboardContext && _clipboardContext[_mimeType];
            }
        };
        function GetMimeType() {
            if (window.clipboardData != null && window.clipboardData.getData != null) {
                return "text";
            }
            else if (Sys.Browser.agent == Sys.Browser.Safari || Sys.Browser.agent == Sys.Browser.AppleWebKit) {
                return "text/plain";
            }
            else if (Sys.Browser.agent == Sys.Browser.Firefox) {
                return "text/unicode";
            }
            else {
                return "text";
            }
        }
    };
    SP.JsGrid.Deserializer = function(serializedJsGridData, initType, optKeyColName) {
        this.recordKeyHash;
        this.recordKeyOrderChanged;
        this.columns;
        this.pivotedColumns;
        this.gridFieldMap;
        this.view;
        this.viewDependentKeys;
        this.minimalInfo;
        this.isGanttEnabled;
        this.isHierarchyEnabled;
        this.groupingLevel;
        this.isGrouped;
        this.isSorted;
        this.data;
        this.operationalConstantsFieldKeyMap;
        this.keyColumnName = optKeyColName;
        this.unfilteredHierarchyMgr;
        this.additionalParams;
        this.autoFilterState;
        this.hierarchyState;
        this.sortState;
        this.autoFilterEntries;
        this.ganttInfo;
        this.cellStyles;
        this.groupingGridRowStyleIds;
        this.bAutoFilterableColumns;
        var _this = this;

        this.InitJsGridParams = function(optGridParams) {
            var r = optGridParams != null ? optGridParams : new SP.JsGrid.JsGridControl.Parameters();

            r.tableViewParams = this.InitJsGridTableViewParams(r.tableViewParams);
            return r;
        };
        this.InitJsGridTableViewParams = function(optTableViewParams) {
            var r = optTableViewParams != null ? optTableViewParams : new SP.JsGrid.JsGridControl.TableViewParameters();

            r.operationalConstantsFieldKeyMap = this.operationalConstantsFieldKeyMap;
            r.gridFieldMap = this.gridFieldMap;
            r.paneLayout = this.paneLayout;
            r.keyFieldName = this.keyColumnName;
            r.bAutoFilterableColumns = this.bAutoFilterableColumns;
            if (this.columns != null) {
                r.columns = new SP.JsGrid.ColumnInfoCollection(this.columns);
            }
            if (this.pivotedColumns != null) {
                r.pivotedGridParams = new SP.JsGrid.JsGridControl.PivotedGridParameters();
                r.pivotedGridParams.columns = new SP.JsGrid.ColumnInfoCollection(this.pivotedColumns);
            }
            if (this.isGanttEnabled) {
                r.ganttParams = this.InitJsGridGanttParams(r.ganttParams);
            }
            r.rowViewParams = this.InitJsGridRowViewParams(r.rowViewParams);
            return r;
        };
        this.InitJsGridRowViewParams = function(optRowViewParams) {
            var r = optRowViewParams != null ? optRowViewParams : new SP.JsGrid.JsGridControl.RowViewParameters();

            r.minimalInfo = this.minimalInfo;
            r.hierarchyMode = this.isGrouped ? SP.JsGrid.HierarchyMode.Grouping : this.isHierarchyEnabled ? SP.JsGrid.HierarchyMode.Standard : SP.JsGrid.HierarchyMode.None;
            r.groupingLevel = this.groupingLevel;
            r.groupingRecordKeyPrefix = this.groupingPrefix;
            r.view = this.view;
            r.autoFilterState = this.autoFilterState;
            r.unfilteredHierarchyMgr = this.unfilteredHierarchyMgr;
            r.hierarchyState = this.hierarchyState;
            r.sortState = this.sortState;
            r.autoFilterEntries = this.autoFilterEntries;
            return r;
        };
        this.InitJsGridGanttParams = function(optGanttParams) {
            var r = optGanttParams != null ? optGanttParams : new SP.JsGrid.JsGridControl.GanttParameters();

            r.dateRange = [this.ganttInfo.StartDate, this.ganttInfo.FinishDate];
            r.ganttBarStyles = this.ganttInfo.Styles.barStyles;
            r.fieldKeyRedrawFilter = this.ganttInfo.Styles.fieldKeyRedrawFilter;
            return r;
        };
        this.InitCellStyles = function(styleMgr) {
            if (this.cellStyles != null) {
                for (var cellStyleId in this.cellStyles) {
                    styleMgr.RegisterCellStyle(cellStyleId, SP.JsGrid.Style.CreateStyle(SP.JsGrid.Style.Type.Cell, this.cellStyles[cellStyleId]));
                }
            }
            if (this.groupingGridRowStyleIds != null) {
                var styles = [];

                for (var i = 0; i < this.groupingGridRowStyleIds.length; i++) {
                    styles.push(styleMgr.GetCellStyle(this.groupingGridRowStyleIds[i]));
                }
                styleMgr.groupingStyles = styles;
            }
        };
        function Init() {
            if (initType == SP.JsGrid.DeserializationMode.Full) {
                PopulateFull();
            }
            else if (initType == SP.JsGrid.DeserializationMode.TableView) {
                PopulateTableView();
            }
            else if (initType == SP.JsGrid.DeserializationMode.RowView) {
                PopulateRowView();
            }
            else if (initType == SP.JsGrid.DeserializationMode.Slice) {
                PopulateIncremental();
            }
            else if (initType == SP.JsGrid.DeserializationMode.AutoFilter) {
                PopulateAutoFilter();
            }
        }
        function PopulateFull() {
            PopulateTableView(serializedJsGridData);
        }
        function PopulateTableView() {
            var listSeparator = serializedJsGridData.MultiValueSeparator;

            if (serializedJsGridData.LookupTableInfo != null) {
                ProcessLookupTypeInfo(serializedJsGridData.LookupTableInfo);
            }
            ProcessFields(serializedJsGridData.Fields);
            ProcessColumns(serializedJsGridData.Columns);
            if (serializedJsGridData.PivotedColumns != null) {
                ProcessPivotedColumns(serializedJsGridData.PivotedColumns);
            }
            _this.paneLayout = serializedJsGridData.PaneLayout;
            _this.ganttInfo = serializedJsGridData.GanttInfo;
            _this.bAutoFilterableColumns = serializedJsGridData.AutoFilterableColumns;
            PopulateRowView();
            function ProcessFields(fields) {
                _this.gridFieldMap = {};
                for (var i = 0; i < fields.length; i++) {
                    var src = fields[i];
                    var outField = new SP.JsGrid.GridField(src.fieldKey, src.hasDataValue, src.hasLocalizedValue, src.textDirection, src.defaultCellStyleId, src.editMode, src.dateOnly, src.csrInfo);

                    if (src.multiValue) {
                        outField.SetIsMultiValue(listSeparator);
                    }
                    outField.SetSingleValuePropType(src.propertyTypeId != null ? SP.JsGrid.Internal.Property.GetPropType(src.propertyTypeId) : null);
                    _this.gridFieldMap[outField.key] = outField;
                }
            }
            function ProcessColumns(columns) {
                _this.columns = [];
                for (var i = 0; i < columns.length; i++) {
                    var src = columns[i];
                    var outColumn = new SP.JsGrid.ColumnInfo(src.name, src.imgSrc, src.columnKey, src.width);

                    outColumn.isVisible = src.isVisible;
                    outColumn.isHidable = src.isHidable;
                    outColumn.isResizable = src.isResizable;
                    outColumn.isSortable = src.isSortable;
                    outColumn.isAutoFilterable = src.isAutoFilterable;
                    outColumn.imgRawSrc = src.imgRawSrc;
                    _this.columns.push(outColumn);
                }
            }
            function ProcessPivotedColumns(columns) {
                _this.pivotedColumns = [];
                for (var i = 0; i < columns.length; i++) {
                    var src = columns[i];
                    var outColumn = new SP.JsGrid.PivotedColumnInfo(src.name, src.imgSrc, src.columnKey, src.fieldKeys, src.width);

                    _this.pivotedColumns.push(outColumn);
                }
            }
            function ProcessLookupTypeInfo(lookupTypeInfo) {
                for (var i = 0; i < lookupTypeInfo.length; i++) {
                    SP.JsGrid.PropertyType.RegisterNewLookupPropType(lookupTypeInfo[i].id, lookupTypeInfo[i].lookup, lookupTypeInfo[i].showImage && lookupTypeInfo[i].showText ? SP.JsGrid.DisplayControl.Type.ImageText : lookupTypeInfo[i].showImage ? SP.JsGrid.DisplayControl.Type.Image : SP.JsGrid.DisplayControl.Type.Text, lookupTypeInfo[i].limitToList);
                }
            }
        }
        function PopulateRowView() {
            _this.view = serializedJsGridData.ViewInfo;
            _this.autoFilterState = serializedJsGridData.AutoFilterState;
            _this.sortState = serializedJsGridData.SortState;
            _this.hierarchyState = serializedJsGridData.HierarchyState;
            _this.cellStyles = serializedJsGridData.CellStyles;
            _this.groupingGridRowStyleIds = serializedJsGridData.GroupingGridRowStyleIds;
            if (serializedJsGridData.UnfilteredHierarchy != null) {
                _this.unfilteredHierarchyMgr = new SP.JsGrid.UnfilteredHierarchyManager(serializedJsGridData.UnfilteredHierarchy);
            }
            _this.autoFilterEntries = DecompressAutoFilterEntries(serializedJsGridData.AutoFilterEntries);
            PopulateIncremental();
        }
        function PopulateIncremental() {
            if (serializedJsGridData.MetaData != null)
                PopulateMetaData(serializedJsGridData.MetaData);
            if (serializedJsGridData.LocalizedTable != null && serializedJsGridData.UnlocalizedTable != null) {
                var localizedTable = serializedJsGridData.LocalizedTable;
                var dataTable = serializedJsGridData.UnlocalizedTable;

                _this.viewDependentKeys = serializedJsGridData.ViewDepKeys;
                Sys.Debug.assert(localizedTable.length == dataTable.length);
                _this.data = {};
                for (var i = 0; i < dataTable.length; i++) {
                    _this.data[dataTable[i][_this.keyColumnName]] = {
                        data: dataTable[i],
                        localized: localizedTable[i]
                    };
                }
            }
            _this.additionalParams = serializedJsGridData.AdditionalParams;
            if (serializedJsGridData.RecordCount != null && serializedJsGridData.TopRecord != null)
                _this.minimalInfo = {
                    topRecord: serializedJsGridData.TopRecord,
                    recordCount: serializedJsGridData.RecordCount
                };
        }
        function PopulateAutoFilter() {
            PopulateMetaData(serializedJsGridData.MetaData);
            _this.autoFilterEntries = DecompressAutoFilterEntries(serializedJsGridData.AutoFilterEntries);
        }
        function PopulateMetaData(metadata) {
            switch (initType) {
            case SP.JsGrid.DeserializationMode.Full:
            case SP.JsGrid.DeserializationMode.TableView:
                _this.isGanttEnabled = metadata.IsGanttEnabled;
                _this.operationalConstantsFieldKeyMap = metadata.GridOperationalConstantsFieldKeyMap;
                _this.keyColumnName = metadata.KeyColumnName;
            case SP.JsGrid.DeserializationMode.RowView:
                _this.isHierarchyEnabled = metadata.IsHierarchyEnabled;
                _this.groupingLevel = metadata.GroupingLevel;
                _this.groupingPrefix = metadata.GroupingPrefix;
                _this.isGrouped = _this.groupingLevel != 0;
                _this.isSorted = metadata.IsSorted;
            default:
                _this.recordKeyHash = metadata.RecordKeyHash;
                _this.recordKeyOrderChanged = metadata.RecordKeyOrderChanged;
                break;
            }
        }
        function DecompressAutoFilterEntries(autoFilterEntries) {
            if (autoFilterEntries != null) {
                for (var columnKey in autoFilterEntries) {
                    var columnEntries = autoFilterEntries[columnKey];

                    for (var i = 0; i < columnEntries.length; i++) {
                        if (columnEntries[i].displayString == 1) {
                            columnEntries[i].displayString = columnEntries[i].dataValue;
                        }
                    }
                }
            }
            return autoFilterEntries;
        }
        Init();
    };
    SP.JsGrid.Deserializer.DeserializeFromJson = function(jsonText, objectCreatorMap) {
        if (objectCreatorMap == null) {
            objectCreatorMap = {};
        }
        if (!('guid' in objectCreatorMap)) {
            objectCreatorMap['guid'] = function(guidStr) {
                return "\"" + SP.JsGrid.GuidManager.GetIndexForGuid(guidStr) + "\"";
            };
        }
        for (var prefix in objectCreatorMap) {
            jsonText = SP.JsGrid.Deserializer.EvalFunctionCallsInJson(jsonText, prefix, objectCreatorMap[prefix]);
        }
        ULS.AssertJS(ULSCat.msoulscat_WSS_JsGrid, jsonText != null && jsonText != "", "Null or empty parameter to deserialize");
        try {
            return SP.JsGrid.Internal.JSONParse(jsonText);
        }
        catch (e) {
            ULS.SendExceptionJS(ULSCat.msoulscat_WSS_JsGrid, e);
            return null;
        }
    };
    SP.JsGrid.Deserializer.EvalFunctionCallsInJson = function(jsonText, prefix, fn) {
        var unescapedQuoteRegEx = '([^\\\\])\\"';
        var regEx = unescapedQuoteRegEx + Escape(prefix) + '<\;>(.+?)' + unescapedQuoteRegEx;

        return jsonText.replace(eval('/' + regEx + '/g'), function(match, submatch1, submatch2, submatch3) {
            var result = fn.apply(null, DeserializeEncodedArray(submatch2 + submatch3));

            return submatch1 + (result == null ? '' : result);
        });
        function DeserializeEncodedArray(serializedArray) {
            var r = serializedArray.split('<;>');

            for (var i = 0; i < r.length - 1; i++) {
                r[i] = Unescape(r[i]);
            }
            return r;
        }
        function Unescape(str) {
            return str.replace(/;;/g, ";");
        }
        function Escape(str) {
            return str.replace(/;/g, ";;");
        }
    };
    SP.JsGrid.Internal.DiffTracker = function(objBag, fnGetChange) {
        var _changeItems = new ChangeItemList();
        var _vacatedChanges = {};

        function ChangeItemList() {
            var _list = [];

            this.AddChange = function(changeKey, bSynchronized, events) {
                var toAdd = {
                    changeKey: changeKey,
                    bSynchronized: bSynchronized
                };

                if (events != null) {
                    toAdd.events = events;
                }
                _list.push(toAdd);
            };
            this.RemoveChange = function(changeKey) {
                var idx = FindKeyIndex(changeKey);

                return idx != null ? _list.splice(idx, 1) : null;
            };
            this.ContainsKey = function(changeKey) {
                return FindKeyIndex(changeKey) != null;
            };
            this.GetItem = function(optKey) {
                var idx = optKey != null ? FindKeyIndex(optKey) : _list.length - 1;

                return idx != -1 && idx != null ? _list[idx].changeKey : null;
            };
            this.AddEvent = function(changeKey, eventObject) {
                var idx = FindKeyIndex(changeKey);

                if (idx != null) {
                    if (_list[idx].events == null) {
                        _list[idx].events = [];
                    }
                    if (!NodeContainsEvent(_list[idx], eventObject)) {
                        _list[idx].events.push(eventObject);
                    }
                }
            };
            this.RemoveEvent = function(changeKey, eventObject) {
                var idx = FindKeyIndex(changeKey);

                if (idx != null && _list[idx].events != null) {
                    for (var i = 0; i < _list[idx].events.length; i++) {
                        if (_list[idx].events[i] == eventObject) {
                            _list[idx].events.splice(i, 1);
                            break;
                        }
                    }
                }
            };
            this.Length = function() {
                return _list.length;
            };
            this.Clear = function() {
                _list = [];
            };
            this.GetChanges = function(changeQuery) {
                var startIdx, endIdx;

                if (changeQuery.sliceBeginInfo != null) {
                    startIdx = FindIdx(changeQuery.sliceBeginInfo);
                    if (startIdx == null && changeQuery.sliceBeginInfo.bCancelQueryIfMissing) {
                        return [];
                    }
                    else if (startIdx != null && !changeQuery.sliceBeginInfo.bInclusive) {
                        startIdx++;
                    }
                }
                if (changeQuery.sliceEndInfo != null) {
                    endIdx = FindIdx(changeQuery.sliceEndInfo, startIdx == null ? null : startIdx + 1);
                    if (endIdx == null && changeQuery.sliceEndInfo.bCancelQueryIfMissing) {
                        return [];
                    }
                    else if (endIdx != null && changeQuery.sliceEndInfo.bInclusive) {
                        endIdx++;
                    }
                }
                return _list.slice(startIdx == null ? 0 : startIdx, endIdx == null ? _list.length : endIdx);
                function FindIdx(sliceInfo, optStartIdx) {
                    var r;

                    if (sliceInfo.event != null) {
                        r = FindEventIndex(sliceInfo.event, sliceInfo.bFindLastOccurence, optStartIdx);
                    }
                    else if (sliceInfo.changeKey != null) {
                        r = FindKeyIndex(sliceInfo.changeKey, sliceInfo.bCancelQueryIfMissing);
                    }
                    else {
                        Sys.Debug.assert(false);
                    }
                    return r;
                }
            };
            function FindKeyIndex(key, bAllowGreaterThan) {
                var r = null;
                var compRes;

                for (var i = _list.length - 1; i >= 0; i--) {
                    compRes = _list[i].changeKey.CompareTo(key);
                    if (compRes == 0) {
                        r = i;
                        break;
                    }
                    else if (compRes < 0) {
                        if (bAllowGreaterThan && i != _list.length - 1) {
                            r = i + 1;
                        }
                        break;
                    }
                }
                return r;
            }
            function FindEventIndex(eventObj, bLast, optStartIdx) {
                var r = null;
                var startIdx = optStartIdx != null ? optStartIdx : 0;

                for (var i = startIdx; i < _list.length; i++) {
                    if (NodeContainsEvent(_list[i], eventObj)) {
                        r = i;
                        if (!bLast) {
                            break;
                        }
                    }
                }
                return r;
            }
            function NodeContainsEvent(item, eventObj) {
                var r = false;

                if (item.events != null) {
                    for (var i = 0; i < item.events.length; i++) {
                        if (item.events[i] == eventObj) {
                            r = true;
                            break;
                        }
                    }
                }
                return r;
            }
        }
        function ChangeQuery() {
            this.sliceBeginInfo = null;
            this.sliceEndInfo = null;
            this.recordKeys = null;
            this.bIncludeInvalidPropUpdates = false;
        }
        function EventSliceInfo() {
            this.event = null;
            this.bFindLastOccurence = false;
            this.bInclusive = true;
            this.bCancelQueryIfMissing = false;
        }
        function ChangeKeySliceInfo() {
            this.changeKey = null;
            this.bInclusive = true;
            this.bCancelQueryIfMissing = false;
        }
        this.ExternalAPI = {
            RegisterEvent: function(changeKey, eventObject) {
                Sys.Debug.assert(eventObject != null);
                _changeItems.AddEvent(changeKey, eventObject);
            },
            UnregisterEvent: function(changeKey, eventObject) {
                Sys.Debug.assert(eventObject != null);
                _changeItems.RemoveChange(changeKey, eventObject);
            },
            GetChanges: function(optStartEvent, optEndEvent, optRecordKeys, bFirstStartEvent, bStartInclusive, bEndInclusive, bIncludeInvalidPropUpdates, bLastEndEvent) {
                var changeQuery = new ChangeQuery();

                if (optStartEvent != null) {
                    changeQuery.sliceBeginInfo = {
                        event: optStartEvent,
                        bFindLastOccurence: !bFirstStartEvent,
                        bInclusive: bStartInclusive,
                        bCancelQueryIfMissing: false
                    };
                }
                if (optEndEvent != null) {
                    changeQuery.sliceEndInfo = {
                        event: optEndEvent,
                        bFindLastOccurence: bLastEndEvent,
                        bInclusive: bEndInclusive,
                        bCancelQueryIfMissing: true
                    };
                }
                return ProcessChanges(_changeItems.GetChanges(changeQuery), false, null, optRecordKeys, bIncludeInvalidPropUpdates, bLastEndEvent);
            },
            GetChangesAsJson: function(changeQuery, optfnPreProcessUpdateForSerialize) {
                if (changeQuery == null) {
                    changeQuery = new ChangeQuery();
                }
                var r = ProcessChanges(_changeItems.GetChanges(changeQuery), true, optfnPreProcessUpdateForSerialize, changeQuery.recordKeys, changeQuery.bIncludeInvalidPropUpdates);

                return r == null || r.length == 0 ? null : Sys.Serialization.JavaScriptSerializer.serialize(r);
            },
            AnyChanges: function() {
                return _changeItems.Length() > 0;
            },
            GetUniquePropertyChanges: function(changeQuery, optfnFilter) {
                if (changeQuery == null) {
                    changeQuery = new ChangeQuery();
                }
                return FilterChangesForUniquePropChanges(optfnFilter, ProcessChanges(_changeItems.GetChanges(changeQuery), false, null, changeQuery.recordKeys, changeQuery.bIncludeInvalidPropUpdates));
            },
            ChangeQuery: ChangeQuery,
            EventSliceInfo: EventSliceInfo,
            ChangeKeySliceInfo: ChangeKeySliceInfo
        };
        this.Clear = function() {
            _changeItems.Clear();
            _vacatedChanges = {};
        };
        this.NotifySynchronizeToChange = function(changeKey) {
            NotifySynchronizeOrRollbackChange(changeKey, true);
        };
        this.NotifyRollbackChange = function(changeKey) {
            NotifySynchronizeOrRollbackChange(changeKey, false);
        };
        this.NotifyVacateChange = function(changeKey) {
            if (_changeItems.ContainsKey(changeKey)) {
                _vacatedChanges[changeKey.GetVersionNumber()] = fnGetChange(changeKey, null, true);
            }
        };
        function NotifySynchronizeOrRollbackChange(changeKey, bSynchronized) {
            var lastItem = _changeItems.GetItem();

            if (lastItem != null && lastItem == changeKey) {
                if (lastItem.bWasSynchronized != bSynchronized) {
                    _changeItems.RemoveChange(changeKey);
                }
                else {
                    Sys.Debug.assert(false);
                }
            }
            else {
                _changeItems.AddChange(changeKey, bSynchronized);
            }
        }
        function ProcessChanges(changes, bForSerialize, optFnPreProcessUpdateForSerialize, optRecordKeys, bIncludeInvalidPropUpdates) {
            var r = [];
            var rIdx = 0;

            for (var cIdx = 0; cIdx < changes.length; cIdx++) {
                r.push(SP.Internal.JS.CloneObj(changes[cIdx], false));
                var version = r[rIdx].changeKey.GetVersionNumber();
                var updates = r[rIdx].updates = version in _vacatedChanges ? FilterChangesForRecordKeys(_vacatedChanges[version], optRecordKeys, bIncludeInvalidPropUpdates) : fnGetChange(r[rIdx].changeKey, optRecordKeys, !r[rIdx].bSynchronized, bIncludeInvalidPropUpdates);

                delete r[rIdx].bSynchronized;
                delete r[rIdx].events;
                if (!bIncludeInvalidPropUpdates) {
                    for (var i = updates.length - 1; i >= 0; i--) {
                        if (updates[i].type == SP.JsGrid.Internal.VersionManager.ChangeType.Prop && updates[i].validationState != SP.JsGrid.ValidationState.Valid) {
                            updates.splice(i, 1);
                        }
                        else {
                            delete updates[i].validationState;
                        }
                    }
                }
                if (bForSerialize) {
                    for (var i = 0; i < updates.length; i++) {
                        if (updates[i].type == SP.JsGrid.Internal.VersionManager.ChangeType.Prop) {
                            var newProp = {};

                            if (updates[i].propUpdate.data != SP.JsGrid.EmptyValue) {
                                newProp.dataValue = SP.Internal.JS.CloneObj(updates[i].propUpdate.data, true);
                                newProp.hasDataValue = true;
                            }
                            if (updates[i].propUpdate.localized != SP.JsGrid.EmptyValue) {
                                newProp.localizedValue = updates[i].propUpdate.localized;
                                newProp.hasLocalizedValue = true;
                            }
                            updates[i].newProp = newProp;
                            delete updates[i].propUpdate;
                        }
                        else {
                            if (updates[i].type == SP.JsGrid.Internal.VersionManager.ChangeType.Delete) {
                                delete updates[i].afterRecordKey;
                            }
                        }
                        var recordKey = updates[i].recordKey;
                        var result = optFnPreProcessUpdateForSerialize != null ? optFnPreProcessUpdateForSerialize(r[rIdx].changeKey, updates[i]) : SP.JsGrid.UpdateSerializeMode.Default;

                        if (updates[i].type == SP.JsGrid.Internal.VersionManager.ChangeType.Prop && result == SP.JsGrid.UpdateSerializeMode.Default) {
                            var fieldKey = updates[i].fieldKey;
                            var propType = objBag.controller.GetPropType(recordKey, fieldKey);
                            var field = objBag.jsGridParams.tableViewParams.gridFieldMap[fieldKey];

                            result = SP.JsGrid.Internal.Property.GetUpdateSerializeMode(propType, field);
                        }
                        if (result == SP.JsGrid.UpdateSerializeMode.Cancel) {
                            updates.splice(i, 1);
                            i--;
                            continue;
                        }
                        if (updates[i].type == SP.JsGrid.Internal.VersionManager.ChangeType.Prop) {
                            var newProp = updates[i].newProp;

                            if (result == SP.JsGrid.UpdateSerializeMode.PropDataOnly) {
                                delete newProp.localizedValue;
                                delete newProp.hasLocalizedValue;
                            }
                            if (result == SP.JsGrid.UpdateSerializeMode.PropLocalizedOnly) {
                                delete newProp.dataValue;
                                delete newProp.hasDataValue;
                            }
                            if ('dataValue' in newProp) {
                                newProp.dataValue = newProp.dataValue != null ? Sys.Serialization.JavaScriptSerializer.serialize(newProp.dataValue) : null;
                            }
                            if ('localizedValue' in newProp) {
                                newProp.localizedValue = escape(newProp.localizedValue);
                            }
                        }
                    }
                    r[rIdx].changeNumber = version;
                    delete r[rIdx].changeKey;
                }
                if (r[rIdx].updates.length == 0) {
                    r.splice(rIdx, 1);
                }
                else {
                    rIdx++;
                }
            }
            return r;
        }
        function FilterChangesForRecordKeys(changes, optRecordKeys) {
            var r;

            if (optRecordKeys == null) {
                r = changes;
            }
            else {
                var recSet = new SP.JsGrid.Internal.Set();

                recSet.AddArray(optRecordKeys);
                r = [];
                for (var i = 0; i < changes.length; i++) {
                    if (recSet.Contains(changes[i])) {
                        r.push(changes[i]);
                    }
                }
            }
        }
        function FilterChangesForUniquePropChanges(optfnFilter, changes) {
            var propChangeType = SP.JsGrid.Internal.VersionManager.ChangeType.Prop;
            var r = {};

            for (var i = 0; i < changes.length; i++) {
                var updates = changes[i].updates;

                for (var j = 0; j < updates.length; j++) {
                    var update = updates[j];

                    if (update.type == propChangeType) {
                        if (optfnFilter == null || optfnFilter(update.recordKey, update.fieldKey)) {
                            if (r[update.recordKey] == null) {
                                r[update.recordKey] = {};
                            }
                            r[update.recordKey][update.fieldKey] = update.propUpdate;
                        }
                    }
                }
            }
            return r;
        }
    };
    SP.JsGrid.Internal.EditActorsRegistrationManager = function(objBag, actorsParentNode, fnGetEditControlManagerAPI, fnGetWidgetControlManagerAPI, fnOnRegisterWidgetControl) {
        var _registeredEditControlsAPI = {};
        var _registeredWidgetControlsAPI = {};

        this.RegisterEditControl = function(name) {
            if (!(name in _registeredEditControlsAPI)) {
                CreateEditControlInstance(name);
            }
            return _registeredEditControlsAPI[name];
        };
        this.RegisterWidgetControl = function(name) {
            if (!(name in _registeredWidgetControlsAPI)) {
                CreateWidgetControlInstance(name);
            }
            return _registeredWidgetControlsAPI[name];
        };
        this.GetEditControlAPI = function(name) {
            return _registeredEditControlsAPI[name];
        };
        this.GetWidgetControlAPI = function(name) {
            return _registeredWidgetControlsAPI[name];
        };
        this.GetActorAPI = function(name) {
            return _registeredEditControlsAPI[name] || _registeredWidgetControlsAPI[name];
        };
        this.IsActorWidget = function(name) {
            return name in _registeredWidgetControlsAPI;
        };
        this.GetEditAndWidgetControlsAPI = function(record, column, fieldKey, propType) {
            var r = {
                editControlAPI: null,
                widgetControlsAPI: []
            };
            var actorNames = SP.JsGrid.Internal.Property.GetEditAndWidgetControlNamesForProperty(record, column, fieldKey, propType);

            r.editControlAPI = this.RegisterEditControl(actorNames.editControlName);
            for (var i = 0; i < actorNames.widgetControlNames.length; i++) {
                r.widgetControlsAPI.push(this.RegisterWidgetControl(actorNames.widgetControlNames[i]));
            }
            return r;
        };
        this.Dispose = function() {
            for (var name in _registeredEditControlsAPI) {
                _registeredEditControlsAPI[name].actor.Dispose();
            }
            for (var name in _registeredWidgetControlsAPI) {
                _registeredWidgetControlsAPI[name].actor.Dispose();
            }
        };
        function CreateEditControlInstance(name) {
            var editControlAPI = fnGetEditControlManagerAPI(name);
            var factoryArgs = [editControlAPI.GetGridContext()];
            var textInputElement = objBag.focusMgr.GetFocusElementForTextInput(name);

            if (textInputElement != null) {
                factoryArgs.push(textInputElement);
            }
            editControlAPI.actor = SP.JsGrid.Internal.Property.GetEditControl(name, factoryArgs);
            _registeredEditControlsAPI[name] = editControlAPI;
        }
        function CreateWidgetControlInstance(name) {
            var widgetControlAPI = fnGetWidgetControlManagerAPI(name);
            var factoryArgs = [widgetControlAPI.GetGridContext()];

            if (name == SP.JsGrid.ErrorWidgetId) {
                factoryArgs.push(objBag.errorMgr);
            }
            widgetControlAPI.actor = SP.JsGrid.Internal.Property.GetWidgetControl(name, factoryArgs);
            fnOnRegisterWidgetControl(name, widgetControlAPI.actor);
            _registeredWidgetControlsAPI[name] = widgetControlAPI;
        }
    };
    SP.JsGrid.Internal.EditManager = function(objBag, fnUpdateProperties, fnGetCellValue) {
        var jsGridObj = objBag.jsGridObj;
        var styles = objBag.styleMgr;
        var errorMgr = objBag.errorMgr;
        var StateType = {
            Inited: 1,
            Bound: 2,
            Editing: 3
        };
        var _this = this;
        var actorsParentNode = objBag.parentNode;
        var _curState = StateType.Inited;
        var _curRecord, _curColumn, _curField, _curGridPane, _curPropType;
        var _curTd;
        var _curTdRect, _curPaneRect, _curExpandSpace, _curStyle;
        var _curActorsAPI;
        var _curEditControlAPI, _curWidgetControlsAPI;
        var _curActiveActorName;
        var _updatedValue, _userUpdatedValue, _originalValue, _valueBeforeWidgetEdit;
        var _widgetIcons = {};
        var _widgetDock = CreateWidgetDock();
        var _fnDisposeWidgetDockHandlers;
        var _highlightedWidgetName;
        var _expandedWidgetName;
        var _lastExpandedActorName;
        var _isInQuickEditMode;
        var _lastChangeKey;
        var _stateTransitionManager = new StateTransitionManager();
        var _actorRegistrationManager = new SP.JsGrid.Internal.EditActorsRegistrationManager(objBag, actorsParentNode, GetEditControlManagerAPI, GetWidgetControlManagerAPI, OnRegisterWidgetControl);

        objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnCellErrorStateChanged, RecalculateWidgets);
        function EditActorGridContext(name) {
            this.jsGridObj = objBag.jsGridObj;
            this.parentNode = actorsParentNode;
            this.styleManager = objBag.styleMgr;
            this.RTL = objBag.RTL;
            this.emptyValue = SP.JsGrid.EmptyValue;
            this.bLightFocus = false;
            this.OnKeyDown = function(eventInfo) {
                _this.OnActorKeyDown(eventInfo, name);
            };
        }
        function EditActorCellContext(name) {
            this.propType;
            this.originalValue;
            this.record;
            this.column;
            this.field;
            this.fieldKey;
            this.cellExpandSpace;
            this.SetCurrentValue = function(value) {
                _this.SetCurrentValue(name, value);
            };
        }
        function EditActorManagerAPI(name, actor, fnGetGridContext, fnGetCellContext) {
            var _gridContext = fnGetGridContext();
            var _cellContext = fnGetCellContext();

            this.name = name;
            this.actor = actor;
            this.SetCellInfo = function() {
                SetCellInfo(_cellContext, _actorRegistrationManager.IsActorWidget(name));
            };
            this.UpdateOriginalValue = function(value) {
                _cellContext.originalValue = value;
            };
            this.IsLightFocus = function() {
                return _gridContext.bLightFocus;
            };
            this.NotifyEditComplete = function(bCancel) {
                _cellContext.NotifyEditComplete(bCancel);
            };
            this.GetGridContext = function() {
                return _gridContext;
            };
            this.GetCellContext = function() {
                return _cellContext;
            };
        }
        function WidgetControlGridContext(name) {
            return new EditActorGridContext(name);
        }
        function WidgetControlCellContext(name) {
            var baseAPI = new EditActorCellContext(name);

            baseAPI.NotifyExpandWidget = function() {
                _this.NotifyExpandWidget(name);
            };
            baseAPI.NotifyCollapseWidget = function() {
                _this.NotifyCollapseWidget(name);
            };
            baseAPI.NotifyEditComplete = function(bCancel) {
                if (bCancel) {
                    _this.NotifyWidgetEditCancel(name);
                }
                else {
                    NotifyEditCompleteInternal(bCancel);
                }
            };
            return baseAPI;
        }
        function GetWidgetControlManagerAPI(name, widgetControl) {
            return new EditActorManagerAPI(name, widgetControl, function() {
                return WidgetControlGridContext(name);
            }, function() {
                return WidgetControlCellContext(name);
            });
        }
        function EditControlGridContext(name) {
            var api = new EditActorGridContext(name);

            api.OnActivateActor = function() {
                OnActivateActorInternal(name);
            };
            api.OnDeactivateActor = function() {
                OnDeactivateActorInternal(name);
            };
            return api;
        }
        function EditControlCellContext(name) {
            var baseAPI = new EditActorCellContext(name);

            baseAPI.NotifyExpandControl = function() {
                _this.NotifyExpandControl(name);
            };
            baseAPI.NotifyEditComplete = function(bCancel) {
                NotifyEditCompleteInternal(bCancel);
            };
            baseAPI.Show = function(elem) {
                Sys.Debug.assert(_curGridPane != null && _curTd != null, "Show edit html element only after actor has been bound to a cell.");
                elem.style.position = 'absolute';
                Sys.Debug.assert(elem.offsetParent == actorsParentNode, "Edit control element needs to be added to the parentNode sent through OnGridAttach, and positioned relative to it.");
                if (objBag.RTL.bEnabled) {
                    elem.style.right = elem.offsetParent.offsetWidth - (_curTdRect.x + _curTdRect.width) + 1 + 'px';
                }
                else {
                    elem.style.left = _curTdRect.x + 1 + 'px';
                }
                elem.style.top = _curTdRect.y + 1 + 'px';
                _curGridPane.ClipElementToTableViewport(elem);
                elem.style.visibility = 'inherit';
            };
            baseAPI.Hide = function(elem) {
                if (!objBag.focusMgr.ChangeTextInputElementToFocusElement()) {
                    elem.style.visibility = 'hidden';
                }
            };
            return baseAPI;
        }
        function GetEditControlManagerAPI(name, editControl) {
            return new EditActorManagerAPI(name, editControl, function() {
                return EditControlGridContext(name);
            }, function() {
                return EditControlCellContext(name);
            });
        }
        function NotifyEditCompleteInternal(bCancel) {
            if (_this.IsEditing() || _stateTransitionManager.GetCurrentEndingState() == StateType.Editing) {
                _stateTransitionManager.HandleStateTransition(StateType.Bound, true, null, [bCancel]);
            }
            else if (_this.IsBound()) {
                CollapseAll();
                if (!bCancel) {
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnCellEditBegin, new SP.JsGrid.EventArgs.CellEditBegin(_curRecord.key(), _curField.key));
                    var changeKey = ApplyUserUpdatedValue();

                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnCellEditCompleted, new SP.JsGrid.EventArgs.CellEditCompleted(_curRecord.key(), _curField.key, changeKey, bCancel));
                }
                objBag.focusMgr.Focus();
            }
            _curActiveActorName = null;
        }
        function SetCellInfo(api, forWidget) {
            api.propType = _curPropType;
            api.originalValue = _originalValue;
            api.record = _curRecord;
            api.column = _curColumn;
            api.field = _curField;
            api.fieldKey = _curField.key;
            api.cellExpandSpace = _curExpandSpace;
            if (!forWidget) {
                api.cellWidth = _curTdRect.width - 2;
                api.cellHeight = _curTdRect.height - 2;
                api.cellStyle = _curStyle;
            }
            else {
                api.cellRect = _curTdRect;
            }
        }
        function OnRegisterWidgetControl(name, widgetControl) {
            var parentDiv = document.createElement('div');

            parentDiv.className = 'jsgrid-widget-cell';
            parentDiv.appendChild(widgetControl.GetIcon());
            _widgetIcons[name] = parentDiv;
            _widgetDock.appendChild(parentDiv);
        }
        function StateTransitionManager() {
            function StateTransition(fn, bArgsRequired) {
                this.fn = fn;
                this.bArgsRequired = bArgsRequired;
            }
            var rawStateMap = [[StateType.Inited, {
                promote: new StateTransition(ProcessBind, true)
            }], [StateType.Bound, {
                demote: new StateTransition(ProcessUnbind, false),
                promote: new StateTransition(ProcessBeginEdit, true)
            }], [StateType.Editing, {
                demote: new StateTransition(ProcessStopEdit, false)
            }]];
            var stateMap = SP.Internal.JS.ConvertTableToMap(rawStateMap, '0', '1');
            var _stateQueue = [];

            function ProcessUnbind() {
                for (var i = 0; i < _curWidgetControlsAPI.length; i++) {
                    CollapseWidget(_curWidgetControlsAPI[i].name);
                }
                _widgetDock.style.display = 'none';
                for (var i = 0; i < _widgetDock.childNodes.length; i++) {
                    _widgetDock.childNodes[i].style.visibility = 'hidden';
                }
                _lastExpandedActorName = null;
                for (var i = 0; i < _curActorsAPI.length; i++) {
                    _curActorsAPI[i].actor.Unbind();
                }
                _curRecord = null;
                _curColumn = null;
                _curField = null;
                _curGridPane = null;
                _curActorsAPI = null;
                _curEditControlAPI = null;
                _curWidgetControlsAPI = null;
                _curPropType = null;
                _curTd = null;
                _curTdRect = null;
                _curExpandSpace = null;
                _curPaneRect = null;
                _curStyle = null;
                _curActiveActorName = null;
                _updatedValue = {};
                _userUpdatedValue = {};
                _originalValue = null;
                _lastExpandedActorName = null;
            }
            function ProcessStopEdit(bCancel) {
                var changeKey;

                _curEditControlAPI.actor.OnEndEdit();
                CollapseAll();
                if (!bCancel) {
                    changeKey = ApplyUserUpdatedValue();
                }
                _isInQuickEditMode = false;
                _updatedValue = {};
                _userUpdatedValue = {};
                objBag.focusMgr.Focus();
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnCellEditCompleted, new SP.JsGrid.EventArgs.CellEditCompleted(_curRecord.key(), _curField.key, changeKey, bCancel));
            }
            function ProcessBind(gridPane, record, column, fieldKey, gridFieldMap, optCellInfo, optCellStyle, fnContinue) {
                _curRecord = record;
                _curColumn = column;
                _curField = gridFieldMap[fieldKey];
                _curGridPane = gridPane;
                _curPropType = record.GetProp(fieldKey) != null ? (record.GetProp(fieldKey)).propType : gridFieldMap[fieldKey].GetPropType();
                _originalValue = GetValueFromRecord();
                _curActorsAPI = _actorRegistrationManager.GetEditAndWidgetControlsAPI(_curRecord, _curColumn, _curField.key, _curPropType);
                _curEditControlAPI = _curActorsAPI.editControlAPI;
                _curWidgetControlsAPI = _curActorsAPI.widgetControlsAPI;
                TryAddErrorWidget(record.key(), fieldKey);
                _curActorsAPI = [_curEditControlAPI].concat(_curWidgetControlsAPI);
                _updatedValue = {};
                _userUpdatedValue = {};
                if (optCellInfo != null) {
                    _curTd = optCellInfo.GetTd();
                }
                if (optCellStyle != null) {
                    _curStyle = optCellStyle;
                }
                _curTdRect = GetCurrentTdRect();
                _curPaneRect = GetCurrentViewportCoord();
                _curExpandSpace = GetExpandSpace(_curTdRect, _curPaneRect);
                _curEditControlAPI.SetCellInfo();
                _curEditControlAPI.actor.BindToCell(_curEditControlAPI.GetCellContext());
                for (var idx in _curWidgetControlsAPI) {
                    _curWidgetControlsAPI[idx].SetCellInfo();
                    _curWidgetControlsAPI[idx].actor.BindToCell(_curWidgetControlsAPI[idx].GetCellContext());
                }
                LayoutWidgets();
            }
            function ProcessBeginEdit(eventInfo) {
                _curActiveActorName = SP.JsGrid.EmptyValue;
                UpdateOriginalValue(GetValueFromRecord());
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnCellEditBegin, new SP.JsGrid.EventArgs.CellEditBegin(_curRecord.key(), _curField.key));
                _curEditControlAPI.actor.OnBeginEdit(eventInfo);
                if (_curEditControlAPI.actor.OnKeyDown != null && (eventInfo.type == 'keypress' || eventInfo.type == 'keydown')) {
                    _curEditControlAPI.actor.OnKeyDown(eventInfo);
                }
            }
            var emptyArgs = [];

            this.HandleStateTransition = function(newState, bIsDemotion, fnStateTransitionComplete, optArgs) {
                var curEndingState = _stateQueue.length > 0 ? _stateQueue[0].newState : _curState;

                if (bIsDemotion && curEndingState <= newState || !bIsDemotion && curEndingState >= newState) {
                    MergeState(newState, fnStateTransitionComplete, optArgs);
                }
                else {
                    var stateDelta = Math.abs(curEndingState - newState);

                    for (var i = 1; i <= stateDelta; i++) {
                        var newState = curEndingState + i * (bIsDemotion ? -1 : 1);
                        var args = i == 1 && optArgs != null ? optArgs : emptyArgs;
                        var callbacks = fnStateTransitionComplete != null && stateDelta == i ? [fnStateTransitionComplete] : emptyArgs;

                        Sys.Debug.assert(!stateMap[newState].bArgsRequired || args == emptyArgs);
                        _stateQueue.unshift({
                            newState: newState,
                            args: args,
                            callbacks: callbacks
                        });
                    }
                    if (_stateQueue.length == stateDelta) {
                        StartProcessing();
                    }
                }
                function StartProcessing() {
                    while (_stateQueue.length > 0) {
                        var curStateInfo = _stateQueue[_stateQueue.length - 1];
                        var curStateChangeFn = _curState < curStateInfo.newState ? stateMap[_curState].promote.fn : stateMap[_curState].demote.fn;

                        curStateChangeFn.apply(null, curStateInfo.args);
                        _curState = curStateInfo.newState;
                        _stateQueue.pop();
                        for (var i = 0; i < curStateInfo.callbacks.length; i++) {
                            curStateInfo.callbacks[i]();
                        }
                    }
                }
                function MergeState(newState, fnStateTransitionComplete, optArgs) {
                    for (var i = 0; i < _stateQueue.length; i++) {
                        if (_stateQueue[i] == newState) {
                            if (fnStateTransitionComplete != null) {
                                _stateQueue[i].callbacks.push(fnStateTransitionComplete);
                            }
                            Sys.Debug.assert(!stateMap[newState].bArgsRequired || optArgs == null);
                            if (optArgs != null) {
                                _stateQueue[i].args = optArgs;
                            }
                            return;
                        }
                    }
                    if (fnStateTransitionComplete != null) {
                        fnStateTransitionComplete();
                    }
                }
            };
            this.GetCurrentEndingState = function() {
                return _stateQueue.length > 0 ? _stateQueue[0].newState : _curState;
            };
        }
        function GetCurrentTdRect() {
            var tdCoord = _curTd.parentNode != null ? _curGridPane.GetTdCoordsRelativeToParentNode(_curTd) : null;

            return tdCoord != null ? {
                x: tdCoord.left,
                y: tdCoord.top,
                width: tdCoord.width,
                height: tdCoord.height
            } : null;
        }
        function GetCurrentViewportCoord() {
            return _curGridPane.GetTableViewportRelativeToParentNode();
        }
        function GetExpandSpace(tdRect, paneRect) {
            return {
                top: tdRect.y - paneRect.top,
                right: paneRect.right - tdRect.x - tdRect.width,
                bottom: paneRect.bottom - tdRect.y - tdRect.height,
                left: tdRect.x - paneRect.left
            };
        }
        function ApplyUserUpdatedValue() {
            var r;
            var haveNewLocalizedValue = HaveNewLocalizedValue();
            var haveNewDataValue = HaveNewDataValue();

            if (haveNewLocalizedValue || haveNewDataValue) {
                var newProp;

                if (haveNewLocalizedValue && haveNewDataValue) {
                    newProp = SP.JsGrid.CreateValidatedPropertyUpdate(_curRecord.key(), _curField.key, _userUpdatedValue.data, _userUpdatedValue.localized);
                }
                else {
                    newProp = SP.JsGrid.CreateUnvalidatedPropertyUpdate(_curRecord.key(), _curField.key, haveNewLocalizedValue ? _userUpdatedValue.localized : _userUpdatedValue.data, haveNewLocalizedValue);
                }
                _userUpdatedValue = {};
                r = fnUpdateProperties([newProp], "User Edit", null, function(ck) {
                    _lastChangeKey = ck;
                });
                RecalculateWidgets();
                UpdateOriginalValue(GetValueFromRecord());
            }
            else {
                _userUpdatedValue = {};
            }
            return r;
        }
        function HaveNewLocalizedValue() {
            var haveNewLocalizedValue = false;

            if (_originalValue.localized != SP.JsGrid.EmptyValue && 'localized' in _userUpdatedValue) {
                var originalLocalizedValue = _originalValue.localized != null ? _originalValue.localized : '';

                haveNewLocalizedValue = originalLocalizedValue != _userUpdatedValue.localized;
            }
            return haveNewLocalizedValue;
        }
        function HaveNewDataValue() {
            var haveNewDataValue = false;

            if (_originalValue.data != SP.JsGrid.EmptyValue && 'data' in _userUpdatedValue) {
                haveNewDataValue = !_curField.CompareSingleDataEqual(_userUpdatedValue.data, _originalValue.data);
            }
            return haveNewDataValue;
        }
        function RecalculateWidgets() {
            if (_curState >= StateType.Bound) {
                var bErrorWidgetPresent = _curWidgetControlsAPI.length > 0 && _curWidgetControlsAPI[0].name == SP.JsGrid.ErrorWidgetId;

                if (bErrorWidgetPresent && !errorMgr.CellHasError(_curRecord.key(), _curField.key)) {
                    var errorWidgetAPI = _curWidgetControlsAPI[0];

                    if (errorWidgetAPI.name == _expandedWidgetName) {
                        CollapseWidget(errorWidgetAPI.name);
                    }
                    errorWidgetAPI.actor.Unbind();
                    _curWidgetControlsAPI.splice(0, 1);
                    if (LayoutWidgets()) {
                        _widgetIcons[errorWidgetAPI.name].style.visibility = 'hidden';
                    }
                }
                else if (!bErrorWidgetPresent) {
                    if (TryAddErrorWidget(_curRecord.key(), _curField.key)) {
                        var errorWidgetAPI = _actorRegistrationManager.GetWidgetControlAPI(SP.JsGrid.ErrorWidgetId);

                        errorWidgetAPI.SetCellInfo();
                        errorWidgetAPI.actor.BindToCell(errorWidgetAPI.GetCellContext());
                        LayoutWidgets();
                    }
                }
            }
        }
        function UpdateOriginalValue(newValue) {
            _originalValue = newValue;
            _curEditControlAPI.UpdateOriginalValue(newValue);
            for (var idx in _curWidgetControlsAPI) {
                _curWidgetControlsAPI[idx].UpdateOriginalValue(newValue);
            }
        }
        function CreateWidgetDock() {
            var r = document.createElement('div');

            r.className = 'jsgrid-widget-dock';
            r.style.display = 'none';
            actorsParentNode.appendChild(r);
            _fnDisposeWidgetDockHandlers = SP.Internal.DomElement.SetMouseHover(r, HighlightBorder, ClearHighlightedWidgets, HighlightWidgets);
            $addHandler(r, 'click', OnClickWidgetDock);
            $addHandler(r, 'mousedown', OnMouseDownWidgetDock);
            return r;
        }
        function OnClickWidgetDock(eventInfo) {
            if (eventInfo.button == Sys.UI.MouseButton.leftButton) {
                var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);

                for (var i = 0; i < _curWidgetControlsAPI.length; i++) {
                    var icon = _widgetIcons[_curWidgetControlsAPI[i].name];

                    if (SP.Internal.DomElement.PointInDomElem(mouseLoc.x, mouseLoc.y, icon)) {
                        SP.Internal.DomElement.StopEvent(eventInfo);
                        if (_expandedWidgetName != _curWidgetControlsAPI[i].name) {
                            ExpandWidgetInternal(_curWidgetControlsAPI[i].actor);
                        }
                        else {
                            CollapseWidget(_expandedWidgetName);
                        }
                        break;
                    }
                }
            }
        }
        function OnMouseDownWidgetDock(eventInfo) {
            eventInfo.stopPropagation();
        }
        function HighlightBorder() {
            _widgetDock.style.borderColor = objBag.styleMgr.widgetDockHoverStyle.borderColor != null ? objBag.styleMgr.widgetDockHoverStyle.borderColor : '#768290';
        }
        function ClearHighlightedWidgets() {
            if (_expandedWidgetName == null) {
                _widgetDock.style.borderColor = objBag.styleMgr.widgetDockStyle.borderColor != null ? objBag.styleMgr.widgetDockStyle.borderColor : '';
            }
            for (var i = 0; i < _curWidgetControlsAPI.length; i++) {
                var curIcon = [];

                if (_curWidgetControlsAPI[i].name != _expandedWidgetName) {
                    _widgetIcons[_curWidgetControlsAPI[i].name].style.backgroundColor = objBag.styleMgr.widgetDockStyle.backgroundColor != null ? objBag.styleMgr.widgetDockStyle.backgroundColor : '';
                }
            }
            _highlightedWidgetName = null;
        }
        function HighlightWidgets(eventInfo) {
            var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);

            for (var i = 0; i < _curWidgetControlsAPI.length; i++) {
                var icon = _widgetIcons[_curWidgetControlsAPI[i].name];

                if (SP.Internal.DomElement.PointInDomElem(mouseLoc.x, mouseLoc.y, icon)) {
                    if (_highlightedWidgetName != _curWidgetControlsAPI[i].name) {
                        if (_highlightedWidgetName != null && _highlightedWidgetName != _expandedWidgetName) {
                            _widgetIcons[_highlightedWidgetName].style.backgroundColor = objBag.styleMgr.widgetDockStyle.backgroundColor != null ? objBag.styleMgr.widgetDockStyle.backgroundColor : '';
                        }
                        _highlightedWidgetName = _curWidgetControlsAPI[i].name;
                        if (_curWidgetControlsAPI[i].name != _expandedWidgetName) {
                            icon.style.backgroundColor = objBag.styleMgr.widgetDockHoverStyle.backgroundColor != null ? objBag.styleMgr.widgetDockHoverStyle.backgroundColor : '#C4C9CF';
                        }
                    }
                    break;
                }
            }
        }
        function LayoutWidgets() {
            if (_curTdRect != null && _curPaneRect != null) {
                var focusRect = _curTdRect;
                var paneRect = _curPaneRect;

                if (_curWidgetControlsAPI.length > 0) {
                    var buffer = 5;
                    var iconWidth = 20;
                    var dockHeight = 22;
                    var dockWidth = iconWidth * _curWidgetControlsAPI.length;
                    var shouldFlipLayout = objBag.RTL.bEnabled ? focusRect.x - (dockWidth + 2) >= paneRect.left : focusRect.x + focusRect.width + buffer + (dockWidth + 2) > paneRect.right;
                    var dockTop = focusRect.y + Math.floor((focusRect.height - dockHeight) / 2);
                    var dockLeft = shouldFlipLayout ? focusRect.x - (dockWidth + 2 + buffer) : focusRect.x + buffer + focusRect.width;

                    for (var i = 0; i < _curWidgetControlsAPI.length; i++) {
                        var curIcon = _widgetIcons[_curWidgetControlsAPI[i].name];

                        curIcon.style.left = i * iconWidth + 'px';
                        curIcon.style.visibility = '';
                    }
                    _widgetDock.style.top = dockTop + 'px';
                    _widgetDock.style.left = dockLeft + 'px';
                    _widgetDock.style.width = dockWidth + 'px';
                    _widgetDock.style.display = 'block';
                }
                else {
                    _widgetDock.style.display = 'none';
                }
                return true;
            }
            else {
                return false;
            }
        }
        function GetValueFromRecord() {
            return fnGetCellValue(_curRecord, _curField.key, _curPropType);
        }
        function TryAddErrorWidget(recordKey, fieldKey) {
            var r = false;

            if (errorMgr.CellHasError(recordKey, fieldKey)) {
                _curWidgetControlsAPI.unshift(_actorRegistrationManager.RegisterWidgetControl(SP.JsGrid.ErrorWidgetId));
                r = true;
            }
            return r;
        }
        function ExpandActor(actorAPI) {
            if (_actorRegistrationManager.IsActorWidget(actorAPI.name)) {
                return ExpandWidgetInternal(actorAPI.actor);
            }
            else {
                return ExpandControlInternal(actorAPI.actor);
            }
        }
        function PrepareForExpandWidget(widgetName) {
            _valueBeforeWidgetEdit = _updatedValue;
            CollapseAll(widgetName);
            if (_expandedWidgetName != null && _expandedWidgetName != widgetName) {
                _widgetIcons[_expandedWidgetName].style.backgroundColor = '';
            }
            _widgetIcons[widgetName].style.backgroundColor = objBag.styleMgr.widgetDockPressedStyle.backgroundColor != null ? objBag.styleMgr.widgetDockPressedStyle.backgroundColor : '#8C8F93';
            if (objBag.styleMgr.widgetDockPressedStyle.borderColor != null) {
                _widgetIcons[widgetName].style.borderColor = objBag.styleMgr.widgetDockPressedStyle.borderColor;
            }
            _expandedWidgetName = (_lastExpandedActorName = widgetName);
        }
        function CollapseWidget(widgetName) {
            ClearExpandedWidget(widgetName);
            (_actorRegistrationManager.GetWidgetControlAPI(widgetName)).actor.Collapse();
        }
        function ClearExpandedWidget(widgetName) {
            if (widgetName == _expandedWidgetName) {
                _widgetIcons[widgetName].style.backgroundColor = objBag.styleMgr.widgetDockStyle.backgroundColor != null ? objBag.styleMgr.widgetDockStyle.backgroundColor : '';
                if (objBag.styleMgr.widgetDockStyle.borderColor != null) {
                    _widgetIcons[widgetName].style.borderColor = objBag.styleMgr.widgetDockStyle.borderColor;
                }
                _expandedWidgetName = null;
            }
        }
        function ExpandWidgetInternal(widget) {
            if (widget.Expand != null) {
                widget.Expand();
                return true;
            }
            return false;
        }
        function PrepareForExpandControl(controlName) {
            CollapseAll(controlName);
            _lastExpandedActorName = controlName;
        }
        function ExpandControlInternal(control) {
            if (control.Expand != null) {
                control.Expand();
                return true;
            }
            return false;
        }
        function CollapseAll(optSkipActorName) {
            for (var i = 0; i < _curWidgetControlsAPI.length; i++) {
                if (_curWidgetControlsAPI[i].name != optSkipActorName) {
                    CollapseWidget(_curWidgetControlsAPI[i].name);
                }
            }
            if (_curEditControlAPI.actor.Collapse != null) {
                if (_curEditControlAPI.name != optSkipActorName) {
                    _curEditControlAPI.actor.Collapse();
                }
            }
        }
        function SetCurrentValueInternal(value, sourceType, actorName) {
            _userUpdatedValue = {};
            if ('localized' in value && value.localized != SP.JsGrid.EmptyValue) {
                _updatedValue.localized = value.localized;
                if (sourceType == SP.JsGrid.EditActorUpdateType.Uncommitted) {
                    _userUpdatedValue.localized = value.localized;
                }
            }
            if ('data' in value && value.data != SP.JsGrid.EmptyValue) {
                _updatedValue.data = value.data;
                if (sourceType == SP.JsGrid.EditActorUpdateType.Uncommitted) {
                    _userUpdatedValue.data = value.data;
                }
            }
            for (var i = 0; i < _curActorsAPI.length; i++) {
                if (actorName != _curActorsAPI[i].name) {
                    _curActorsAPI[i].actor.OnValueChanged(_updatedValue, sourceType);
                }
            }
        }
        function OnActivateActorInternal(actorName) {
            TrackActiveActor(true, actorName);
        }
        function OnDeactivateActorInternal(actorName) {
            setTimeout(function() {
                TrackActiveActor(false, actorName);
            }, 0);
        }
        function TrackActiveActor(bActivated, actorName) {
            if (!bActivated && _curActiveActorName != null && actorName == _curActiveActorName) {
                _this.StopEditing(false);
            }
            else if (bActivated) {
                _curActiveActorName = actorName;
            }
        }
        this.Unbind = function(fnContinue) {
            _stateTransitionManager.HandleStateTransition(StateType.Inited, true, fnContinue);
        };
        this.StopEditing = function(bCancel) {
            var activeActorEditManagerAPI = _actorRegistrationManager.GetActorAPI(_curActiveActorName) || _curEditControlAPI;

            if (activeActorEditManagerAPI != null) {
                activeActorEditManagerAPI.NotifyEditComplete(bCancel);
            }
        };
        this.BindToCell = function(gridPane, record, column, fieldKey, gridFieldMap, optCellInfo, optCellStyle, fnContinue) {
            _stateTransitionManager.HandleStateTransition(StateType.Bound, false, fnContinue, [gridPane, record, column, fieldKey, gridFieldMap, optCellInfo, optCellStyle]);
        };
        this.BeginEdit = function(eventInfo, fnContinue) {
            _isInQuickEditMode = eventInfo.type == 'keypress';
            _stateTransitionManager.HandleStateTransition(StateType.Editing, false, fnContinue, [eventInfo]);
        };
        this.IsBoundToCell = function(gridPane, recordKey, fieldKey) {
            return _curState >= StateType.Bound && _curGridPane == gridPane && _curRecord.key() == recordKey && _curField.key == fieldKey;
        };
        this.IsBound = function() {
            return _curState >= StateType.Bound;
        };
        this.IsEditing = function() {
            return _curState >= StateType.Editing;
        };
        this.NotifyMove = function(optGridPane) {
            if (optGridPane != null && optGridPane != _curGridPane) {
                return;
            }
            if (_curState >= StateType.Bound) {
                var cellInfo = _curGridPane.GetFocusedCell();
                var td = cellInfo && cellInfo.GetTd();

                if (td != null && _curTd != null && _curRecord.key() == cellInfo.GetRecordKey() && _curField.key == cellInfo.GetFieldKey()) {
                    _curTd = td;
                    _curTdRect = GetCurrentTdRect();
                    if (_curTdRect != null) {
                        _curPaneRect = GetCurrentViewportCoord();
                        _curExpandSpace = GetExpandSpace(_curTdRect, _curPaneRect);
                        _curEditControlAPI.SetCellInfo();
                        _curEditControlAPI.actor.OnCellMove();
                        for (var i = 0; i < _curWidgetControlsAPI.length; i++) {
                            CollapseWidget(_curWidgetControlsAPI[i].name);
                            _curWidgetControlsAPI[i].SetCellInfo();
                        }
                        LayoutWidgets();
                    }
                }
                else if (td == null && _curTd != null) {
                    _this.Unbind();
                }
            }
        };
        this.NotifyUpdateProperty = function(gridPane, recordKey, fieldKey, propUpdate, changeKey) {
            if (this.IsBoundToCell(gridPane, recordKey, fieldKey)) {
                var value = {};

                if (propUpdate.HasDataValue()) {
                    value.data = propUpdate.data;
                }
                if (propUpdate.HasLocalizedValue()) {
                    value.localized = propUpdate.localized;
                }
                UpdateOriginalValue(value);
                if (_lastChangeKey == null || changeKey != null && changeKey.CompareTo(_lastChangeKey) != 0) {
                    SetCurrentValueInternal(value, SP.JsGrid.EditActorUpdateType.Committed, null);
                }
            }
        };
        this.ExpandWidget = function(widgetName) {
            var idx = SP.Internal.JS.FindInArray(_curWidgetControlsAPI, function(widgetAPI) {
                return widgetAPI.name == widgetName;
            });

            if (idx != null) {
                ExpandWidgetInternal(_curWidgetControlsAPI[idx].actor);
            }
        };
        this.ExpandNextActor = function() {
            function GetActorAPIToExpand(bNext) {
                if (_curActorsAPI.length == 0 || _curActorsAPI[0].actor.Expand == null && _curActorsAPI.length == 1)
                    return null;
                var result;
                var firstExpandableActorIdx = _curActorsAPI[0].actor.Expand != null ? 0 : 1;

                if (_lastExpandedActorName == null) {
                    result = _curActorsAPI[firstExpandableActorIdx];
                }
                else {
                    for (var i = firstExpandableActorIdx; i < _curActorsAPI.length; i++) {
                        if (_curActorsAPI[i].name == _lastExpandedActorName) {
                            result = bNext ? i == _curActorsAPI.length - 1 ? _curActorsAPI[firstExpandableActorIdx] : _curActorsAPI[i + 1] : i == firstExpandableActorIdx ? _curActorsAPI[_curActorsAPI.length - 1] : _curActorsAPI[i - 1];
                            break;
                        }
                    }
                }
                return result;
            }
            if (_curState >= StateType.Bound && (_curEditControlAPI.actor.Expand != null || _curWidgetControlsAPI.length)) {
                var actorAPIToExpand = GetActorAPIToExpand(true);

                Sys.Debug.assert(actorAPIToExpand != null && actorAPIToExpand.actor.Expand != null);
                return ExpandActor(actorAPIToExpand);
            }
            return false;
        };
        this.NotifyExpandWidget = function(actorName) {
            OnActivateActorInternal(actorName);
            PrepareForExpandWidget(actorName);
        };
        this.NotifyCollapseWidget = function(actorName) {
            OnDeactivateActorInternal(actorName);
            ClearExpandedWidget(actorName);
        };
        this.NotifyWidgetEditCancel = function(actorName) {
            _updatedValue = _valueBeforeWidgetEdit;
            _curActiveActorName = null;
            CollapseWidget(actorName);
            if (this.IsEditing()) {
                _curEditControlAPI.actor.Focus();
            }
            else {
                objBag.focusMgr.Focus();
            }
        };
        this.NotifyExpandControl = function(actorName) {
            PrepareForExpandControl(actorName);
        };
        this.SetCurrentValue = function(actorName, value) {
            SetCurrentValueInternal(value, SP.JsGrid.EditActorUpdateType.Uncommitted, actorName);
        };
        this.OnActorKeyDown = function(eventInfo, actorName) {
            Sys.Debug.assert(_curState >= StateType.Bound);
            if (!HandleKey(eventInfo)) {
                if (_curState == StateType.Bound && actorName == _curEditControlAPI.name) {
                    _this.BeginEdit(eventInfo);
                }
                else {
                    var keyH = false;
                    var actorAPI = actorName == _curEditControlAPI.name ? _curEditControlAPI : _actorRegistrationManager.GetWidgetControlAPI(actorName);

                    if (actorAPI.actor.OnKeyDown != null) {
                        keyH = actorAPI.actor.OnKeyDown(eventInfo);
                    }
                    var gridShouldHandleKey = _isInQuickEditMode || actorAPI.IsLightFocus();

                    if (!keyH && gridShouldHandleKey) {
                        if (objBag.focusMgr.HandleKeyDown(eventInfo, true)) {
                            if (_curActiveActorName != null && _curActiveActorName == actorName) {
                                _this.StopEditing(false);
                            }
                        }
                    }
                }
            }
            else {
                SP.Internal.DomElement.StopEvent(eventInfo);
            }
            function HandleKey() {
                var r = false;

                if (eventInfo.keyCode == Sys.UI.Key.tab || eventInfo.keyCode == Sys.UI.Key.enter) {
                    _this.StopEditing(false);
                    objBag.focusMgr.HandleKeyDown(eventInfo);
                    r = true;
                }
                else if (eventInfo.keyCode == Sys.UI.Key.esc) {
                    _this.StopEditing(true);
                    r = true;
                }
                return r;
            }
        };
        this.GetCurrentEditControlName = function() {
            return _curEditControlAPI.name;
        };
        this.IsCurrentEditControlUsingGridTextInputElement = function() {
            return _curEditControlAPI.actor.IsCurrentlyUsingGridTextInputElement();
        };
        this.Dispose = function() {
            this.Unbind(function() {
                _actorRegistrationManager.Dispose();
                if (_fnDisposeWidgetDockHandlers != null) {
                    _fnDisposeWidgetDockHandlers();
                }
                $clearHandlers(_widgetDock);
                _widgetDock.innerHTML = '';
                _widgetDock = null;
            });
        };
    };
    SP.JsGrid.Internal.ErrorType = {
        Row: 1,
        Cell: 2
    };
    SP.JsGrid.Internal.RecordErrorCollection = function(key) {
        function ErrorInfoCollection() {
            this._errors = [];
        }
        ErrorInfoCollection.prototype = {
            AddError: function(id, message) {
                this._errors.unshift({
                    id: id,
                    msg: message
                });
            },
            RemoveError: function(id) {
                var idx = SP.Internal.JS.FindInArray(this._errors, function(errInfo) {
                    return id == errInfo.id;
                });

                if (idx != null) {
                    this._errors.splice(idx, 1);
                    return true;
                }
                return false;
            },
            AnyErrors: function() {
                return this._errors.length != 0;
            },
            GetTopMessage: function() {
                return this._errors.length > 0 ? this._errors[0].msg : null;
            },
            GetTopId: function() {
                return this._errors.length > 0 ? this._errors[0].id : null;
            },
            GetMinError: function(fnFilter) {
                var r = null;

                for (var i = this._errors.length - 1; i >= 0; i--) {
                    var curError = this._errors[i];

                    if (fnFilter == null || fnFilter(curError.id)) {
                        r = {
                            message: curError.msg,
                            id: curError.id
                        };
                    }
                }
                return r;
            },
            ContainsError: function(id) {
                return SP.Internal.JS.FindInArray(this._errors, function(errInfo) {
                    return id == errInfo.id;
                }) != null;
            }
        };
        var _rowErrs = new ErrorInfoCollection();
        var _cellErrs = {};

        this.AddRowError = function(id, message) {
            _rowErrs.AddError(id, message);
        };
        this.AddCellError = function(fieldKey, id, message) {
            if (!(fieldKey in _cellErrs)) {
                _cellErrs[fieldKey] = new ErrorInfoCollection();
            }
            _cellErrs[fieldKey].AddError(id, message);
        };
        this.ClearRowError = function(id) {
            return _rowErrs.RemoveError(id);
        };
        this.ClearCellError = function(fieldKey, id) {
            if (fieldKey in _cellErrs && _cellErrs[fieldKey].RemoveError(id)) {
                if (!_cellErrs[fieldKey].AnyErrors()) {
                    delete _cellErrs[fieldKey];
                }
                return true;
            }
            return false;
        };
        this.ClearAllErrorsOnCell = function(fieldKey) {
            if (fieldKey in _cellErrs) {
                delete _cellErrs[fieldKey];
            }
        };
        this.ClearAllErrorsOnRow = function() {
            _rowErrs = new ErrorInfoCollection();
        };
        this.AnyErrors = function() {
            return _rowErrs.AnyErrors() || !SP.Internal.JS.IsAssocArrayEmpty(_cellErrs);
        };
        this.AnyErrorsOnCell = function(fieldKey) {
            return fieldKey in _cellErrs && _cellErrs[fieldKey].AnyErrors();
        };
        this.AnyErrorsOnRow = function() {
            return _rowErrs.AnyErrors();
        };
        this.GetMessageForCell = function(fieldKey) {
            return fieldKey in _cellErrs ? _cellErrs[fieldKey].GetTopMessage(fieldKey) : null;
        };
        this.GetMessageForRow = function() {
            return _rowErrs.GetTopMessage();
        };
        this.GetIdForCell = function(fieldKey) {
            return fieldKey in _cellErrs ? _cellErrs[fieldKey].GetTopId() : null;
        };
        this.GetIdForRow = function() {
            return _rowErrs.GetTopId();
        };
        this.GetMinError = function(fnFilter, bIgnoreRowErrors) {
            var r = _rowErrs.GetMinError(fnFilter != null ? function(id) {
                return fnFilter(key, null, id);
            } : null);

            if (r != null) {
                r.type = SP.JsGrid.Internal.ErrorType.Row;
            }
            for (var fieldKey in _cellErrs) {
                var minForRec = _cellErrs[fieldKey].GetMinError(fnFilter != null ? function(id) {
                    return fnFilter(key, fieldKey, id);
                } : null);

                if (minForRec != null && (r == null || minForRec.id < r.id)) {
                    r = minForRec;
                    r.fieldKey = fieldKey;
                    r.type = SP.JsGrid.Internal.ErrorType.Cell;
                }
            }
            return r;
        };
    };
    SP.JsGrid.Internal.ErrorManager = function(objBag) {
        var _curId = 0;
        var _errors = {};
        var _focusedError = null;
        var _this = this;
        var _currentlyDeletedRecords = new SP.Utilities.Set();

        objBag.intEventMgr.AttachEvent(SP.JsGrid.Internal.EventType.OnBeforeRecordInserted, OnRecordInserted);
        objBag.intEventMgr.AttachEvent(SP.JsGrid.Internal.EventType.OnBeforeRecordDeleted, OnRecordDeleted);
        this.SetRowError = function(recordKey, message) {
            var anyExistingErrors = this.AnyErrors();

            if (_errors[recordKey] == null) {
                _errors[recordKey] = new SP.JsGrid.Internal.RecordErrorCollection(recordKey);
            }
            var id = _curId++;

            message = message != null ? message : SP.JsGrid.Res.defaultRowMessage;
            var anyExistingRowErrors = anyExistingErrors && _errors[recordKey].AnyErrorsOnRow();

            _errors[recordKey].AddRowError(id, message);
            objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRowErrorStateChanged, new SP.JsGrid.EventArgs.OnRowErrorStateChanged(recordKey, true, true, anyExistingRowErrors, id, message));
            if (!anyExistingErrors) {
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnGridErrorStateChanged, new SP.JsGrid.EventArgs.GridErrorStateChanged(true));
            }
            return id;
        };
        this.ClearRowError = function(recordKey, id) {
            if (_errors[recordKey] != null && _errors[recordKey].ClearRowError(id)) {
                TryCleanUpRecord(recordKey);
                var anyErrors = recordKey in _errors && _errors[recordKey].AnyErrorsOnRow();

                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRowErrorStateChanged, new SP.JsGrid.EventArgs.OnRowErrorStateChanged(recordKey, false, anyErrors, true, id));
                if (!this.AnyErrors()) {
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnGridErrorStateChanged, new SP.JsGrid.EventArgs.GridErrorStateChanged(false));
                }
                return true;
            }
            return false;
        };
        this.SetCellError = function(recordKey, fieldKey, message) {
            var anyExistingErrors = this.AnyErrors();

            if (_errors[recordKey] == null) {
                _errors[recordKey] = new SP.JsGrid.Internal.RecordErrorCollection(recordKey);
            }
            var anyExistingCellErrors = _errors[recordKey].AnyErrorsOnCell(fieldKey);
            var id = _curId++;

            _errors[recordKey].AddCellError(fieldKey, id, message);
            objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnCellErrorStateChanged, new SP.JsGrid.EventArgs.OnCellErrorStateChanged(recordKey, fieldKey, true, true, anyExistingCellErrors, id));
            if (!anyExistingErrors) {
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnGridErrorStateChanged, new SP.JsGrid.EventArgs.GridErrorStateChanged(true));
            }
            return id;
        };
        this.ClearCellError = function(recordKey, fieldKey, id) {
            if (_errors[recordKey] != null && _errors[recordKey].ClearCellError(fieldKey, id)) {
                TryCleanUpRecord(recordKey);
                var bAnyErrors = recordKey in _errors && _errors[recordKey].AnyErrorsOnCell(fieldKey);

                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnCellErrorStateChanged, new SP.JsGrid.EventArgs.OnCellErrorStateChanged(recordKey, fieldKey, false, bAnyErrors, true, id));
                if (!this.AnyErrors()) {
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnGridErrorStateChanged, new SP.JsGrid.EventArgs.GridErrorStateChanged(false));
                }
                return true;
            }
            return false;
        };
        this.ClearAllErrorsOnRow = function(recordKey) {
            var r = false;

            if (recordKey in _errors) {
                r = true;
                _errors[recordKey].ClearAllErrorsOnRow();
                TryCleanUpRecord(recordKey);
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRowErrorStateChanged, new SP.JsGrid.EventArgs.OnRowErrorStateChanged(recordKey, false, false, -1));
                if (!this.AnyErrors()) {
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnGridErrorStateChanged, new SP.JsGrid.EventArgs.GridErrorStateChanged(false));
                }
            }
            return r;
        };
        this.ClearAllErrorsOnCell = function(recordKey, fieldKey) {
            var r = false;

            if (recordKey in _errors && _errors[recordKey].AnyErrorsOnCell(fieldKey)) {
                r = true;
                var id = _errors[recordKey].GetIdForCell(fieldKey);

                _errors[recordKey].ClearAllErrorsOnCell(fieldKey);
                TryCleanUpRecord(recordKey);
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnCellErrorStateChanged, new SP.JsGrid.EventArgs.OnCellErrorStateChanged(recordKey, fieldKey, false, false, id));
                if (!this.AnyErrors()) {
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnGridErrorStateChanged, new SP.JsGrid.EventArgs.GridErrorStateChanged(false));
                }
            }
            return r;
        };
        this.CellHasError = function(recordKey, fieldKey) {
            return recordKey in _errors && !_currentlyDeletedRecords.Contains(recordKey) && _errors[recordKey].AnyErrorsOnCell(fieldKey);
        };
        this.GetMessageForCell = function(recordKey, fieldKey) {
            return recordKey in _errors && !_currentlyDeletedRecords.Contains(recordKey) ? _errors[recordKey].GetMessageForCell(fieldKey) : null;
        };
        this.GetMessageForRow = function(recordKey) {
            return recordKey in _errors && !_currentlyDeletedRecords.Contains(recordKey) ? _errors[recordKey].GetMessageForRow() : null;
        };
        this.AnyErrors = function() {
            var r = false;

            for (var recKey in _errors) {
                if (!_currentlyDeletedRecords.Contains(recKey)) {
                    r = true;
                    break;
                }
            }
            return r;
        };
        this.AnyErrorsInRow = function(recordKey) {
            return recordKey in _errors && !_currentlyDeletedRecords.Contains(recordKey) && _errors[recordKey].AnyErrors();
        };
        this.GetNextError = function(minId, fnFilter) {
            var r = null;

            if (this.AnyErrors()) {
                if (minId != null && minId < _curId) {
                    r = GetMinError(function(recordKey, fieldKey, id) {
                        return id > minId && (fnFilter == null || fnFilter(recordKey, fieldKey, id));
                    });
                }
                if (r == null) {
                    r = GetMinError(fnFilter);
                }
            }
            return r;
        };
        this.GetNextErrorForRecord = function(minId, recordKey, fnFilter) {
            var r = null;

            if (recordKey in _errors && !_currentlyDeletedRecords.Contains(recordKey)) {
                if (minId != null && minId < _curId) {
                    r = _errors[recordKey].GetMinError(function(recordKey, fieldKey, id) {
                        return id > minId && (fnFilter == null || fnFilter(recordKey, fieldKey, id));
                    });
                }
                if (r == null) {
                    r = _errors[recordKey].GetMinError(fnFilter);
                }
                if (r != null) {
                    r.recordKey = recordKey;
                }
            }
            return r;
        };
        this.ChangeKeys = function(oldKey, newKey) {
            if (_currentlyDeletedRecords.Contains(oldKey)) {
                _currentlyDeletedRecords.Remove(oldKey);
                _currentlyDeletedRecords.Add(newKey);
            }
            if (oldKey in _errors) {
                _errors[newKey] = _errors[oldKey];
                delete _errors[oldKey];
            }
        };
        function GetMinError(fnFilter) {
            var r = null;

            for (var recordKey in _errors) {
                var minForRec = _errors[recordKey].GetMinError(fnFilter);

                if (minForRec != null && (r == null || minForRec.id < r.id)) {
                    r = minForRec;
                    r.recordKey = recordKey;
                }
            }
            return r;
        }
        function OnRecordInserted(args) {
            var bAnyErrors = _this.AnyErrors();

            _currentlyDeletedRecords.Remove(args.recordKey);
            if (!bAnyErrors && _this.AnyErrors()) {
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnGridErrorStateChanged, new SP.JsGrid.EventArgs.GridErrorStateChanged(true));
            }
        }
        function OnRecordDeleted(args) {
            var bAnyErrors = _this.AnyErrors();

            _currentlyDeletedRecords.Add(args.recordKey);
            if (bAnyErrors && !_this.AnyErrors()) {
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnGridErrorStateChanged, new SP.JsGrid.EventArgs.GridErrorStateChanged(false));
            }
        }
        function TryCleanUpRecord(key) {
            if (!_errors[key].AnyErrors()) {
                delete _errors[key];
            }
        }
    };
    SP.JsGrid.Internal.ErrorNotificationManager = (function() {
        var _notificationId = null;
        var _objBag;
        var _id;
        var _lastExpandedId = null;

        function NotifyError(args) {
            if (args.bAnyErrors && _notificationId == null) {
                _notificationId = addNotification('<div class="jsgrid-error-notification" style="cursor:pointer" onclick="' + (_id + '_onclick()') + '" >' + String.format(SP.JsGrid.Res.gridErrorNotification, _objBag.jsGridObj.name) + '</div>', true);
            }
            else if (!args.bAnyErrors && _notificationId != null) {
                removeNotification(_notificationId);
                _notificationId = null;
            }
        }
        return {
            Init: function(id, objBag) {
                _objBag = objBag;
                _objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnGridErrorStateChanged, NotifyError);
                _id = id;
                window[_id + '_onclick'] = function() {
                    _lastExpandedId = _objBag.jsGridObj.ScrollToAndExpandNextError(_lastExpandedId);
                };
            }
        };
    })();
    SP.JsGrid.GridField = function(key, hasDataValue, hasLocalizedValue, textDirection, defaultCellStyleId, editMode, dateOnly, csrInfo) {
        this.key = key;
        this.hasDataValue = hasDataValue;
        this.hasLocalizedValue = hasLocalizedValue;
        this.textDirection = textDirection;
        this._defaultCellStyleId = defaultCellStyleId;
        this._editMode = editMode == null ? SP.JsGrid.EditMode.Defer : editMode;
        this._propType = null;
        this._multiValue = false;
        this.dateOnly = dateOnly == null ? true : dateOnly;
        this.csrInfo = csrInfo;
    };
    SP.JsGrid.GridField.prototype = {
        GetEditMode: function() {
            return this._editMode;
        },
        SetEditMode: function(editMode) {
            this._editMode = editMode;
        },
        GetDefaultCellStyleId: function() {
            return this._defaultCellStyleId;
        },
        CompareSingleDataEqual: function(dataValue1, dataValue2) {
            var eqFn = (this.GetSingleValuePropType()).IsDataEqual;

            return eqFn == null ? dataValue1 == dataValue2 : eqFn(dataValue1, dataValue2);
        },
        GetPropType: function() {
            return this._propType;
        },
        GetSingleValuePropType: function() {
            return this._multiValue ? this._propType.singleValuePropType : this._propType;
        },
        GetMultiValuePropType: function() {
            return this._multiValue ? this._propType : null;
        },
        SetSingleValuePropType: function(svPropType) {
            if (this._multiValue && svPropType != null) {
                var mvPropType = new SP.JsGrid.PropertyType.MultiValuePropType(svPropType.ID, this._listSeparator);

                SP.JsGrid.PropertyType.RegisterNewDerivedCustomPropType(mvPropType, svPropType.ID);
                this._propType = mvPropType;
            }
            else {
                this._propType = svPropType;
            }
        },
        SetIsMultiValue: function(listSeparator) {
            if (!this._multiValue) {
                this._listSeparator = listSeparator;
                this._multiValue = true;
                this.SetSingleValuePropType(this._propType);
            }
        },
        GetIsMultiValue: function() {
            return this._multiValue;
        }
    };
    SP.JsGrid.ColumnInfo = function(name, imgSrc, key, width) {
        this.name = name;
        this.imgSrc = imgSrc;
        this.columnKey = key;
        this.fieldKeys = [key];
        this.width = width;
        this.bOpenMenuOnContentClick = this.imgSrc != null;
    };
    SP.JsGrid.ColumnInfo.prototype = {
        ColumnType: function() {
            return 'column';
        },
        isVisible: true,
        isHidable: true,
        isResizable: true,
        isSortable: true,
        isAutoFilterable: true,
        isFooter: false,
        bOpenMenuOnContentClick: false,
        fnShouldLinkSingleValue: null,
        fnSingleValueClicked: null,
        fnGetCellEditMode: null,
        fnGetDisplayControlName: null,
        fnGetEditControlName: null,
        fnGetWidgetControlNames: null,
        fnGetCellStyleId: null,
        fnGetSingleValueTooltip: null
    };
    SP.JsGrid.PivotedColumnInfo = function(name, imgSrc, columnKey, fieldKeys, width) {
        this.name = name;
        this.imgSrc = imgSrc;
        this.columnKey = columnKey;
        this.fieldKeys = fieldKeys;
        this.width = width;
    };
    SP.JsGrid.PivotedColumnInfo.prototype = {
        ColumnType: function() {
            return 'pivotedColumn';
        },
        isVisible: true,
        isHidable: false,
        isResizable: false,
        isSortable: false,
        isAutoFilterable: false,
        fnShouldLinkSingleValue: null,
        fnSingleValueClicked: null,
        fnGetCellEditMode: null,
        fnGetDisplayControlName: null,
        fnGetEditControlName: null,
        fnGetWidgetControlNames: null,
        fnGetCellStyleId: null,
        fnGetSingleValueTooltip: null
    };
    SP.JsGrid.ColumnInfoCollection = function(colInfoArray) {
        var colInfoMap = {};

        BuildMap();
        this.GetColumnByKey = function(key) {
            return colInfoMap[key];
        };
        this.GetColumnArray = function(bVisibleOnly) {
            var r = [];

            if (bVisibleOnly) {
                for (var i = 0; i < colInfoArray.length; ++i) {
                    if (colInfoArray[i].isVisible) {
                        r.push(colInfoArray[i]);
                    }
                }
            }
            else {
                r = colInfoArray;
            }
            return r;
        };
        this.GetColumnMap = function() {
            return colInfoMap;
        };
        this.AppendColumn = function(colInfo) {
            this.InsertColumnAt(colInfoArray.length, colInfo);
        };
        this.InsertColumnAt = function(idx, colInfo) {
            colInfoArray.splice(idx, 0, colInfo);
            BuildMap();
        };
        this.RemoveColumn = function(key) {
            var obj = colInfoMap[key];
            var idx = SP.Internal.JS.FindKey(colInfoArray, function(x) {
                return x == obj;
            });

            if (idx != null) {
                colInfoArray.splice(idx, 1);
            }
            BuildMap();
        };
        this.GetColumnPosition = function(key) {
            var pos = 0;

            for (var i = 0; i < colInfoArray.length; ++i) {
                if (colInfoArray[i].isVisible) {
                    if (colInfoArray[i].columnKey == key) {
                        return pos;
                    }
                    pos++;
                }
            }
            return null;
        };
        function BuildMap() {
            for (var i = 0; i < colInfoArray.length; ++i) {
                colInfoMap[colInfoArray[i].columnKey] = colInfoArray[i];
            }
        }
    };
    SP.JsGrid.Internal.FillDownManager = function(intDelegateMgr, styles) {
        var _tableMgr, _selectionMgr, _gridPane, _parentNode;
        var _fillFrame, _finalRange, _bFillHorizVsVert;
        var _mouseDownPos, _selDragHandle, _selDragHandlePos;

        this.OnMouseDown = function(eventInfo, gridPane, parentNode, selDragHandle, tableMgr, selectionMgr) {
            eventInfo.preventDefault();
            _tableMgr = tableMgr;
            _selectionMgr = selectionMgr;
            _gridPane = gridPane;
            _parentNode = parentNode;
            _selDragHandle = selDragHandle;
            _mouseDownPos = SP.Internal.DomElement.GetEventLocation(eventInfo);
            _selDragHandlePos = SP.Internal.DomElement.GetLocation(selDragHandle);
            _finalRange = null;
            _fillFrame = document.createElement('div');
            _fillFrame.style.cssText = 'position:absolute;visibility:hidden;overflow:hidden;top:0px;left:0px';
            _fillFrame.style.border = SP.JsGrid.Style.MakeBorderString(3, 'solid', styles.gridPaneStyle.fillRectBorderColor);
            _parentNode.appendChild(_fillFrame);
            SP.Internal.DomElement.SetCapture(selDragHandle, OnMouseMove, OnMouseUp);
            OnMouseMove(eventInfo);
        };
        function OnMouseMove(eventInfo) {
            var selRanges = _selectionMgr.GetLastSelectionRangeNormalized();
            var ind = _tableMgr.GetRowIdxColIdxFromCoord(eventInfo);

            if (ind.rowIdx == null || ind.colIdx == null) {
                return;
            }
            var mousePos = SP.Internal.DomElement.GetEventLocation(eventInfo);

            if (mousePos.x >= _selDragHandlePos.x && mousePos.x <= _selDragHandlePos.x + _selDragHandle.offsetWidth && (mousePos.y >= _selDragHandlePos.y && mousePos.y <= _selDragHandlePos.y + _selDragHandle.offsetHeight)) {
                return;
            }
            _bFillHorizVsVert = Math.abs(mousePos.x - _mouseDownPos.x) > Math.abs(mousePos.y - _mouseDownPos.y);
            var borderInfo;

            if (_bFillHorizVsVert) {
                _finalRange = new SP.Utilities.Range(Math.min(selRanges.colRange.begin, ind.colIdx), Math.max(selRanges.colRange.end, ind.colIdx));
                borderInfo = _gridPane.GetCellRangeBorderDrawingInfo(selRanges.rowRange, _finalRange);
            }
            else {
                _finalRange = new SP.Utilities.Range(Math.min(selRanges.rowRange.begin, ind.rowIdx), Math.max(selRanges.rowRange.end, ind.rowIdx));
                borderInfo = _gridPane.GetCellRangeBorderDrawingInfo(_finalRange, selRanges.colRange);
            }
            if (borderInfo == null) {
                _fillFrame.style.visibility = 'hidden';
                return;
            }
            _fillFrame.style.left = borderInfo.left - 1 + 'px';
            _fillFrame.style.top = borderInfo.top - 1 + 'px';
            _fillFrame.style.width = borderInfo.width - 2 + 'px';
            _fillFrame.style.height = borderInfo.height - 2 + 'px';
            _fillFrame.style.visibility = '';
            _gridPane.ClipElementToTableViewport(_fillFrame);
        }
        function OnMouseUp(eventInfo) {
            if (_finalRange == null) {
                return;
            }
            var p = ComputeFillParameters();

            Fill(p.repeatOrigin, p.srcRowRange, p.srcColRange, p.destRowRange, p.destColRange, p.trimmedDestRowRange, p.trimmedDestColRange);
            _parentNode.removeChild(_fillFrame);
            _fillFrame = null;
        }
        function ComputeFillParameters() {
            var selRanges = _selectionMgr.GetLastSelectionRangeNormalized();
            var repeatOrigin, srcRowRange, srcColRange, destRowRange, destColRange, trimmedDestRowRange, trimmedDestColRange;

            if (_bFillHorizVsVert) {
                srcRowRange = (destRowRange = (trimmedDestRowRange = selRanges.rowRange));
                destColRange = _finalRange;
                var bLeftVsRight = selRanges.colRange.begin != destColRange.begin;

                repeatOrigin = bLeftVsRight ? 'TR' : 'TL';
                var srcColCount = selRanges.colRange.Size();

                srcColRange = bLeftVsRight ? new SP.Utilities.Range(destColRange.end - srcColCount + 1, destColRange.end) : new SP.Utilities.Range(destColRange.begin, destColRange.begin + srcColCount - 1);
                trimmedDestColRange = bLeftVsRight ? new SP.Utilities.Range(destColRange.begin, destColRange.end - srcColCount) : new SP.Utilities.Range(destColRange.begin + srcColCount, destColRange.end);
            }
            else {
                srcColRange = (destColRange = (trimmedDestColRange = selRanges.colRange));
                destRowRange = _finalRange;
                var bUpVsDown = selRanges.rowRange.begin != destRowRange.begin;

                repeatOrigin = bUpVsDown ? 'BL' : 'TL';
                var srcRowCount = selRanges.rowRange.Size();

                srcRowRange = bUpVsDown ? new SP.Utilities.Range(destRowRange.end - srcRowCount + 1, destRowRange.end) : new SP.Utilities.Range(destRowRange.begin, destRowRange.begin + srcRowCount - 1);
                trimmedDestRowRange = bUpVsDown ? new SP.Utilities.Range(destRowRange.begin, destRowRange.end - srcRowCount) : new SP.Utilities.Range(destRowRange.begin + srcRowCount, destRowRange.end);
            }
            return {
                repeatOrigin: repeatOrigin,
                srcRowRange: srcRowRange,
                srcColRange: srcColRange,
                destRowRange: destRowRange,
                destColRange: destColRange,
                trimmedDestRowRange: trimmedDestRowRange,
                trimmedDestColRange: trimmedDestColRange
            };
        }
        function Fill(repeatOrigin, srcRowRange, srcColRange, destRowRange, destColRange, trimmedDestRowRange, trimmedDestColRange) {
            if (srcRowRange.Size() == destRowRange.Size() && srcColRange.Size() == destColRange.Size()) {
                return;
            }
            var paneConverter = _gridPane.GetGridPaneConverter();
            var recordMap;

            intDelegateMgr.Apply(SP.JsGrid.Internal.DelegateType.CallAsyncFn, function AsyncOp(fnAsyncOpComplete) {
                return recordMap = paneConverter.GetRecordsInvolved(destRowRange.begin, destRowRange.Size(), function(rm) {
                    recordMap = rm;
                    fnAsyncOpComplete();
                });
            }, function AsyncOpComplete() {
                var srcData = _gridPane.GetData(recordMap, srcRowRange, srcColRange);

                _gridPane.PutData(srcData, recordMap, SP.JsGrid.UserAction.Fill, repeatOrigin, trimmedDestRowRange, trimmedDestColRange, OnGetComplete);
                function OnGetComplete() {
                    _selectionMgr.SelectRange(_gridPane, destRowRange.begin, destRowRange.end, destColRange.begin, destColRange.end, SP.JsGrid.Internal.SelectionManager.SelectOp.Set, true, false);
                }
            });
        }
    };
    SP.JsGrid.Internal.FocusManager = function(jsGridElementId, objBag, parentNode, fnGetLocStr, fnIsGridEnabled, fnIsGridVisible, selectionMgr, editMgr, fnGetCellValue, fnRetryErrorRows, fnScrollIntoViewVertically) {
        var _this = this;
        var FocusElementType = {
            anchor: 0,
            input: 1,
            parentNode: 2
        };
        var _focusElementType = FocusElementType.input;
        var _ariaMgr;
        var _focusElement;
        var _outerGridParentNode = parentNode.parentNode;
        var _skippedGridContentElement;
        var _bUseInputFocusElementForTextInput = true;
        var _curFocusedDisplayControlInfo;
        var _paneLayout, _gridPane, _pivotedGridPane, _gridFieldMap;
        var SelectOp = SP.JsGrid.Internal.SelectionManager.SelectOp;

        this.SetView = function(paneLayout, gridPane, pivotedGridPane, gridFieldMap) {
            _paneLayout = paneLayout;
            _gridPane = gridPane;
            _pivotedGridPane = pivotedGridPane;
            _gridFieldMap = gridFieldMap;
            _ariaMgr.NotifyViewChange();
        };
        this.Dispose = function() {
            $clearHandlers(_skippedGridContentElement);
            $removeHandler(_focusElement, 'focus', OnFocus);
            $removeHandler(_focusElement, 'keydown', OnKeyDown);
            $removeHandler(_focusElement, 'keypress', OnKeyPress);
            $removeHandler(_focusElement, 'keyup', OnKeyUp);
            _focusElement = (_skippedGridContentElement = null);
        };
        this.Focus = function() {
            try {
                if (editMgr.IsEditing()) {
                    editMgr.StopEditing(false);
                }
                SetStyleForFocusElementInput(true);
            }
            catch (err) {
                Sys.Debug.assert(false, "The grid cannot be focused because it is hidden. Possible scenario: if the grid was editable, it might have been in edit; call grid.NotifyHide() or hide the grid using the fnContinue of grid.FinalizeEditing(fnContinue, fnError).");
            }
        };
        this.GetFocusElementForTextInput = function(editControlName) {
            if (_bUseInputFocusElementForTextInput && _focusElementType == FocusElementType.input && editControlName == SP.JsGrid.EditControl.Type.EditBox) {
                return _focusElement;
            }
            else {
                return null;
            }
        };
        this.ChangeTextInputElementToFocusElement = function() {
            if (FocusElementIsBeingUsedForTextInput()) {
                _focusElement.blur();
                SetStyleForFocusElementInput();
                return true;
            }
            return false;
        };
        this.HandleKeyDown = function(eventInfo, bInQuickEditMode) {
            var ctrlOnly = eventInfo.ctrlKey && !eventInfo.altKey && !eventInfo.shiftKey;
            var altOnly = !eventInfo.ctrlKey && eventInfo.altKey && !eventInfo.shiftKey;
            var shiftOnly = !eventInfo.ctrlKey && !eventInfo.altKey && eventInfo.shiftKey;
            var altAndShift = !eventInfo.ctrlKey && eventInfo.altKey && eventInfo.shiftKey;
            var ctrlAndShift = eventInfo.ctrlKey && !eventInfo.altKey && eventInfo.shiftKey;
            var noActionKeys = !eventInfo.ctrlKey && !eventInfo.altKey && !eventInfo.shiftKey;
            var focusPos = selectionMgr.GetFocus();

            if (!fnIsGridEnabled() || focusPos == null) {
                return false;
            }
            var gridPane = focusPos.gridPane;
            var paneConverter = gridPane.GetGridPaneConverter();

            if (HandleCellLevelNavigation()) {
                SP.Internal.DomElement.StopEvent(eventInfo);
                return true;
            }
            if (HandleIMEInput()) {
                return true;
            }
            var r = HandleEscape() || HandleShortcuts() || HandleNavigationAndSelection() || HandleInterPaneNavigation();

            if (!r && !bInQuickEditMode) {
                r = HandleCutCopyPaste() || HandleDisplayControlKeyDown();
            }
            if (r) {
                SP.Internal.DomElement.StopEvent(eventInfo);
                return true;
            }
            FireKeyDownEvent();
            return false;
            function FireKeyDownEvent() {
                if (!editMgr.IsEditing() && selectionMgr.IsOneCellSelected(selectionMgr.GetLastSelectionRangeNormalized())) {
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnSingleCellKeyDown, new SP.JsGrid.EventArgs.SingleCellKeyDown(eventInfo, focusPos.recordKey, focusPos.fieldKey));
                }
            }
            function HandleIMEInput() {
                if (eventInfo.keyCode == SP.Internal.Key.IMEInput) {
                    return gridPane.TryBeginEdit(eventInfo);
                }
                return false;
            }
            function HandleEscape() {
                if (eventInfo.keyCode == Sys.UI.Key.esc) {
                    objBag.cutcopypasteMgr.CancelMode();
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnRowEscape, new SP.JsGrid.EventArgs.OnRowEscape(focusPos.recordKey));
                    return true;
                }
                return false;
            }
            function HandleShortcuts() {
                function SwitchToCellLevelNavigation() {
                    function GetDisplayControlForCell(cellInfo) {
                        var column = cellInfo.GetColumn();
                        var record = cellInfo.GetRecord();
                        var fieldKey = cellInfo.GetFieldKey();

                        if (record != null) {
                            var prop = record.GetProp(fieldKey);
                            var propType = prop == null ? _gridFieldMap[fieldKey].GetPropType() : prop.propType;

                            return SP.JsGrid.Internal.Property.GetDisplayControlForProperty(propType, column.fnGetDisplayControlName && column.fnGetDisplayControlName(record, fieldKey));
                        }
                        else {
                            return null;
                        }
                    }
                    gridPane.ScrollCellIntoView(focusPos.rowIdx, focusPos.colIdx);
                    var ci = gridPane.GetCellByIdx(focusPos.rowIdx, focusPos.colIdx);

                    if (ci != null) {
                        var displayControl = GetDisplayControlForCell(ci);
                        var displayControlContent = (ci.GetTd()).childNodes;

                        if (displayControlContent && displayControl && displayControl.FocusNext && displayControl.FocusPrevious) {
                            var firstFocusableElement = displayControl.FocusNext(displayControlContent, null);

                            if (firstFocusableElement != null) {
                                _curFocusedDisplayControlInfo = {};
                                _curFocusedDisplayControlInfo.displayControl = displayControl;
                                _curFocusedDisplayControlInfo.displayControlContent = displayControlContent;
                                _curFocusedDisplayControlInfo.DOMElement = firstFocusableElement;
                                if (_focusElementType == FocusElementType.input) {
                                    $addHandler(parentNode, 'keydown', OnKeyDown);
                                }
                            }
                        }
                    }
                }
                function ClearFocusedCellValue() {
                    var record = objBag.tableCache.GetCachedRecord(focusPos.recordKey);

                    if (record == null) {
                        record = objBag.jsGridObj.GetRecord(focusPos.recordKey);
                    }
                    if (record != null && objBag.editUtil.CanEditField(record, paneConverter.GetColumnByIdx(focusPos.colIdx), focusPos.fieldKey)) {
                        var propUpdate = SP.JsGrid.CreateUnvalidatedPropertyUpdate(focusPos.recordKey, focusPos.fieldKey, null, true);

                        objBag.jsGridObj.UpdateProperties([propUpdate], SP.JsGrid.UserAction.UserEdit);
                    }
                }
                function OnReorderShortcut(bDown) {
                    var range = objBag.jsGridObj.GetContiguousRowSelectionWithoutEntryRecords();
                    var keys = range != null ? range.keys : [];

                    if (keys.length > 0) {
                        if (bDown) {
                            if (objBag.jsGridObj.CanMoveRecordsDownByOne(keys)) {
                                objBag.jsGridObj.MoveRecordsDownByOne(keys);
                                return true;
                            }
                        }
                        else {
                            if (objBag.jsGridObj.CanMoveRecordsUpByOne(keys)) {
                                objBag.jsGridObj.MoveRecordsUpByOne(keys);
                                return true;
                            }
                        }
                    }
                }
                switch (eventInfo.keyCode) {
                case Sys.UI.Key.del:
                    if (noActionKeys || ctrlOnly) {
                        if (objBag.editUtil.IsEditingEnabled()) {
                            var rowRangeSelected = objBag.jsGridObj.GetSelectedRowRanges();

                            if (noActionKeys && rowRangeSelected.length == 0) {
                                ClearFocusedCellValue();
                            }
                            else {
                                objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.DeleteRecords);
                            }
                        }
                        else {
                            alert(fnGetLocStr('GridNotEditable'));
                        }
                        return true;
                    }
                    break;
                case SP.Internal.Key.insert:
                    if (noActionKeys) {
                        if (objBag.editUtil.IsEditingEnabled()) {
                            objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.InsertRecord);
                        }
                        else {
                            alert(fnGetLocStr('GridNotEditable'));
                        }
                        return true;
                    }
                    break;
                case Sys.UI.Key.down:
                    if (altOnly) {
                        gridPane.ScrollCellIntoView(focusPos.rowIdx, focusPos.colIdx);
                        var ci = gridPane.GetCellByIdx(focusPos.rowIdx, focusPos.colIdx);

                        if (ci != null && ci.GetRecord() != null && editMgr.IsBound()) {
                            editMgr.ExpandNextActor();
                        }
                        return true;
                    }
                    else if (altAndShift) {
                        return OnReorderShortcut(true);
                    }
                    break;
                case Sys.UI.Key.up:
                    if (altOnly) {
                        SwitchToCellLevelNavigation();
                        return true;
                    }
                    else if (altAndShift) {
                        return OnReorderShortcut(false);
                    }
                    break;
                case Sys.UI.Key.right:
                    if (altAndShift) {
                        if (objBag.editUtil.IsEditingEnabled()) {
                            objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.IndentRecords);
                        }
                        else {
                            alert(fnGetLocStr('GridNotEditable'));
                        }
                        return true;
                    }
                    break;
                case Sys.UI.Key.left:
                    if (altAndShift) {
                        if (objBag.editUtil.IsEditingEnabled()) {
                            objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.OutdentRecords);
                        }
                        else {
                            alert(fnGetLocStr('GridNotEditable'));
                        }
                        return true;
                    }
                    break;
                case SP.Internal.Key.comma:
                    if (ctrlAndShift) {
                        return gridPane.TryShiftColumnSelectionGroup(focusPos.rowIdx, focusPos.colIdx, -1);
                    }
                    break;
                case SP.Internal.Key.dot:
                    if (ctrlAndShift) {
                        return gridPane.TryShiftColumnSelectionGroup(focusPos.rowIdx, focusPos.colIdx, 1);
                    }
                    break;
                case SP.Internal.Key.back_slash:
                    if (altOnly) {
                        return gridPane.ExpandColumnMenu(focusPos.colIdx);
                    }
                    else if (ctrlAndShift) {
                        fnRetryErrorRows();
                        return true;
                    }
                    break;
                case SP.Internal.Key.F2:
                    if (noActionKeys) {
                        return gridPane.TryBeginEdit(eventInfo);
                    }
                    break;
                }
                return false;
            }
            function HandleNavigationAndSelection() {
                function ComputeNavDest(rowIdx, colIdx) {
                    switch (eventInfo.keyCode) {
                    case Sys.UI.Key.enter:
                        if (noActionKeys) {
                            if (rowIdx != null) {
                                rowIdx++;
                            }
                        }
                        else if (shiftOnly) {
                            if (rowIdx != null) {
                                --rowIdx;
                            }
                        }
                        else {
                            return null;
                        }
                        break;
                    case Sys.UI.Key.down:
                        if (noActionKeys || shiftOnly || ctrlOnly || ctrlAndShift) {
                            if (eventInfo.ctrlKey) {
                                rowIdx = paneConverter.GetVirtualRowCount() - 1;
                            }
                            else if (rowIdx != null) {
                                rowIdx++;
                            }
                        }
                        else {
                            return null;
                        }
                        break;
                    case Sys.UI.Key.up:
                        if (noActionKeys || shiftOnly || ctrlOnly || ctrlAndShift) {
                            if (eventInfo.ctrlKey) {
                                rowIdx = 0;
                            }
                            else if (rowIdx != null) {
                                rowIdx--;
                            }
                        }
                        else {
                            return null;
                        }
                        break;
                    case Sys.UI.Key.pageDown:
                        if (noActionKeys || shiftOnly) {
                            if (rowIdx != null) {
                                var relRowIdx = paneConverter.RowIdxToRelRowIdx(rowIdx);
                                var amt = paneConverter.GetWholeRowDisplayCapacity() - 1;

                                relRowIdx = relRowIdx != amt ? amt : amt * 2;
                                rowIdx = paneConverter.RelRowIdxToRowIdx(relRowIdx);
                            }
                        }
                        else {
                            return null;
                        }
                        break;
                    case Sys.UI.Key.pageUp:
                        if (noActionKeys || shiftOnly) {
                            if (rowIdx != null) {
                                var relRowIdx = paneConverter.RowIdxToRelRowIdx(rowIdx);
                                var amt = paneConverter.GetWholeRowDisplayCapacity() - 1;

                                relRowIdx = relRowIdx != 0 ? 0 : -amt;
                                rowIdx = paneConverter.RelRowIdxToRowIdx(relRowIdx);
                            }
                        }
                        else {
                            return null;
                        }
                        break;
                    case Sys.UI.Key.home:
                        if (noActionKeys || shiftOnly || ctrlOnly || ctrlAndShift) {
                            colIdx = 0;
                            if (eventInfo.ctrlKey) {
                                rowIdx = 0;
                            }
                        }
                        else {
                            return null;
                        }
                        break;
                    case Sys.UI.Key.end:
                        if (noActionKeys || shiftOnly || ctrlOnly || ctrlAndShift) {
                            colIdx = paneConverter.GetVirtualColumnCount() - 1;
                            if (eventInfo.ctrlKey) {
                                rowIdx = paneConverter.GetVirtualRowCount() - 1;
                            }
                        }
                        else {
                            return null;
                        }
                        break;
                    case Sys.UI.Key.right:
                        if (noActionKeys || shiftOnly) {
                            if (colIdx != null) {
                                colIdx = colIdx + (objBag.RTL.bEnabled ? -1 : 1);
                            }
                        }
                        else {
                            return null;
                        }
                        break;
                    case Sys.UI.Key.left:
                        if (noActionKeys || shiftOnly) {
                            if (colIdx != null) {
                                colIdx = colIdx - (objBag.RTL.bEnabled ? -1 : 1);
                            }
                        }
                        else {
                            return null;
                        }
                        break;
                    case SP.Internal.Key.six:
                        if (ctrlAndShift) {
                            colIdx = 0;
                            rowIdx = paneConverter.GetVirtualRowCount() - 1;
                        }
                        else {
                            return null;
                        }
                        break;
                    default:
                        return null;
                    }
                    var r;

                    if (rowIdx != null) {
                        rowIdx = Math.max(0, Math.min(paneConverter.GetVirtualRowCount() - 1, rowIdx));
                    }
                    if (colIdx != null) {
                        colIdx = Math.max(0, Math.min(paneConverter.GetVirtualColumnCount() - 1, colIdx));
                    }
                    return {
                        rowIdx: rowIdx,
                        colIdx: colIdx
                    };
                }
                function ComputeNavDestForTab(rowIdx, colIdx) {
                    if (!eventInfo.shiftKey) {
                        if (++colIdx == paneConverter.GetVirtualColumnCount()) {
                            colIdx = 0;
                            if (++rowIdx == paneConverter.GetVirtualRowCount()) {
                                return null;
                            }
                        }
                    }
                    else {
                        if (--colIdx == -1) {
                            colIdx = paneConverter.GetVirtualColumnCount() - 1;
                            if (--rowIdx == -1) {
                                return null;
                            }
                        }
                    }
                    return {
                        rowIdx: rowIdx,
                        colIdx: colIdx
                    };
                }
                if (ctrlOnly || altOnly || shiftOnly || altAndShift || noActionKeys || ctrlAndShift) {
                    if (eventInfo.keyCode == Sys.UI.Key.tab) {
                        var navDest = ComputeNavDestForTab(focusPos.rowIdx, focusPos.colIdx);

                        if (navDest != null) {
                            selectionMgr.SetFocusByPos(gridPane, navDest.rowIdx, navDest.colIdx);
                            return true;
                        }
                    }
                    else if (!eventInfo.shiftKey || shiftOnly && eventInfo.keyCode == Sys.UI.Key.enter) {
                        var navDest = ComputeNavDest(focusPos.rowIdx, focusPos.colIdx);

                        if (navDest != null) {
                            selectionMgr.SetFocusByPos(gridPane, navDest.rowIdx, navDest.colIdx);
                            return true;
                        }
                    }
                    else {
                        var lastSel = selectionMgr.GetLastSelectionEndpoints();
                        var navDest = ComputeNavDest(lastSel.rowIdx2, lastSel.colIdx2);

                        if (navDest != null) {
                            if (navDest.rowIdx != null && navDest.colIdx != null) {
                                gridPane.ScrollCellIntoView(navDest.rowIdx, navDest.colIdx);
                            }
                            else if (navDest.rowIdx != null) {
                                fnScrollIntoViewVertically(navDest.rowIdx);
                            }
                            else if (navDest.colIdx != null) {
                                gridPane.ScrollColumnIntoViewHorizontally(navDest.colIdx);
                            }
                            selectionMgr.SelectRange(gridPane, lastSel.rowIdx1, navDest.rowIdx, lastSel.colIdx1, navDest.colIdx, SelectOp.Set, false, false);
                            return true;
                        }
                    }
                }
                return false;
            }
            function HandleInterPaneNavigation() {
                var gridPaneConverter = _gridPane.GetGridPaneConverter();

                if (eventInfo.keyCode == Sys.UI.Key.tab) {
                    if (_paneLayout == SP.JsGrid.PaneLayout.GridAndPivotedGrid) {
                        if (noActionKeys) {
                            if (gridPane.Id == SP.JsGrid.PaneId.MainGrid) {
                                selectionMgr.SetFocusByPos(_pivotedGridPane, 0, 0);
                                return true;
                            }
                        }
                        else if (shiftOnly && gridPane.Id == SP.JsGrid.PaneId.PivotedGrid) {
                            var gridPaneDestRow = gridPaneConverter.GetVirtualRowCount() - 1;
                            var gridPaneDestCol = gridPaneConverter.GetVirtualColumnCount() - 1;

                            selectionMgr.SetFocusByPos(_gridPane, gridPaneDestRow, gridPaneDestCol);
                            return true;
                        }
                    }
                    selectionMgr.Clear();
                }
                else if (eventInfo.keyCode == SP.Internal.Key.F6) {
                    if (_paneLayout == SP.JsGrid.PaneLayout.GridAndPivotedGrid) {
                        if (gridPane.Id == SP.JsGrid.PaneId.MainGrid) {
                            selectionMgr.SetFocusByPos(_pivotedGridPane, (_pivotedGridPane.GetGridPaneConverter()).GetTopRowIdxForKey(focusPos.recordKey), 0);
                            return true;
                        }
                        else if (gridPane.Id == SP.JsGrid.PaneId.PivotedGrid) {
                            selectionMgr.SetFocusByPos(_gridPane, gridPaneConverter.GetTopRowIdxForKey(focusPos.recordKey), 0);
                            return true;
                        }
                    }
                }
                return false;
            }
            function HandleCellLevelNavigation() {
                if (_curFocusedDisplayControlInfo == null) {
                    return false;
                }
                if (eventInfo.target == _curFocusedDisplayControlInfo.DOMElement && (eventInfo.keyCode == Sys.UI.Key.tab || eventInfo.keyCode == SP.Internal.Key.shift)) {
                    if (eventInfo.keyCode == Sys.UI.Key.tab) {
                        if (noActionKeys) {
                            _curFocusedDisplayControlInfo.DOMElement = _curFocusedDisplayControlInfo.displayControl.FocusNext(_curFocusedDisplayControlInfo.displayControlContent, _curFocusedDisplayControlInfo.DOMElement);
                        }
                        else if (shiftOnly) {
                            _curFocusedDisplayControlInfo.DOMElement = _curFocusedDisplayControlInfo.displayControl.FocusPrevious(_curFocusedDisplayControlInfo.displayControlContent, _curFocusedDisplayControlInfo.DOMElement);
                        }
                        if (_curFocusedDisplayControlInfo.DOMElement == null) {
                            _this.Focus();
                        }
                    }
                    return true;
                }
                _this.Focus();
                return false;
            }
            function HandleCutCopyPaste() {
                var cutcopypasteMgr = objBag.cutcopypasteMgr;

                if (eventInfo.ctrlKey && !eventInfo.altKey && !eventInfo.shiftKey) {
                    switch ((String.fromCharCode(eventInfo.keyCode)).toUpperCase()) {
                    case 'X':
                        cutcopypasteMgr.OnCut(gridPane);
                        return true;
                    case 'C':
                        cutcopypasteMgr.OnCopy(gridPane);
                        return true;
                    case 'V':
                        cutcopypasteMgr.OnPaste(gridPane);
                        return true;
                    }
                }
                return false;
            }
            function HandleDisplayControlKeyDown() {
                var cellInfo = gridPane.GetCellByIdx(focusPos.rowIdx, focusPos.colIdx);

                if (cellInfo != null) {
                    var record = cellInfo.GetRecord();

                    if (record != null) {
                        var column = cellInfo.GetColumn();
                        var fieldKey = cellInfo.GetFieldKey();
                        var field = _gridFieldMap[fieldKey];
                        var prop = record.GetProp(fieldKey);
                        var propType = prop == null ? field.GetPropType() : prop.propType;
                        var displayControl = SP.JsGrid.Internal.Property.GetDisplayControlForProperty(propType, column.fnGetDisplayControlName && column.fnGetDisplayControlName(record, fieldKey));

                        if (displayControl.OnKeyDown != null) {
                            return displayControl.OnKeyDown(eventInfo, fnGetCellValue(record, fieldKey, propType), record, column, field, propType, objBag.jsGridObj);
                        }
                    }
                }
                return false;
            }
        };
        function FocusElementIsBeingUsedForTextInput() {
            return editMgr.IsEditing() && _this.GetFocusElementForTextInput(editMgr.GetCurrentEditControlName()) != null && editMgr.IsCurrentEditControlUsingGridTextInputElement();
        }
        function OnFocus() {
            if (FocusElementIsBeingUsedForTextInput()) {
                return;
            }
            if (fnIsGridVisible()) {
                var focusPos = selectionMgr.GetFocus();

                if (focusPos == null) {
                    if (_gridPane == null) {
                        return;
                    }
                    var paneConverter = _gridPane.GetGridPaneConverter();

                    if (paneConverter.GetVirtualRowCount() == 0) {
                        return;
                    }
                    else {
                        selectionMgr.SetFocusByPos(_gridPane, paneConverter.GetTopRowIdx(), _gridPane.GetLeftMostColumnIdx());
                    }
                }
                else {
                    focusPos.gridPane.ShowFocus(true);
                }
                if (_curFocusedDisplayControlInfo != null) {
                    _curFocusedDisplayControlInfo = null;
                    if (_focusElementType == FocusElementType.input) {
                        $removeHandler(parentNode, 'keydown', OnKeyDown);
                    }
                }
            }
        }
        function OnKeyDown(eventInfo) {
            if (FocusElementIsBeingUsedForTextInput()) {
                editMgr.OnActorKeyDown(eventInfo, editMgr.GetCurrentEditControlName());
            }
            else if (editMgr.IsEditing()) {
                if (_focusElementType == FocusElementType.input) {
                    Sys.Debug.assert(false, "Edit manager is still in Editing state, but focus is on the grid's input element!");
                    editMgr.StopEditing();
                    _this.HandleKeyDown(eventInfo);
                }
                else {
                    return;
                }
            }
            else {
                _this.HandleKeyDown(eventInfo);
            }
        }
        function OnKeyPress(eventInfo) {
            if (editMgr.IsEditing()) {
                return;
            }
            var focusPos = selectionMgr.GetFocus();

            if (!fnIsGridEnabled() || focusPos == null) {
                return;
            }
            var gridPane = focusPos.gridPane;

            function HandleBeginEdit() {
                if (SP.JsGrid.Utility.IsChar(eventInfo) && !eventInfo.altKey && !eventInfo.ctrlKey) {
                    if (gridPane.TryBeginEdit(eventInfo) && !FocusElementIsBeingUsedForTextInput()) {
                        SP.Internal.DomElement.StopEvent(eventInfo);
                    }
                }
            }
            HandleBeginEdit();
        }
        function OnKeyUp(eventInfo) {
            if (editMgr.IsEditing()) {
                return;
            }
            if (_focusElementType == FocusElementType.input) {
                _focusElement.value = '';
            }
        }
        function CreateFocusElement() {
            switch (_focusElementType) {
            case FocusElementType.anchor:
                _focusElement = CreateFocusElementAnchor();
                CreateSkipGridHtmlElements(_focusElement, _focusElement);
                break;
            case FocusElementType.input:
                _focusElement = CreateFocusElementInput();
                SetStyleForFocusElementInput();
                CreateSkipGridHtmlElements(parentNode, parentNode);
                break;
            case FocusElementType.parentNode:
                _focusElement = CreateFocusElementParentNode();
                CreateSkipGridHtmlElements(parentNode, parentNode);
                break;
            default:
                Sys.Debug.assert(false, "Invalid focus element type");
            }
        }
        function CreateFocusElementAnchor() {
            var focusElem = document.createElement('a');

            focusElem.id = jsGridElementId + "_focusElement";
            focusElem.href = "#";
            _outerGridParentNode.insertBefore(focusElem, parentNode);
            focusElem.appendChild(parentNode);
            return focusElem;
        }
        function CreateFocusElementInput() {
            var focusElem = document.createElement('input');

            focusElem.id = jsGridElementId + "_focusElement";
            focusElem.className = 'jsgrid-control-editbox';
            parentNode.insertBefore(focusElem, parentNode.firstChild);
            return focusElem;
        }
        function SetStyleForFocusElementInput(bShouldFocus) {
            var offscreenTop = "0px";
            var offscreenLeft = "-10000px";
            var focusElementStyle = _focusElement.style;

            focusElementStyle.position = 'fixed';
            focusElementStyle.top = offscreenTop;
            focusElementStyle.left = offscreenLeft;
            focusElementStyle.right = '';
            _focusElement.value = '';
            if (bShouldFocus) {
                var coords = objBag.paneMgr.GetMostRecentMouseDownCoordinates();

                if (coords != null) {
                    focusElementStyle.top = String(coords.y) + "px";
                    focusElementStyle.left = String(coords.x) + "px";
                }
                _focusElement.focus();
                if (coords != null) {
                    focusElementStyle.top = offscreenTop;
                    focusElementStyle.left = offscreenLeft;
                }
            }
        }
        function CreateFocusElementParentNode() {
            parentNode.tabIndex = 0;
            return parentNode;
        }
        function CreateSkipGridHtmlElements(gridContentFirstElement, gridContentLastElement) {
            var skipGridContentElement = document.createElement('a');

            skipGridContentElement.id = jsGridElementId + "_skipGridContent";
            skipGridContentElement.href = "javascript:";
            skipGridContentElement.className = "ms-accessible ms-acc-button";
            skipGridContentElement.onclick = function() {
                this.href = '#' + jsGridElementId + '_skippedGridContent';
            };
            SP.Internal.DomElement.SetText(skipGridContentElement, SP.JsGrid.Res.skipGridContent);
            _outerGridParentNode.insertBefore(skipGridContentElement, gridContentFirstElement);
            _skippedGridContentElement = document.createElement('a');
            _skippedGridContentElement.id = jsGridElementId + "_skippedGridContent";
            _skippedGridContentElement.href = "javascript:";
            _skippedGridContentElement.className = "ms-accessible ms-acc-button";
            _skippedGridContentElement.onclick = function() {
                this.href = '#' + jsGridElementId + '_skipGridContent';
            };
            SP.Internal.DomElement.SetText(_skippedGridContentElement, SP.JsGrid.Res.backToTopOfGridContent);
            _outerGridParentNode.insertBefore(_skippedGridContentElement, gridContentLastElement.nextSibling);
            $addHandler(_skippedGridContentElement, 'keydown', OnShiftTab);
            function OnShiftTab(eventInfo) {
                if (eventInfo.shiftKey && eventInfo.keyCode == Sys.UI.Key.tab) {
                    var focusPos = selectionMgr.GetFocus();

                    if (focusPos == null) {
                        var paneToFocus = _paneLayout == SP.JsGrid.PaneLayout.GridAndPivotedGrid ? _pivotedGridPane : _gridPane;
                        var paneConverter = paneToFocus.GetGridPaneConverter();
                        var gridPaneDestRow = paneConverter.GetVirtualRowCount() - 1;
                        var gridPaneDestCol = paneConverter.GetVirtualColumnCount() - 1;

                        selectionMgr.SetFocusByPos(paneToFocus, gridPaneDestRow, gridPaneDestCol);
                    }
                }
            }
        }
        function Init() {
            Sys.Debug.assert(_focusElementType == FocusElementType.input, "Focus element needs to be an input (see xbrowser+IME support req). This may change only if code branches to use the parentNode or the TDs for More Access. Mode.");
            CreateFocusElement();
            _ariaMgr = (objBag.ariaMgr = new ARIAManager());
            $addHandler(_focusElement, 'focus', OnFocus);
            $addHandler(_focusElement, 'keydown', OnKeyDown);
            $addHandler(_focusElement, 'keypress', OnKeyPress);
            $addHandler(_focusElement, 'keyup', OnKeyUp);
        }
        function ARIAManager() {
            var _this = this;

            function Init() {
                _focusElement.setAttribute('role', objBag.controller.GetHierarchyManager() == null ? 'grid' : 'treegrid');
                var labelFor = document.createElement('label');

                labelFor.id = _focusElement.id + "_labelFor";
                labelFor.setAttribute('for', _focusElement.id);
                labelFor.appendChild(document.createTextNode(objBag.jsGridObj.name));
                labelFor.style.cssText = 'display:none;';
                parentNode.appendChild(labelFor);
                _focusElement.setAttribute('aria-label', objBag.jsGridObj.name);
                _focusElement.setAttribute('aria-labelledby', _focusElement.id + "_labelFor");
                _focusElement.setAttribute('aria-multiselectable', 'true');
                if (_focusElementType == FocusElementType.input) {
                    _focusElement.setAttribute('aria-owns', jsGridElementId);
                }
            }
            this.NotifyViewChange = function() {
                _this.EnableGrid(fnIsGridEnabled());
                _this.EnableGridEditing(objBag.editUtil.IsEditingEnabled());
            };
            this.EnableGrid = function(bEnabled) {
                _focusElement.setAttribute('aria-disabled', (!bEnabled).toString());
            };
            this.EnableGridEditing = function(bEnabled) {
                _focusElement.setAttribute('aria-readonly', (!bEnabled).toString());
            };
            this.OnFocusCell = function(focusPaneId, oldFocusCI, oldFocusColHeaderCI, newFocusCI, newFocusColHeaderCI) {
                if (oldFocusCI != null) {
                    var td = oldFocusCI.GetTd();

                    td.removeAttribute('id');
                    td.removeAttribute('aria-describedby');
                    _this.SetSelected(td, false);
                    if (oldFocusColHeaderCI != null) {
                        var th = oldFocusColHeaderCI.GetTd();

                        th.removeAttribute('id');
                    }
                }
                if (newFocusCI != null) {
                    var td = newFocusCI.GetTd();
                    var cellId = String.format("{0}_{1}_{2}_{3}", jsGridElementId, focusPaneId, newFocusCI.GetRowIdx(), newFocusCI.GetColIdx());

                    td.setAttribute('id', cellId);
                    _focusElement.setAttribute('aria-activedescendant', cellId);
                    _this.SetSelected(td, true);
                    var record = newFocusCI.GetRecord();
                    var cellEditable = record != null && objBag.editUtil.CanEditField(record, newFocusCI.GetColumn(), newFocusCI.GetFieldKey());

                    td.setAttribute('aria-readonly', (!cellEditable).toString());
                    if (newFocusColHeaderCI != null) {
                        var th = newFocusColHeaderCI.GetTd();
                        var colHeaderId = String.format("{0}_{1}_{2}", jsGridElementId, focusPaneId, newFocusColHeaderCI.GetColIdx());

                        th.setAttribute('id', colHeaderId);
                        td.setAttribute('aria-describedby', colHeaderId);
                    }
                }
                else {
                    _focusElement.removeAttribute('aria-activedescendant');
                }
            };
            this.OnInsertTableRow = function(tr, record, rowIdx) {
                tr.setAttribute('role', 'row');
                if (record == null && rowIdx == -1) {
                    return;
                }
                var bRecordExists = record != null && record != SP.JsGrid.Internal.LoadErrorState;
                var recordKey = bRecordExists ? record.key() : null;

                if (!bRecordExists) {
                    tr.setAttribute('aria-busy', record == null ? 'true' : 'error');
                }
                else if (objBag.controller.GetHierarchyManager() != null && !objBag.entryRecordMgr.IsEntryRecordKey(recordKey)) {
                    var nodeInfo = (objBag.controller.GetHierarchyManager()).GetNodeInfo(record);

                    if (nodeInfo.nodeType == SP.JsGrid.Internal.HierarchyManager.NodeType.Collapsed) {
                        tr.setAttribute('aria-expanded', 'false');
                    }
                    else if (nodeInfo.nodeType == SP.JsGrid.Internal.HierarchyManager.NodeType.Expanded) {
                        tr.setAttribute('aria-expanded', 'true');
                    }
                    tr.setAttribute('aria-level', (nodeInfo.indent + 1).toString());
                }
                var gridPane = selectionMgr.GetFocusedPane();
                var rowIsSelected = selectionMgr.IsRowSelected(gridPane, rowIdx);

                _this.SetSelected(tr, rowIsSelected);
            };
            this.OnInsertRowHeaderCell = function(cell) {
                cell.setAttribute('role', 'presentation');
            };
            this.OnInsertColHeaderCell = function(cell) {
                cell.setAttribute('scope', 'col');
                cell.setAttribute('role', 'columnheader');
            };
            this.OnInsertGridCell = function(cell) {
                cell.setAttribute('role', 'gridcell');
            };
            this.SetSelected = function(elem, bSelected) {
                elem.setAttribute('aria-selected', bSelected.toString());
            };
            Init();
        }
        Init();
    };
    SP.JsGrid.Internal.GridPane = function(parentNode, objBag, fnScrollIntoViewVertically, fnScrollVerticallyByTouch, fnNotifyScrollBarVisibilityChange, commandMgr, selectionMgr, changeHighlightMgr, editMgr, cutcopypasteMgr, fillDownMgr, paneSize, fnGetCellValue, fnGetLocStr, fnRetryErrorRows, visualSelectionHtmlElements) {
        var intEventMgr = objBag.intEventMgr;
        var styles = objBag.styleMgr;
        var jsGridObj = objBag.jsGridObj;
        var delegateMgr = objBag.delegateMgr;
        var intDelegateMgr = objBag.intDelegateMgr;
        var ariaMgr = objBag.ariaMgr;
        var const_BlurBorderColor = '#B0B5BA';
        var tableDiv, selDragHandle = visualSelectionHtmlElements.selDragHandle, selFrames = visualSelectionHtmlElements.selFrames, focusFrames = visualSelectionHtmlElements.focusFrames, copyFrames = visualSelectionHtmlElements.copyFrames, columnControl, ghostHeader, columnDropIndic, horizScrollBarContainer, ghostCells, rowDropIndic;
        var bColumnConfigShown = false;
        var horizScrollBar;
        var eventSinks;
        var headerStyleClassNames;
        var lockedColIdx;
        var activeColIdx;
        var activeRowIdx;
        var editMgr;
        var paneConverter;
        var tableViewportRelativeToParentNode;
        var gridPane = this;
        var rowNumber;
        var pConverter;
        var operationalUtil;
        var gridFieldMap;
        var fnGetGridRowStyleId;
        var bMovableColumns, bResizableColumns, bHidableColumns;
        var bSortableColumns, bAutoFilterableColumns, bRowHeadersEnabled;
        var headerMgr;
        var tableMgr;
        var mouseHandlers;
        var allColumns;
        var SelectOp = SP.JsGrid.Internal.SelectionManager.SelectOp;
        var itemSizes;
        var curColUpdateTimeOut;
        var bIsDisposed = false;
        var computeGridROStyleJobKey;
        var computeGridCellStyleJobKey;
        var disposeRenderedObjectsJobKey;
        var focusedReadOnlyCell;
        var rowHeight;
        var lastClientSize = {
            width: -1,
            height: -1
        };
        var reorderableRows = new SP.Utilities.Set();
        var onResizeHandler;
        var cachedAproximateRowHeight = 0;
        var disposeMap = {};

        this.Id = SP.JsGrid.PaneId.MainGrid;
        this.GetDelegateMgr = function() {
            return delegateMgr;
        };
        this.SetEventSinks = function(evSinks) {
            eventSinks = evSinks;
        };
        this.GetLeftMostColumnIdx = function() {
            return horizScrollBar.GetTopItemIdx();
        };
        this.Dispose = function() {
            bIsDisposed = true;
            if (disposeRenderedObjectsJobKey != null) {
                SP.JsGrid.AsynchronousCellUpdater.FlushJob(disposeRenderedObjectsJobKey);
            }
            gridPane.ClearView();
            $clearHandlers(parentNode);
            $clearHandlers(tableDiv);
            mouseHandlers.Dispose();
            headerMgr.Dispose();
            tableMgr.Dispose();
            horizScrollBar.Dispose();
            paneSize.Dispose();
            tableDiv = (selDragHandle = (selFrames = (focusFrames = (copyFrames = (columnControl = (ghostHeader = (ghostHeader.textDiv = (columnDropIndic = (ghostCells = (rowDropIndic = (parentNode = null)))))))))));
        };
        this.ClearView = function() {
            UpdatePositionedElements();
            mouseHandlers.ClearHeaderEvents();
            tableMgr.ClearTable();
        };
        this.SetView = function(posConverter, pOperationalUtil, columnInfoCollection, pgridFieldMap, pfnGetGridRowStyleId, pbMovableColumns, pbResizableColumns, pbHidableColumns, pbSortableColumns, pbAutoFilterableColumns, pbRowHeadersEnabled, sortState) {
            var tableDivHeight = Math.max(0, paneSize.GetHeight() - GetEffectiveHorizontalScrollBarHeight());

            if (!objBag.spGrid)
                tableDiv.style.height = tableDivHeight + 'px';
            operationalUtil = pOperationalUtil;
            fnGetGridRowStyleId = pfnGetGridRowStyleId;
            bMovableColumns = pbMovableColumns;
            bResizableColumns = pbResizableColumns;
            bHidableColumns = pbHidableColumns;
            bSortableColumns = pbSortableColumns;
            bAutoFilterableColumns = pbAutoFilterableColumns;
            bRowHeadersEnabled = pbRowHeadersEnabled;
            gridFieldMap = pgridFieldMap;
            tableMgr.SetPosConverterObj(posConverter);
            pConverter = posConverter;
            var selAllSquare = tableMgr.InitTable(bRowHeadersEnabled);

            if (selAllSquare != null && !objBag.spGrid) {
                SP.JsGrid.Style.ApplyCornerHeaderBorderStyle(selAllSquare.GetTd(), styles.columnHeaderStyleCollection.normal, styles.rowHeaderStyleCollection.normal);
            }
            InitColumns(columnInfoCollection, true);
            var w = paneSize.GetWidth();

            horizScrollBar.Update({
                physicalViewportSize: w - tableMgr.GetRowHeaderWidth(),
                scrollbarSize: w,
                topItemIdx: 0,
                bScrollNotifiy: false
            });
            RecomputeTableViewportRelativeToParentNode(tableDivHeight);
            mouseHandlers.SetupHeaderEvents();
        };
        this.GetGridPaneConverter = function() {
            return paneConverter;
        };
        this.ShowFocus = function(hasFocus) {
            UpdateSelectionFrames(!hasFocus);
        };
        this.OnResize = function() {
            var newClientSize = {
                width: paneSize.GetWidth(),
                height: paneSize.GetHeight()
            };

            if (newClientSize.width != lastClientSize.width || newClientSize.height != lastClientSize.height) {
                tableMgr.OptimizeTableColumns();
                ResizeTableDiv();
                var w = paneSize.GetWidth();

                horizScrollBar.Update({
                    physicalViewportSize: w - tableMgr.GetRowHeaderWidth(),
                    scrollbarSize: w
                });
                UpdatePositionedElements();
                editMgr.NotifyMove(gridPane);
                lastClientSize = newClientSize;
            }
        };
        this.SetRowHeight = function(newHeight) {
            rowHeight = newHeight;
            tableMgr.SetRowHeight(rowHeight);
        };
        this.GetMinRowHeight = function() {
            return objBag.spGrid ? 30 : Math.max(22, ComputeAproximateRowHeight());
        };
        this.SpliceRows = function(delRelRowIdx, delCount, insRelRowIdx, insRecords, bCausesKeyPosMappingChange) {
            tableMgr.SpliceRows(delRelRowIdx, delCount, insRelRowIdx, insRecords);
            if (activeRowIdx != null && activeRowIdx >= delRelRowIdx && activeRowIdx <= delRelRowIdx + delCount - 1) {
                activeRowIdx = null;
            }
            if (bCausesKeyPosMappingChange) {
                ResetSelection();
            }
            else {
                UpdatePositionedElements(true);
            }
        };
        this.SetSortState = function(sortArgs) {
            headerMgr.SetSortState(sortArgs);
        };
        this.SetFilterState = function(filterArgs) {
            headerMgr.SetFilterState(filterArgs);
        };
        this.NotifyCanEditUpdated = function() {
            BindEditControl();
            UpdateSelectionFrames(false);
        };
        this.NotifyCopyOperationUpdated = function() {
            UpdateCopyFrames();
            HideSelectionFrames();
        };
        this.UpdateFocusAfterInsertOrDeleteRows = function(pos, count, bInserted) {
            var focusPos = selectionMgr.GetFocusForPane(gridPane);

            if (focusPos != null) {
                if (bInserted) {
                    if (focusPos.rowIdx >= pos) {
                        selectionMgr.SetFocusByPos(gridPane, focusPos.rowIdx + count, focusPos.colIdx);
                    }
                }
                else {
                    if (focusPos.rowIdx >= pos && focusPos.rowIdx < pos + count) {
                        selectionMgr.SetFocusByPos(gridPane, Math.max(pos - 1, 0), focusPos.colIdx);
                    }
                    else if (focusPos.rowIdx >= pos + count) {
                        selectionMgr.SetFocusByPos(gridPane, focusPos.rowIdx - count, focusPos.colIdx);
                    }
                }
            }
        };
        this.ChangeKeys = function(oldKey, newKey) {
            tableMgr.ChangeKeys(oldKey, newKey);
        };
        this.RenderRows = function(toRender) {
            if (bIsDisposed) {
                return;
            }
            tableMgr.RenderRows(toRender);
        };
        this.NotifyChangeIndicatorsClearing = function() {
            var cells = tableMgr.GetAllDataCells();

            for (var i = 0; i < cells.length; i++) {
                var ci = cells[i];

                if (ci.GetRecord() != null) {
                    if (changeHighlightMgr.IsCellIn(ci.GetRecordKey(), ci.GetFieldKey())) {
                        RefreshCellStyle(ci, true, false);
                    }
                }
            }
        };
        this.Select = function(rowIdx1, rowIdx2, colIdx1, colIdx2, bAppend) {
            selectionMgr.SelectRange(gridPane, rowIdx1, rowIdx2, colIdx1, colIdx2, bAppend ? SelectOp.Append : SelectOp.Set, true, false);
        };
        this.SelectByKey = function(recordKey1, recordKey2, fieldKey1, fieldKey2, bAppend) {
            var rowIdx1, rowIdx2, colIdx1, colIdx2;

            if (recordKey1 != null && recordKey2 != null) {
                rowIdx1 = fieldKey1 != null ? (paneConverter.KeyToIdx(recordKey1, fieldKey1)).rowIdx : paneConverter.GetTopRowIdxForKey(recordKey1);
                rowIdx2 = fieldKey2 != null ? (paneConverter.KeyToIdx(recordKey2, fieldKey2)).rowIdx : paneConverter.GetTopRowIdxForKey(recordKey2);
            }
            if (fieldKey1 != null && fieldKey2 != null) {
                colIdx1 = paneConverter.FieldKeyToColIdx(fieldKey1);
                colIdx2 = paneConverter.FieldKeyToColIdx(fieldKey2);
            }
            this.Select(rowIdx1, rowIdx2, colIdx1, colIdx2, bAppend);
        };
        this.NotifySelectionUpdating = function() {
            var visibleRanges = {
                rowRange: new SP.Utilities.Range(tableMgr.BeginRowIdx(), tableMgr.EndRowIdx() - 1),
                colRange: new SP.Utilities.Range(tableMgr.BeginColIdx(), tableMgr.EndColIdx() - 1)
            };
            var clearedCells = selectionMgr.GetComponentsWithin(gridPane, visibleRanges.rowRange, visibleRanges.colRange);

            return {
                visibleRanges: visibleRanges,
                clearedCells: clearedCells,
                oldFocus: selectionMgr.GetFocusForPane(gridPane)
            };
        };
        this.ScrollCellIntoView = function(rowIdx, colIdx) {
            if (objBag.spGrid) {
                var cell = gridPane.GetCellByIdx(rowIdx, colIdx);

                if (cell) {
                    var td = cell.GetTd();

                    if (td) {
                        var coords = tableMgr.GetTdCoords(td);
                        var top = coords.top + AbsTop(tableDiv);
                        var left = coords.left + AbsLeft(tableDiv);
                        var padding = 45;
                        var workspace = document.getElementById("s4-workspace");
                        var scrollable = document.documentElement;

                        if (workspace) {
                            top -= AbsTop(workspace);
                            left -= AbsLeft(workspace);
                            scrollable = workspace;
                        }
                        if (top < scrollable.scrollTop) {
                            scrollable.scrollTop = top - padding;
                        }
                        else if (top + coords.height > scrollable.scrollTop + scrollable.clientHeight) {
                            scrollable.scrollTop = top + coords.height + padding - scrollable.clientHeight;
                        }
                        if (!objBag.RTL.bEnabled) {
                            if (left < scrollable.scrollLeft) {
                                scrollable.scrollLeft = left - padding;
                            }
                            else if (left + coords.width > scrollable.scrollLeft + scrollable.clientWidth) {
                                scrollable.scrollLeft = left + coords.width + padding - scrollable.clientWidth;
                            }
                        }
                        else if (objBag.RTL.bEnabled) {
                            if (SP.Internal.DomElement.BrowserIsIE) {
                                if (left < 0 && (scrollable.scrollLeft == 0 || scrollable.scrollLeft > 0 && Math.abs(left) > scrollable.scrollLeft)) {
                                    scrollable.scrollLeft = Math.abs(left + padding);
                                }
                                else if (scrollable.clientWidth - left - coords.width < scrollable.scrollLeft) {
                                    scrollable.scrollLeft = scrollable.clientWidth - left - coords.width - padding;
                                }
                            }
                            else {
                                if (left < scrollable.scrollLeft) {
                                    scrollable.scrollLeft = left - padding;
                                }
                                else if (left + coords.width > scrollable.scrollLeft + scrollable.clientWidth + AbsLeft(tableDiv)) {
                                    scrollable.scrollLeft = left + coords.width + padding - (scrollable.clientWidth + AbsLeft(tableDiv));
                                }
                            }
                        }
                    }
                }
                return false;
            }
            else {
                var scrolledVertically = fnScrollIntoViewVertically(rowIdx);
                var scrolledHorizontally = gridPane.ScrollColumnIntoViewHorizontally(colIdx);

                return scrolledVertically || scrolledHorizontally;
            }
        };
        this.GetCellByIdx = function(rowIdx, colIdx) {
            return tableMgr.GetCellByIdx(rowIdx, colIdx);
        };
        this.NotifySelectionUpdated = function(updatingReturn, bScrollFocusRectIntoView) {
            var newFocus = selectionMgr.GetFocusForPane(gridPane);
            var selectedCells = selectionMgr.GetComponentsWithin(gridPane, updatingReturn.visibleRanges.rowRange, updatingReturn.visibleRanges.colRange);

            UpdateCellBackgrounds(updatingReturn.clearedCells, selectedCells, updatingReturn.oldFocus, newFocus);
            UpdateHeaders();
            var bUpdatedPositionedElements = false;

            if (newFocus && bScrollFocusRectIntoView) {
                bUpdatedPositionedElements = gridPane.ScrollCellIntoView(newFocus.rowIdx, newFocus.colIdx);
            }
            if (!bUpdatedPositionedElements) {
                UpdatePositionedElements();
            }
            BindEditControl();
            var oldFocusCI, oldFocusColHeaderCI, newFocusCI, newFocusColHeaderCI;

            if (updatingReturn.oldFocus != null) {
                oldFocusCI = tableMgr.GetCellByIdx(updatingReturn.oldFocus.rowIdx, updatingReturn.oldFocus.colIdx);
                oldFocusColHeaderCI = tableMgr.GetColumnHeader(updatingReturn.oldFocus.colIdx);
                if (oldFocusCI != null) {
                    ToggleEditableCssClass(oldFocusCI, false);
                }
            }
            if (newFocus != null) {
                newFocusCI = tableMgr.GetCellByIdx(newFocus.rowIdx, newFocus.colIdx);
                newFocusColHeaderCI = tableMgr.GetColumnHeader(newFocus.colIdx);
                if (newFocusCI != null) {
                    ToggleEditableCssClass(newFocusCI, true);
                }
            }
            ariaMgr.OnFocusCell(this.Id, oldFocusCI, oldFocusColHeaderCI, newFocusCI, newFocusColHeaderCI);
            function ToggleEditableCssClass(ci, bFocused) {
                if (objBag.editUtil.IsEditingEnabled() && objBag.editUtil.CanEditField(ci.GetRecord(), ci.GetColumn(), ci.GetFieldKey())) {
                    var td = ci.GetTd();

                    if (bFocused) {
                        Sys.UI.DomElement.addCssClass(td, "ms-jsgrid-cell-selected-editable");
                    }
                    else {
                        Sys.UI.DomElement.removeCssClass(td, "ms-jsgrid-cell-selected-editable");
                    }
                }
            }
            function UpdateCellBackgrounds(clearedCells, selectedCells, oldFocus, newFocus) {
                var cellsToRefresh = clearedCells.SymmetricDifference(selectedCells);

                if (oldFocus != null) {
                    cellsToRefresh.Remove(SP.JsGrid.Internal.MakeCellKey(oldFocus.rowIdx, oldFocus.colIdx));
                    RefreshCellStyleForFocusedCell(oldFocus);
                }
                if (newFocus != null) {
                    cellsToRefresh.Remove(SP.JsGrid.Internal.MakeCellKey(newFocus.rowIdx, newFocus.colIdx));
                    RefreshCellStyleForFocusedCell(newFocus);
                }
                for (var i in cellsToRefresh.GetCollection()) {
                    var ind = SP.JsGrid.Internal.CrackCellKey(i);
                    var ci = tableMgr.GetCellByIdx(ind.rowIdx, ind.colIdx);

                    if (ci != null) {
                        RefreshCellStyle(ci, false, true);
                    }
                }
                function RefreshCellStyleForFocusedCell(focusedObj) {
                    var ci = tableMgr.GetCellByIdx(focusedObj.rowIdx, focusedObj.colIdx);

                    if (ci != null) {
                        RefreshCellStyle(ci, false, true);
                    }
                    else {
                        ApplyGridComputedCellStyle(focusedObj.recordKey, focusedObj.fieldKey, null, false);
                    }
                }
            }
            function UpdateHeaders() {
                var hdrs = tableMgr.GetColumnHeaders();

                for (var i = 0; i < hdrs.length; i++) {
                    headerMgr.ApplyHeaderStyle(hdrs[i].GetTd(), GetHeaderStyle(hdrs[i].GetColIdx(), false), hdrs[i].GetColIdx() == activeColIdx);
                }
                hdrs = tableMgr.GetRowHeaders();
                for (var i = 0; i < hdrs.length; i++) {
                    var hdrTd = hdrs[i].GetTd();

                    SP.JsGrid.Style.ApplyRowHeaderStyle(hdrTd, GetHeaderStyle(hdrs[i].GetRowIdx(), true), GetRowHeaderSibling);
                    var rowIsSelected = selectionMgr.IsRowSelected(gridPane, hdrs[i].GetRowIdx());

                    ariaMgr.SetSelected(hdrTd.parentNode, rowIsSelected);
                }
            }
        };
        this.GetMinHeaderHeight = function() {
            return 31;
        };
        this.SetHeaderHeight = function(newHeight) {
            tableMgr.SetHeaderHeight(newHeight);
        };
        this.ScrollColumnIntoViewHorizontally = function(colIdx) {
            if (colIdx <= tableMgr.BeginColIdx()) {
                return horizScrollBar.Update({
                    topItemIdx: colIdx
                });
            }
            else {
                var hdr = tableMgr.GetColumnHeader(colIdx);
                var th = hdr && hdr.GetTd();
                var bThPartiallyShown = th && (objBag.RTL.bEnabled ? (tableMgr.GetTdCoords(th)).left < 0 : (tableMgr.GetTdCoords(th)).right > paneSize.GetWidth());

                if (!th || bThPartiallyShown) {
                    var rowHeaderSize = tableMgr.GetSelectAllSquare() ? ((tableMgr.GetSelectAllSquare()).GetTd()).offsetWidth : 0;

                    for (var rem = paneSize.GetWidth() - rowHeaderSize - (paneConverter.GetColumnByIdx(colIdx)).width; colIdx > 0 && (rem -= (paneConverter.GetColumnByIdx(colIdx - 1)).width, rem >= 0); colIdx--) { }
                    return horizScrollBar.Update({
                        topItemIdx: colIdx
                    });
                }
            }
            return false;
        };
        this.NotifyUpdateProperty = function(recordKey, fieldKey, bHighlightChange, optPropUpdate, validationState, changeKey) {
            if (bHighlightChange) {
                changeHighlightMgr.AddCell(recordKey, fieldKey);
            }
            var ci = tableMgr.GetCellByKey(recordKey, fieldKey);

            if (ci != null) {
                if (optPropUpdate != null && validationState == SP.JsGrid.ValidationState.Valid) {
                    editMgr.NotifyUpdateProperty(this, recordKey, fieldKey, optPropUpdate, changeKey);
                }
                tableMgr.RefreshCell(ci);
                UpdatePositionedElements();
                editMgr.NotifyMove(gridPane);
            }
        };
        this.BeginRowIdx = function() {
            return tableMgr.BeginRowIdx();
        };
        this.BeginColIdx = function() {
            return tableMgr.BeginColIdx();
        };
        this.ShowColumn = function(columnKey, atColIdx) {
            if (paneConverter.GetColumnByKey(columnKey) == null) {
                ShowColumn(allColumns.GetColumnByKey(columnKey), atColIdx);
            }
        };
        this.HideColumn = function(columnKey) {
            var column = paneConverter.GetColumnByKey(columnKey);

            if (column != null) {
                HideColumn(column);
            }
        };
        this.RenameColumn = function(columnKey) {
            editMgr.Unbind();
            headerMgr.RenameColumn(columnKey);
        };
        this.DeleteColumn = function(columnKey) {
            var column = paneConverter.GetColumnByKey(columnKey);

            if (column != null) {
                HideColumn(column);
                allColumns.RemoveColumn(columnKey);
            }
        };
        this.UpdateColumns = function(columnInfoCollection) {
            InitColumns(columnInfoCollection, false);
        };
        this.GetVisibleColumns = function() {
            var r = [];

            for (var i = 0; i < paneConverter.GetVirtualColumnCount(); i++) {
                var column = paneConverter.GetColumnByIdx(i);

                r.push({
                    columnKey: column.columnKey,
                    width: column.width
                });
            }
            return r;
        };
        this.GetAllColumns = function() {
            return allColumns;
        };
        this.GetColumns = function() {
            var columns = [];
            var allColArray = allColumns.GetColumnArray();

            for (var i = 0; i < allColArray.length; i++) {
                columns.push(allColArray[i]);
            }
            return columns;
        };
        this.GetFocusedCell = function() {
            var focusPos = selectionMgr.GetFocusForPane(gridPane);
            var ci = focusPos && tableMgr.GetCellByIdx(focusPos.rowIdx, focusPos.colIdx);

            return ci != null && ci.GetCellType() == tableMgr.CellType.Cell ? ci : null;
        };
        this.GetData = function(recordMap, rowRange, colRange) {
            var matrix = new Array(rowRange.Size());

            for (var i = rowRange.begin; i <= rowRange.end; i++) {
                var rowBuffer = new Array(colRange.Size());

                for (var j = colRange.begin; j <= colRange.end; j++) {
                    var keys = paneConverter.IdxToKey(i, j);

                    rowBuffer[j - colRange.begin] = objBag.editUtil.GetFieldValueForCopy(recordMap[keys.recordKey], keys.fieldKey);
                }
                matrix[i - rowRange.begin] = rowBuffer;
            }
            return {
                matrix: matrix,
                height: rowRange.Size(),
                width: colRange.Size()
            };
        };
        this.PutData = function(srcMatrix, recordMap, commandName, repeatOrigin, destRowRange, destColRange, fnComplete, bInNewRow) {
            var propertyUpdates = new Array(destRowRange.Size() * destColRange.Size());
            var srcHeight = srcMatrix.height;
            var srcWidth = srcMatrix.width;
            var rowOffset = -destRowRange.begin + (repeatOrigin == 'TL' || repeatOrigin == 'TR' ? 0 : srcHeight - destRowRange.Size() % srcHeight);
            var colOffset = -destColRange.begin + (repeatOrigin == 'TL' || repeatOrigin == 'BL' ? 0 : srcWidth - destColRange.Size() % srcWidth);
            var cmd = objBag.controller.CreateDataUpdateCmd(true);
            var changeKey = cmd.GetChangeKey();

            objBag.commandMgr.Execute(cmd, commandName, SP.JsGrid.CommandManager.CommandType.Explicit);
            var readRowIdx = writeRowIdx = destRowRange.begin;
            var totalWork = destRowRange.Size() * destColRange.Size();
            var taskChunkSize = 100, updateCount = 0;

            objBag.intDelegateMgr.Apply(SP.JsGrid.Internal.DelegateType.DoLargeTask, totalWork, taskChunkSize, ProcessChunk, UpdateProperties, SP.JsGrid.AsynchronousTaskManager.Priority.SuperHigh);
            function ProcessChunk(completedWork, chunkStoppingPoint) {
                var bWroteToRow;

                while (readRowIdx <= destRowRange.end) {
                    bWroteToRow = false;
                    for (var colIdx = destColRange.begin; colIdx <= destColRange.end; colIdx++) {
                        var keys = paneConverter.IdxToKey(writeRowIdx, colIdx);

                        if (objBag.editUtil.CanEditField(bInNewRow ? objBag.entryRecordMgr.GetEntryRecord(keys.recordKey) : recordMap[keys.recordKey], paneConverter.GetColumnByIdx(colIdx), keys.fieldKey)) {
                            propertyUpdates[updateCount++] = SP.JsGrid.CreateUnvalidatedPropertyUpdate(keys.recordKey, keys.fieldKey, srcMatrix.matrix[(readRowIdx + rowOffset) % srcHeight][(colIdx + colOffset) % srcWidth], true);
                            if (!bWroteToRow && bInNewRow && keys.recordKey == objBag.entryRecordMgr.GetLastEntryKey()) {
                                objBag.entryRecordMgr.CreateEntryRows(1, readRowIdx != destRowRange.end, changeKey);
                            }
                            bWroteToRow = true;
                        }
                    }
                    if (!bInNewRow || bWroteToRow) {
                        writeRowIdx++;
                    }
                    readRowIdx++;
                    completedWork += destColRange.Size();
                    if (completedWork >= chunkStoppingPoint) {
                        break;
                    }
                }
                return completedWork;
            }
            function UpdateProperties() {
                if (updateCount > 0) {
                    objBag.controller.UpdateProperties(propertyUpdates.slice(0, updateCount), commandName, changeKey);
                }
                cmd.NotifyInitialUpdateComplete();
                fnComplete(writeRowIdx - destRowRange.begin);
            }
        };
        this.FieldKeyToColumnKey = function(fieldKey) {
            var allColArray = allColumns.GetColumnArray();

            for (var i = 0; i < allColArray.length; i++) {
                if (SP.Internal.JS.FindInArray(allColArray[i].fieldKeys, function(item) {
                    return item == fieldKey;
                }) != null) {
                    return allColArray[i].columnKey;
                }
            }
            return null;
        };
        this.EnsurePaneWidth = function() {
            var newTableWidth = tableMgr.GetTableWidth();
            var curPaneWidth = gridPane.paneSize.GetWidth();
            var newRequiredWidth = newTableWidth + 40;

            if (newRequiredWidth > curPaneWidth)
                gridPane.paneSize.SetValues(newRequiredWidth, gridPane.paneSize.GetLeftOffset());
        };
        this.ExecuteTouchAction = null;
        this.ShouldUpdateTouchStartPosition = null;
        this.ScrollVerticallyByTouch = fnScrollVerticallyByTouch;
        this.ScrollHorizontallyByTouch = function(bScrollLeft) {
            if (bScrollLeft) {
                horizScrollBar.ScrollUpByOne();
            }
            else {
                horizScrollBar.ScrollDownByOne();
            }
        };
        function Init() {
            headerMgr = new SP.JsGrid.Internal.HeaderManager(objBag, styles, fnGetLocStr, UpdatePositionedElements);
            var resizeTimer;

            computeGridCellStyleJobKey = SP.JsGrid.AsynchronousCellUpdater.RegisterJob(ApplyGridComputedCellStyle);
            computeGridROStyleJobKey = SP.JsGrid.AsynchronousCellUpdater.RegisterJob(ApplyReadOnlyStyle);
            disposeRenderedObjectsJobKey = SP.JsGrid.AsynchronousCellUpdater.RegisterJob(DisposeContents);
            CreateTopLevelHtmlElements();
            CreateColumnConfigurationHtmlElements();
            tableMgr = new SP.JsGrid.Internal.TableManager(tableDiv, parentNode.id, paneSize, fnGetLocStr, objBag, OnInsertedRow, OnInsertedColumns, OnRemovedColumns, OnRemovedHeaderCell, OnSetHeaderHeight, BuildCellContent, fnRetryErrorRows, TryDisposeRow);
            paneConverter = tableMgr.GetGridPaneConverter();
            mouseHandlers = new SetUpPaneMouseHandlers(gridPane);
            $addHandler(window, 'resize', OnWindowResize);
            onResizeHandler = OnWindowResize;
            function OnRemovedColumns() {
                if (!objBag.spGrid)
                    UpdateLeftmostColumnStyle();
                if (curColUpdateTimeOut == null) {
                    curColUpdateTimeOut = setTimeout(UpdateFirstDisplayColumn, 0);
                }
            }
            function OnRemovedHeaderCell(th) {
                headerMgr.DisposeHeader(th);
            }
            function OnSetHeaderHeight(height) {
                headerMgr.UpdateHeaderHeights(height);
            }
            function OnWindowResize(event) {
                function OnWindowResizeTimerHandler() {
                    if (bIsDisposed) {
                        return;
                    }
                    tableMgr.UpdateCoordCache();
                    UpdatePositionedElements();
                    if (!objBag.spGrid) {
                        editMgr.NotifyMove(gridPane);
                    }
                }
                if (resizeTimer != null) {
                    clearTimeout(resizeTimer);
                }
                resizeTimer = setTimeout(OnWindowResizeTimerHandler, 75);
            }
            if (!objBag.spGrid)
                parentNode.style.backgroundColor = styles.gridPaneStyle.backgroundColor;
        }
        function CreateTopLevelHtmlElements() {
            parentNode.style.verticalAlign = 'top';
            tableDiv = document.createElement('div');
            if (objBag.spGrid)
                tableDiv.style.cssText = 'position:relative;text-align:' + objBag.RTL.left;
            else
                tableDiv.style.cssText = 'overflow:hidden;position:relative;text-align:' + objBag.RTL.left;
            tableDiv.name = "tableDiv";
            parentNode.appendChild(tableDiv);
            horizScrollBarContainer = document.createElement('div');
            horizScrollBarContainer.style.height = SP.Internal.ScrollBar.GetSystemScrollBarThickness() + 'px';
            if (objBag.spGrid)
                horizScrollBarContainer.style.display = "none";
            parentNode.appendChild(horizScrollBarContainer);
            horizScrollBar = new SP.JsGrid.Internal.ScrollBar(SP.JsGrid.Internal.ScrollBar.BarType.Horizontal, horizScrollBarContainer, false, {
                itemSize: 100
            }, styles.scrollBarStyle, objBag.RTL.bEnabled, objBag);
            if (!objBag.spGrid)
                horizScrollBar.SetOnScroll(OnHorizontalScroll);
            if (fnNotifyScrollBarVisibilityChange != null) {
                horizScrollBar.SetOnVisibilityChanged(OnHorizontalScrollbarVisibilityChanged, true);
            }
        }
        function GetEffectiveHorizontalScrollBarHeight() {
            return horizScrollBarContainer.style.display == 'none' ? 0 : SP.Internal.ScrollBar.GetSystemScrollBarThickness();
        }
        function OnHorizontalScrollbarVisibilityChanged(bVisible) {
            horizScrollBarContainer.style.display = bVisible ? '' : 'none';
            ResizeTableDiv();
            fnNotifyScrollBarVisibilityChange(bVisible);
        }
        function ResizeTableDiv() {
            if (!objBag.spGrid) {
                var tableDivHeight = Math.max(0, paneSize.GetHeight() - GetEffectiveHorizontalScrollBarHeight());

                tableDiv.style.height = tableDivHeight + 'px';
                RecomputeTableViewportRelativeToParentNode(tableDivHeight);
            }
        }
        function OnHorizontalScroll(newColDrawInfo, originalTopPos) {
            tableMgr.ScrollColumns(newColDrawInfo.topIdx);
            UpdatePositionedElements();
            editMgr.NotifyMove(gridPane);
        }
        function InitColumns(pAllColumns, bNewView) {
            var origFocus = selectionMgr.GetFocusForPane(gridPane);

            allColumns = pAllColumns;
            var colArray = allColumns.GetColumnArray();

            itemSizes = [];
            var visColumns = [];

            for (var i = 0; i < colArray.length; i++) {
                var column = colArray[i];

                if (objBag.spGrid || column.isVisible) {
                    headerMgr.AdjustColumnWidth(column);
                    itemSizes.push(column.width);
                    visColumns.push(column);
                }
            }
            horizScrollBar.Update({
                itemCount: visColumns.length,
                itemSizes: itemSizes
            });
            tableMgr.SetColumns(visColumns, bNewView);
            if (!bNewView) {
                TryRestoreFocusAfterInsertOrDeleteColumns(origFocus);
                UpdatePositionedElements();
                editMgr.NotifyMove(gridPane);
            }
        }
        function ActivateRow(rowIdx) {
            if (activeRowIdx != null) {
                DeactivateRow();
            }
            activeRowIdx = rowIdx;
            if (!objBag.spGrid)
                SP.JsGrid.Style.ApplyRowHeaderStyle((tableMgr.GetRowHeader(rowIdx)).GetTd(), GetHeaderStyle(rowIdx, true), GetRowHeaderSibling);
        }
        function DeactivateRow() {
            if (activeRowIdx != null) {
                var rowIdx = activeRowIdx;

                activeRowIdx = null;
                var hdr = tableMgr.GetRowHeader(rowIdx);

                if (hdr != null && !objBag.spGrid) {
                    SP.JsGrid.Style.ApplyRowHeaderStyle(hdr.GetTd(), GetHeaderStyle(rowIdx, true), GetRowHeaderSibling);
                }
            }
        }
        function ActivateColumn(colIdx) {
            if (activeColIdx != colIdx) {
                DeactivateColumn();
                activeColIdx = colIdx;
                headerMgr.ApplyHeaderStyle((tableMgr.GetColumnHeader(colIdx)).GetTd(), GetHeaderStyle(colIdx, false), true);
            }
            if (objBag.spGrid) {
                var columnHeader = tableMgr.GetColumnHeader(colIdx);
                var column = columnHeader.GetColumn();
                var th = columnHeader.GetTd();
                var columnKey = column.columnKey;
                var headerDivs = headerMgr.GetChildObjects(columnKey);

                PositionCtxImg(headerDivs.menu, th);
                var menuHeight = getWidthFromPxString(headerDivs.menu.style.height);

                headerDivs.menuImg.style.top = (menuHeight - 6) / 2 + 'px';
                var menuWidth = getWidthFromPxString(GetCurrentEltStyle(headerDivs.menu, "width"));

                headerDivs.menuImg.style.left = (menuWidth - 9) / 2 + 'px';
                Sys.UI.DomElement.addCssClass(headerDivs.menu, "s4-ctx-show");
                if (!column.bOpenMenuOnContentClick) {
                    headerDivs.menu.style.visibility = "visible";
                    headerDivs.menuImg.style.visibility = "visible";
                }
            }
            else
                headerMgr.ShowMenuOnColumn((tableMgr.GetColumnHeader(colIdx)).GetTd());
        }
        function getCurrentEltStyleByNames(elem, styleNames) {
            var style = null;
            var i = 0;

            while (i < styleNames.length) {
                style = GetCurrentEltStyle(elem, styleNames[i]);
                if (style != null) {
                    break;
                }
                i++;
            }
            return style;
        }
        function getWidthFromPxString(pxString) {
            if (typeof pxString != "string")
                return 0;
            var trimmedPxString = pxString.trim();
            var pxWidth = Number((trimmedPxString.substring(0, trimmedPxString.length - 2)).trim());

            return isNaN(pxWidth) ? 0 : pxWidth;
        }
        function DeactivateColumn() {
            if (activeColIdx != null && (lockedColIdx == null || activeColIdx != lockedColIdx)) {
                var colIdx = activeColIdx;

                activeColIdx = null;
                var hdr = tableMgr.GetColumnHeader(colIdx);

                if (hdr != null) {
                    headerMgr.ApplyHeaderStyle(hdr.GetTd(), GetHeaderStyle(colIdx, false));
                }
                if (objBag.spGrid) {
                    var columnKey = ((tableMgr.GetColumnHeader(colIdx)).GetColumn()).columnKey;
                    var headerDivs = headerMgr.GetChildObjects(columnKey);

                    Sys.UI.DomElement.removeCssClass(headerDivs.menu, "s4-ctx-show");
                    headerDivs.menuImg.style.visibility = "hidden";
                    headerDivs.menu.style.visibility = "hidden";
                }
                else
                    headerMgr.HideMenuOnColumn();
            }
        }
        function CreateColumnConfigurationHtmlElements() {
            ghostHeader = document.createElement('table');
            ghostHeader.style.cssText = 'position:absolute; visibility:hidden; table-layout:fixed;z-index:1;padding-' + objBag.RTL.left + ':7px;';
            tableDiv.appendChild(ghostHeader);
            ghostHeader.cellPadding = (ghostHeader.cellSpacing = 0);
            var th = (ghostHeader.insertRow(-1)).appendChild(document.createElement('th'));

            if (!objBag.spGrid) {
                var hdrStyle = styles.columnHeaderStyleCollection.normal;

                th.style.borderLeft = (th.style.borderRight = SP.JsGrid.Style.MakeBorderString(1, 'solid', hdrStyle.innerBorderColor));
                th.style.borderTop = SP.JsGrid.Style.MakeBorderString(1, 'solid', hdrStyle.outerBorderColor);
            }
            ghostHeader.textDiv = th.appendChild(document.createElement('div'));
            if (objBag.spGrid)
                ghostHeader.textDiv.style.cssText = 'text-overflow:none; width:100%; margin-' + objBag.RTL.left + ':-1px;';
            else
                ghostHeader.textDiv.style.cssText = 'text-overflow:none; overflow:hidden; width:100%; margin-' + objBag.RTL.left + ':-1px;';
            columnDropIndic = document.createElement('div');
            if (objBag.spGrid)
                columnDropIndic.style.cssText = 'visibility:hidden; width:3px; position:absolute';
            else
                columnDropIndic.style.cssText = 'visibility:hidden; width:3px; background-color:' + styles.gridPaneStyle.columnDropIndicatorColor + '; position:absolute';
            tableDiv.appendChild(columnDropIndic);
            rowDropIndic = document.createElement('div');
            rowDropIndic.style.cssText = 'visibility:hidden; height:3px; background-color:' + styles.gridPaneStyle.rowDropIndicatorColor + '; position:absolute';
            tableDiv.appendChild(rowDropIndic);
        }
        function DisposeContents(recordKey, fieldKey, disposeFns) {
            for (var i = 0; i < disposeFns.length; i++) {
                disposeFns[i]();
            }
        }
        function ApplyReadOnlyStyle(recordKey, fieldKey, style) {
            var cellInfo = tableMgr.GetCellByKey(recordKey, fieldKey);

            if (cellInfo == null || !objBag.editUtil.IsEditingEnabled()) {
                return;
            }
            if (!objBag.editUtil.CanEditField(cellInfo.GetRecord(), cellInfo.GetColumn(), fieldKey) && (focusedReadOnlyCell == null || focusedReadOnlyCell.rk != recordKey || focusedReadOnlyCell.fk != fieldKey)) {
                if (objBag.delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.GetFieldReadOnlyActiveState) && objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.GetFieldReadOnlyActiveState, fieldKey) == SP.JsGrid.ReadOnlyActiveState.ReadOnlyActive) {
                    return;
                }
                var styleToApply = SP.JsGrid.Style.MergeCellStyles(style, styles.readOnlyCellStyle);

                if (styleToApply.backgroundColor != null) {
                    var td = cellInfo.GetTd();
                    var currentBgColor = SP.Internal.DomElement.GetComputedStyle(td, 'backgroundColor', 'background-color');
                    var currentComputedColor = td.computedBackgroundColor;

                    td.computedBackgroundColor = styleToApply.backgroundColor;
                    if (currentComputedColor != currentBgColor) {
                        ApplyGridComputedCellStyle(recordKey, fieldKey, cellInfo);
                        delete styleToApply.backgroundColor;
                    }
                    SP.JsGrid.Style.ApplyCellStyle(cellInfo.GetTd(), styleToApply);
                }
                else {
                    SP.JsGrid.Style.ApplyCellStyle(cellInfo.GetTd(), styleToApply);
                }
            }
        }
        function ApplyGridComputedCellStyle(recordKey, fieldKey, optCi, bIgnoreChangeHighlighting) {
            var td;
            var ci = optCi == null ? tableMgr.GetCellByKey(recordKey, fieldKey) : optCi;

            if (ci != null) {
                td = ci.GetTd();
            }
            var curFocusedCell;

            if (focusedReadOnlyCell != null && focusedReadOnlyCell.rk == recordKey && focusedReadOnlyCell.fk == fieldKey) {
                curFocusedCell = focusedReadOnlyCell;
                focusedReadOnlyCell = null;
            }
            if (td == null || ci == null) {
                return;
            }
            var isChanged = changeHighlightMgr.IsCellIn(recordKey, fieldKey);
            var ind = paneConverter.KeyToIdx(recordKey, fieldKey);
            var focusPos = selectionMgr.GetFocusForPane(gridPane);
            var isSelected = ind != null && selectionMgr.IsCellSelected(gridPane, ind.rowIdx, ind.colIdx);
            var isFocused = ind != null && focusPos != null && ind.rowIdx == focusPos.rowIdx && ind.colIdx == focusPos.colIdx;
            var isSelectedAndNotFocused = isSelected && !isFocused;
            var isFocusedAndReadOnly = null;

            if (td.computedBackgroundColor == null && isFocused && objBag.editUtil.IsEditingEnabled() && !objBag.editUtil.CanEditField(ci.GetRecord(), ci.GetColumn(), ci.GetFieldKey())) {
                focusedReadOnlyCell = {
                    rk: recordKey,
                    fk: fieldKey,
                    textColor: curFocusedCell != null ? curFocusedCell.textColor : td.style.color,
                    backgroundColor: curFocusedCell != null ? curFocusedCell.backgroudColor : td.style.backgroundColor
                };
                if (!objBag.delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.GetFieldReadOnlyActiveState) || objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.GetFieldReadOnlyActiveState, fieldKey) != SP.JsGrid.ReadOnlyActiveState.ReadOnlyActive) {
                    td.style.backgroundColor = styles.readOnlyFocusedCellStyle.backgroundColor;
                    td.style.color = styles.readOnlyFocusedCellStyle.textColor;
                    isFocusedAndReadOnly = true;
                }
            }
            else if (curFocusedCell != null) {
                td.style.color = curFocusedCell.textColor;
                td.style.backgroundColor = curFocusedCell.backgroundColor;
            }
            if (!isFocusedAndReadOnly && (isChanged || isSelectedAndNotFocused)) {
                var backColorString = td.computedBackgroundColor;
                var backColor = SP.JsGrid.Internal.Color.HexStringToColor(backColorString == 'transparent' || backColorString == null ? styles.defaultCellStyle.backgroundColor != null ? styles.defaultCellStyle.backgroundColor : SP.JsGrid.Style.GetCellStyleDefaultBackgroundColor() : backColorString);

                if (isChanged && !bIgnoreChangeHighlighting) {
                    var alphaColor = styles.gridPaneStyle.changeHighlightCellBgColor;

                    if (alphaColor != null) {
                        backColor = alphaColor;
                    }
                }
                if (isSelectedAndNotFocused) {
                    var alphaColor = styles.gridPaneStyle.selectedCellBgColor;

                    if (alphaColor != null) {
                        backColor = alphaColor;
                    }
                }
                if (backColor != null) {
                    td.style.backgroundColor = SP.JsGrid.Internal.Color.ColorToHexString(SP.JsGrid.Internal.Color.RemoveAlphaChannel(backColor));
                }
            }
            ariaMgr.SetSelected(td, isSelected);
            return;
        }
        function GetCurrentCellStyle(record, column, fieldKey, bCopyDefaults) {
            var r = {};

            if (bCopyDefaults) {
                r = SP.JsGrid.Style.MergeCellStyles(styles.defaultCellStyle, r);
            }
            var emptyRow = record == null;
            var propType;

            if (emptyRow) {
                propType = gridFieldMap[fieldKey].GetPropType();
            }
            else {
                var prop = record.GetProp(fieldKey);

                propType = prop != null ? prop.propType : null;
            }
            if (propType != null && propType.GetStyleId != null) {
                var s = propType.GetStyleId(emptyRow ? null : record.GetDataValue(fieldKey));

                if (s != null) {
                    r = SP.JsGrid.Style.MergeCellStyles(styles.GetCellStyle(s), r);
                }
            }
            if (!emptyRow) {
                if (objBag.jsGridParams.tableViewParams.rowViewParams.hierarchyMode == SP.JsGrid.HierarchyMode.Grouping && styles.groupingStyles != null && styles.groupingStyles.length > 0) {
                    var hierarchyMgr = objBag.controller.GetHierarchyManager();

                    if (hierarchyMgr.IsGroupingRecord(record.key())) {
                        r = SP.JsGrid.Style.MergeCellStyles(styles.groupingStyles[hierarchyMgr.GetNodeIndentLevel(record) % styles.groupingStyles.length], r);
                    }
                }
                var rowCellStyleId = fnGetGridRowStyleId && fnGetGridRowStyleId(record);

                rowCellStyleId = rowCellStyleId != null ? rowCellStyleId : operationalUtil.GetValue(record, SP.JsGrid.OperationalConstants.GridRowStyleId);
                if (rowCellStyleId != null) {
                    var rowCellStyle = styles.GetCellStyle(rowCellStyleId);

                    if (rowCellStyle != null) {
                        r = SP.JsGrid.Style.MergeCellStyles(rowCellStyle, r);
                    }
                }
            }
            var styleId = gridFieldMap[fieldKey].GetDefaultCellStyleId();

            if (styleId != null) {
                r = SP.JsGrid.Style.MergeCellStyles(styles.GetCellStyle(styleId), r);
            }
            if (column.fnGetCellStyleId != null && !emptyRow) {
                var id = column.fnGetCellStyleId(record, fieldKey, record.HasDataValue(fieldKey) ? record.GetDataValue(fieldKey) : null);

                if (id != null) {
                    var s = styles.GetCellStyle(id);

                    if (s != null) {
                        r = SP.JsGrid.Style.MergeCellStyles(s, r);
                    }
                }
            }
            return r;
        }
        function RefreshCellStyle(cellInfo, bIgnoreChangeHighlighting, bComputeGridCellStyle) {
            var record = cellInfo.GetRecord();
            var column = cellInfo.GetColumn();
            var fieldKey = cellInfo.GetFieldKey();
            var td = cellInfo.GetTd();
            var recordKey = record != null ? record.recordKey : cellInfo.GetRecordKey();

            if (td.style.backgroundColor != '') {
                td.style.backgroundColor = '';
            }
            var r = GetCurrentCellStyle(record, column, fieldKey, false);

            if (!SP.Internal.JS.IsAssocArrayEmpty(r)) {
                SP.JsGrid.Style.ApplyCellStyle(td, r);
                if (focusedReadOnlyCell != null && focusedReadOnlyCell.rk == recordKey && focusedReadOnlyCell.fk == fieldKey) {
                    focusedReadOnlyCell.textColor = r.textColor != null ? r.textColor : styles.defaultCellStyle.textColor != null ? styles.defaultCellStyle.textColor : '';
                    focusedReadOnlyCell.backgroundColor = r.backgroundColor != null ? r.backgroundColor : styles.defaultCellStyle.backgroundColor != null ? styles.defaultCellStyle.backgroundColor : '';
                    ;
                }
            }
            td.computedBackgroundColor = r.backgroundColor;
            if (bComputeGridCellStyle) {
                ApplyGridComputedCellStyle(recordKey, fieldKey, cellInfo, bIgnoreChangeHighlighting);
            }
            else {
                SP.JsGrid.AsynchronousCellUpdater.RegisterCell(computeGridCellStyleJobKey, recordKey, fieldKey);
            }
            if (objBag.editUtil.IsEditingEnabled()) {
                SP.JsGrid.AsynchronousCellUpdater.RegisterCell(computeGridROStyleJobKey, recordKey, fieldKey, r);
            }
            return r;
        }
        function ResetSelection() {
            var focusPos = selectionMgr.GetFocusForPane(gridPane);

            objBag.bUpdateCoordCache = true;
            if (focusPos != null) {
                selectionMgr.SelectRange(gridPane, focusPos.rowIdx, focusPos.rowIdx, focusPos.colIdx, focusPos.colIdx, SelectOp.Set, false, false);
            }
        }
        function BindEditControl() {
            var focusPos = selectionMgr.GetFocusForPane(gridPane);

            if (focusPos != null) {
                var ci = tableMgr.GetCellByIdx(focusPos.rowIdx, focusPos.colIdx);

                if (ci != null && ci.GetCellType() == tableMgr.CellType.Cell) {
                    var record = ci.GetRecord();
                    var column = ci.GetColumn();
                    var fieldKey = ci.GetFieldKey();

                    if (editMgr.IsBound() && (record == null || !editMgr.IsBoundToCell(gridPane, record.key(), fieldKey))) {
                        editMgr.Unbind(function() {
                            TryBind(ci, record, column, fieldKey);
                        });
                    }
                    else {
                        TryBind(ci, record, column, fieldKey);
                    }
                }
            }
            function TryBind(ci, record, column, fieldKey) {
                if (!editMgr.IsBound() && record != null && objBag.editUtil.CanBindToField(record, column, fieldKey)) {
                    editMgr.BindToCell(gridPane, record, column, fieldKey, gridFieldMap, ci, RefreshCellStyle(ci, false, true));
                }
            }
        }
        this.TryShiftColumnSelectionGroup = function(rowIdx, colIdx, n) {
            var r = false;

            if (bMovableColumns) {
                Sys.Debug.assert(n != 0);
                var rowRg = selectionMgr.GetRowRanges(gridPane);
                var colRg = selectionMgr.GetColumnRanges(gridPane);
                var cellRg = selectionMgr.GetCellRanges(gridPane);
                var noRowRanges = rowRg == null || rowRg.length == 0;
                var noColRanges = colRg == null || colRg.length == 0;
                var noCellRanges = cellRg == null || cellRg.length == 0;

                if (noRowRanges && (noColRanges || noCellRanges) && (noColRanges || colRg.length == 1) && (noCellRanges || cellRg.length == 1)) {
                    var relevantRange = noColRanges ? cellRg[0].colRange : colRg[0];
                    var curIdx = n > 0 ? relevantRange.end + 1 : relevantRange.begin - 1;

                    if (curIdx >= 0 && curIdx < paneConverter.GetVirtualColumnCount()) {
                        var selType = noColRanges ? SP.JsGrid.SelectionType.CellRange : SP.JsGrid.SelectionType.ColumnRange;
                        var cmds = [CreateSingleSelectionCmd(rowIdx, colIdx, noColRanges ? cellRg[0] : colRg[0], selType, true, false)];

                        for (var i = relevantRange.begin; i <= relevantRange.end; i++) {
                            var nextIdx = curIdx + (n > 0 ? -1 : 1);

                            cmds.push(CreateMoveColumnCommand(curIdx, nextIdx));
                            curIdx = nextIdx;
                        }
                        var colDelta = n > 0 ? 1 : -1;

                        relevantRange.begin += colDelta;
                        relevantRange.end += colDelta;
                        colIdx += colDelta;
                        cmds.push(CreateSingleSelectionCmd(rowIdx, colIdx, noColRanges ? cellRg[0] : colRg[0], selType, false, true));
                        commandMgr.Execute(new SP.JsGrid.CommandManager.AggregateCommand(cmds, true), "Column Reorder", SP.JsGrid.CommandManager.CommandType.Explicit);
                        r = true;
                    }
                }
            }
            return r;
        };
        function CreateSingleSelectionCmd(focusRowIdx, focusColIdx, range, selType, optIgnoreApply, optIgnoreUndo) {
            var rowIdx1, rowIdx2, colIdx1, colIdx2;

            if (selType == SP.JsGrid.SelectionType.ColumnRange) {
                colIdx1 = range.begin;
                colIdx2 = range.end;
            }
            if (selType == SP.JsGrid.SelectionType.CellRange) {
                colIdx1 = range.colRange.begin;
                colIdx2 = range.colRange.end;
                rowIdx1 = range.rowRange.begin;
                rowIdx2 = range.rowRange.end;
            }
            function SelectRange() {
                selectionMgr.SetFocusByPos(gridPane, focusRowIdx, focusColIdx);
                selectionMgr.SelectRange(gridPane, rowIdx1, rowIdx2, colIdx1, colIdx2, SP.JsGrid.Internal.SelectionManager.SelectOp.Set, true);
            }
            return {
                Apply: !optIgnoreApply ? SelectRange : function() {
                },
                Undo: !optIgnoreUndo ? SelectRange : function() {
                }
            };
        }
        function RecomputeTableViewportRelativeToParentNode(tableDivHeight) {
            tableViewportRelativeToParentNode = {
                left: 1 + paneSize.GetLeftOffset(),
                top: 1 + tableMgr.GetHeaderHeight(),
                right: 1 + paneSize.GetLeftOffset() + paneSize.GetWidth(),
                bottom: 1 + tableDivHeight
            };
            var xAdj = tableMgr.GetRowHeaderWidth() ? tableMgr.GetRowHeaderWidth() : 0;

            if (objBag.RTL.bEnabled) {
                tableViewportRelativeToParentNode.right -= xAdj;
            }
            else {
                tableViewportRelativeToParentNode.left += xAdj;
            }
        }
        this.GetTdCoordsRelativeToParentNode = function(td) {
            var cellCoords;

            if (td.parentNode != null) {
                cellCoords = tableMgr.GetTdCoords(td);
                cellCoords.left += 1 + paneSize.GetLeftOffset();
                cellCoords.right += 1 + paneSize.GetLeftOffset();
                cellCoords.top += 1;
                cellCoords.bottom += 1;
            }
            return cellCoords;
        };
        this.GetTableViewportRelativeToParentNode = function() {
            if (objBag.spGrid) {
                var minHeight = Math.max(tableDiv.offsetHeight, 400);

                RecomputeTableViewportRelativeToParentNode(minHeight);
            }
            return tableViewportRelativeToParentNode;
        };
        this.ClipElementToTableViewport = function(elem) {
            if (objBag.spGrid)
                return;
            Sys.Debug.assert(elem.offsetParent == objBag.parentNode, "This method only clips elements relative to grid parentNode!");
            var topClip = tableViewportRelativeToParentNode.top - elem.offsetTop + 'px';
            var rightClip = tableViewportRelativeToParentNode.right - elem.offsetLeft + 'px';
            var bottomClip = tableViewportRelativeToParentNode.bottom - elem.offsetTop + 'px';
            var leftClip = tableViewportRelativeToParentNode.left - elem.offsetLeft + 'px';

            elem.style.clip = ['rect(', topClip, rightClip, bottomClip, leftClip, ')'].join(' ');
        };
        this.GetCellRangeBorderDrawingInfo = function(rowRange, colRange) {
            var r = {};
            var tableBeginRowIdx = tableMgr.BeginRowIdx();
            var tableEndRowIdx = tableMgr.EndRowIdx() - 1;
            var tableBeginColIdx = tableMgr.BeginColIdx();
            var tableEndColIdx = tableMgr.EndColIdx() - 1;

            r.bBeginsBeforeColumnHeader = rowRange.begin < tableBeginRowIdx;
            var bBeginPastBottom = rowRange.begin > tableEndRowIdx;

            r.bBeginsBeforeRowHeader = colRange.begin < tableBeginColIdx;
            var bBeginPastRight = colRange.begin > tableEndColIdx;
            var bEndPastTop = rowRange.end < tableBeginRowIdx;
            var bEndPastBottom = rowRange.end > tableEndRowIdx;
            var bEndPastLeft = colRange.end < tableBeginColIdx;

            if (bBeginPastBottom || bBeginPastRight || bEndPastTop || bEndPastLeft) {
                return null;
            }
            var topLeftCell = tableMgr.GetCellByIdx(Math.max(tableBeginRowIdx, rowRange.begin), objBag.RTL.bEnabled ? Math.min(tableEndColIdx, colRange.end) : Math.max(tableBeginColIdx, colRange.begin));
            var bottomRightCell = tableMgr.GetCellByIdx(Math.min(tableEndRowIdx, rowRange.end), objBag.RTL.bEnabled ? Math.max(tableBeginColIdx, colRange.begin) : Math.min(tableEndColIdx, colRange.end));
            var topLeftTdCoords = this.GetTdCoordsRelativeToParentNode(topLeftCell.GetTd());
            var bottomRightTdCoords = this.GetTdCoordsRelativeToParentNode(bottomRightCell.GetTd());

            r.left = topLeftTdCoords.left;
            r.top = topLeftTdCoords.top;
            r.right = bottomRightTdCoords.right;
            r.bottom = bEndPastBottom ? r.top + paneSize.GetHeight() + 1 : bottomRightTdCoords.bottom;
            r.width = r.right - r.left - 2;
            r.height = r.bottom - r.top - 2;
            return r;
        };
        function UpdatePositionedElements(bUpdateCoordCache) {
            if (bUpdateCoordCache) {
                objBag.bUpdateCoordCache = true;
            }
            UpdateSelectionFrames(false);
            UpdateFocusFrames();
            UpdateCopyFrames();
            tableMgr.UpdateErrorFrames();
        }
        function HideSelectionFrames() {
            selDragHandle.style.visibility = 'hidden';
            for (var key in selFrames) {
                selFrames[key].style.visibility = 'hidden';
            }
        }
        function UpdateSelectionFrames(forBlur) {
            function BlurSelectionFrames() {
                selDragHandle.style.backgroundColor = const_BlurBorderColor;
                for (var key in selFrames) {
                    selFrames[key].style.borderColor = const_BlurBorderColor;
                }
            }
            if (forBlur) {
                BlurSelectionFrames();
                return;
            }
            if (selectionMgr.GetFocusForPane(gridPane) == null || !paneConverter.GetVirtualRowCount() || !paneConverter.GetVirtualColumnCount() || !cutcopypasteMgr.IsSelectionCopyable(gridPane)) {
                HideSelectionFrames();
                return;
            }
            var norm = selectionMgr.GetLastSelectionRangeNormalized();

            if (norm == null) {
                HideSelectionFrames();
                return;
            }
            var bShowGrayBorder = false;

            if (objBag.editUtil.IsEditingEnabled() && selectionMgr.IsOneCellSelected(norm)) {
                var ci = tableMgr.GetCellByIdx(norm.rowRange.begin, norm.colRange.begin);

                if (ci != null && !objBag.editUtil.CanEditField(ci.GetRecord(), ci.GetColumn(), ci.GetFieldKey()) && (!objBag.delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.GetFieldReadOnlyActiveState) || objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.GetFieldReadOnlyActiveState, ci.GetFieldKey()) != SP.JsGrid.ReadOnlyActiveState.ReadOnlyActive)) {
                    bShowGrayBorder = true;
                }
            }
            var borderInfo = gridPane.GetCellRangeBorderDrawingInfo(norm.rowRange, norm.colRange);

            if (borderInfo == null) {
                HideSelectionFrames();
                return;
            }
            var frameWidth = borderInfo.width + 2 + 2;
            var frameHeight = borderInfo.height + 2 + 2;
            var sfCoords = {
                Top: {
                    left: borderInfo.left - 1,
                    top: borderInfo.top - 1,
                    width: frameWidth,
                    visibility: ''
                },
                Right: {
                    left: borderInfo.right - 2,
                    top: borderInfo.top - 1,
                    height: frameHeight,
                    visibility: ''
                },
                Bottom: {
                    left: borderInfo.left - 1,
                    top: borderInfo.bottom - 2,
                    width: frameWidth,
                    visibility: ''
                },
                Left: {
                    left: borderInfo.left - 1,
                    top: borderInfo.top - 1,
                    height: frameHeight,
                    visibility: ''
                }
            };
            var selType = selectionMgr.GetLastSelectionType();

            if (borderInfo.bBeginsBeforeRowHeader) {
                sfCoords[objBag.RTL.Left].visibility = 'hidden';
            }
            if (borderInfo.bBeginsBeforeColumnHeader) {
                sfCoords.Top.visibility = 'hidden';
            }
            selDragHandle.style.visibility = 'hidden';
            if (objBag.editUtil.IsEditingEnabled() && objBag.jsGridParams.tableViewParams.bFillControlEnabled) {
                selDragHandle.style.backgroundColor = bShowGrayBorder ? styles.gridPaneStyle.readonlySelectionRectBorderColor : styles.gridPaneStyle.selectionRectBorderColor;
                if (selType == SP.JsGrid.SelectionType.RowRange) {
                    selDragHandle.style.visibility = '';
                    selDragHandle.style.top = borderInfo.bottom - 3 + 'px';
                    sfCoords[objBag.RTL.Left].height -= 5;
                    sfCoords.Bottom.width -= 9;
                    if (objBag.RTL.bEnabled) {
                        selDragHandle.style.left = borderInfo.right - 7 + 'px';
                    }
                    else {
                        selDragHandle.style.left = borderInfo.left + 2 + 'px';
                        sfCoords.Bottom.left += 9;
                    }
                }
                else if (selType == SP.JsGrid.SelectionType.ColumnRange) { }
                else {
                    selDragHandle.style.visibility = '';
                    selDragHandle.style.top = borderInfo.bottom - 3 + 'px';
                    sfCoords[objBag.RTL.Right].height -= 5;
                    sfCoords.Bottom.width -= 5;
                    if (objBag.RTL.bEnabled) {
                        selDragHandle.style.left = borderInfo.left - 2 + 'px';
                        sfCoords.Bottom.left += 5;
                    }
                    else {
                        selDragHandle.style.left = borderInfo.right - 3 + 'px';
                    }
                }
            }
            gridPane.ClipElementToTableViewport(selDragHandle);
            for (var key in selFrames) {
                selFrames[key].style.visibility = sfCoords[key].visibility;
                delete sfCoords[key].visibility;
                for (var propName in sfCoords[key]) {
                    selFrames[key].style[propName] = sfCoords[key][propName] + 'px';
                }
                selFrames[key].style['border' + key] = SP.JsGrid.Style.MakeBorderString(3, 'solid', bShowGrayBorder ? styles.gridPaneStyle.readonlySelectionRectBorderColor : styles.gridPaneStyle.selectionRectBorderColor);
                gridPane.ClipElementToTableViewport(selFrames[key]);
            }
        }
        function UpdateCopyFrames() {
            function HideCopyOutline() {
                for (var key in copyFrames) {
                    for (var cfKey in copyFrames[key]) {
                        copyFrames[key][cfKey].style.visibility = 'hidden';
                    }
                }
            }
            var lastOp = cutcopypasteMgr.GetLastOperation();
            var borderInfo = lastOp != null && lastOp.gridPane == gridPane ? gridPane.GetCellRangeBorderDrawingInfo(lastOp.rowRange, lastOp.colRange) : null;

            if (borderInfo == null) {
                HideCopyOutline();
                return;
            }
            var frameWidth = borderInfo.width + 2;
            var frameHeight = borderInfo.height + 2;
            var cfCoords = {
                Top: {
                    left: borderInfo.left,
                    top: borderInfo.top,
                    width: frameWidth,
                    visibility: ''
                },
                Right: {
                    left: borderInfo.right - 2,
                    top: borderInfo.top,
                    height: frameHeight,
                    visibility: ''
                },
                Bottom: {
                    left: borderInfo.left,
                    top: borderInfo.bottom - 2,
                    width: frameWidth,
                    visibility: ''
                },
                Left: {
                    left: borderInfo.left,
                    top: borderInfo.top,
                    height: frameHeight,
                    visibility: ''
                }
            };

            if (borderInfo.bBeginsBeforeRowHeader) {
                cfCoords[objBag.RTL.Left].visibility = 'hidden';
            }
            if (borderInfo.bBeginsBeforeColumnHeader) {
                cfCoords.Top.visibility = 'hidden';
            }
            for (var key in copyFrames) {
                for (var cfKey in copyFrames[key]) {
                    for (var propName in cfCoords[cfKey]) {
                        copyFrames[key][cfKey].style[propName] = propName == 'visibility' ? cfCoords[cfKey][propName] : cfCoords[cfKey][propName] + 'px';
                    }
                    gridPane.ClipElementToTableViewport(copyFrames[key][cfKey]);
                }
            }
        }
        function UpdateFocusFrames() {
            function HideFocusRect() {
                for (var key in focusFrames) {
                    focusFrames[key].style.visibility = 'hidden';
                }
            }
            var focusPos = selectionMgr.GetFocusForPane(gridPane);

            if (focusPos == null || cutcopypasteMgr.IsSelectionCopyable(gridPane)) {
                HideFocusRect();
                return;
            }
            var rowRange = (new SP.Utilities.Range(focusPos.rowIdx, focusPos.rowIdx)).Normalize();
            var colRange = (new SP.Utilities.Range(focusPos.colIdx, focusPos.colIdx)).Normalize();
            var borderInfo = gridPane.GetCellRangeBorderDrawingInfo(rowRange, colRange);

            if (borderInfo == null) {
                HideFocusRect();
                return;
            }
            var frameWidth = borderInfo.width;
            var frameHeight = borderInfo.height;
            var focusCoords = {
                Top: {
                    left: borderInfo.left + 1,
                    top: borderInfo.top + 1,
                    width: frameWidth
                },
                Right: {
                    left: borderInfo.right - 2,
                    top: borderInfo.top + 1,
                    height: frameHeight
                },
                Bottom: {
                    left: borderInfo.left + 1,
                    top: borderInfo.bottom - 2,
                    width: frameWidth
                },
                Left: {
                    left: borderInfo.left + 1,
                    top: borderInfo.top + 1,
                    height: frameHeight
                }
            };

            for (var key in focusFrames) {
                for (var propName in focusCoords[key]) {
                    focusFrames[key].style[propName] = focusCoords[key][propName] + 'px';
                }
                focusFrames[key].style.visibility = '';
            }
        }
        function CreateHideShowColumnCommand(action, column, atColIdx) {
            atColIdx = atColIdx != null ? atColIdx : paneConverter.ColKeyToColIdx(column.columnKey);
            function Hide() {
                var origFocus = selectionMgr.GetFocusForPane(gridPane);

                HideImpl(column, atColIdx);
                TryRestoreFocusAfterInsertOrDeleteColumns(origFocus);
                UpdatePositionedElements();
                editMgr.NotifyMove(gridPane);
            }
            function Show() {
                var origFocus = selectionMgr.GetFocusForPane(gridPane);

                ShowImpl(column, atColIdx);
                TryRestoreFocusAfterInsertOrDeleteColumns(origFocus);
                gridPane.ScrollColumnIntoViewHorizontally(atColIdx);
                UpdatePositionedElements();
                editMgr.NotifyMove(gridPane);
            }
            return action == 'hide' ? {
                Apply: Hide,
                Undo: Show
            } : {
                Apply: Show,
                Undo: Hide
            };
        }
        this.TryRestoreFocusAfterInsertOrDeleteColumns = TryRestoreFocusAfterInsertOrDeleteColumns;
        function TryRestoreFocusAfterInsertOrDeleteColumns(origFocus) {
            if (origFocus != null) {
                if (paneConverter.KeyToIdx(origFocus.recordKey, origFocus.fieldKey) != null) {
                    selectionMgr.SetFocusByKey(gridPane, origFocus.recordKey, origFocus.fieldKey);
                }
                else {
                    var newColIdx = origFocus.colIdx >= paneConverter.GetVirtualColumnCount() ? paneConverter.GetVirtualColumnCount() - 1 : origFocus.colIdx;

                    selectionMgr.Clear();
                    selectionMgr.SetFocusByPos(gridPane, origFocus.rowIdx, newColIdx);
                }
            }
        }
        function HideImpl(column, atColIdx) {
            ResetSelection();
            tableMgr.RemoveColumns(atColIdx, 1);
            itemSizes.splice(atColIdx, 1);
            horizScrollBar.Update({
                itemCount: itemSizes.length,
                itemSizes: itemSizes
            });
            column.isVisible = false;
        }
        function ShowImpl(column, atColIdx) {
            if (atColIdx < paneConverter.GetVirtualColumnCount()) {
                gridPane.ScrollColumnIntoViewHorizontally(atColIdx);
            }
            ResetSelection();
            headerMgr.AdjustColumnWidth(column);
            tableMgr.InsertColumns(atColIdx, [column]);
            itemSizes.splice(atColIdx, 0, column.width);
            horizScrollBar.Update({
                itemCount: itemSizes.length,
                itemSizes: itemSizes
            });
            column.isVisible = true;
        }
        function HandleUpdateInAllColumns(srcIdx, destIdx) {
            var array = allColumns.GetColumnArray();

            for (var i = 0; i < array.length; i++) {
                if (i > srcIdx && i > destIdx) {
                    break;
                }
                if (!array[i].isVisible) {
                    if (i <= srcIdx) {
                        srcIdx++;
                    }
                    if (i <= destIdx) {
                        destIdx++;
                    }
                }
            }
            SP.Internal.JS.MoveItemInArray(array, srcIdx, destIdx);
        }
        function CreateMoveColumnCommand(sourceIdx, destinationIdx) {
            function Move(srcIdx, destIdx) {
                if (srcIdx != destIdx) {
                    var origFocus = selectionMgr.GetFocusForPane(gridPane);
                    var topItemIdx = horizScrollBar.GetTopItemIdx();
                    var column = paneConverter.GetColumnByIdx(srcIdx);

                    HideImpl(column, srcIdx);
                    ShowImpl(column, destIdx);
                    if (origFocus != null) {
                        selectionMgr.SetFocusByKey(gridPane, origFocus.recordKey, origFocus.fieldKey);
                    }
                    UpdatePositionedElements();
                    horizScrollBar.Update({
                        topItemIdx: topItemIdx
                    });
                    HandleUpdateInAllColumns(srcIdx, destIdx);
                    editMgr.NotifyMove(gridPane);
                }
            }
            return {
                Apply: function() {
                    Move(sourceIdx, destinationIdx);
                },
                Undo: function() {
                    Move(destinationIdx, sourceIdx);
                }
            };
        }
        function ShowColumn(column, optColIdx) {
            if (optColIdx == null) {
                var hiddenBefore = 0;
                var allColArray = allColumns.GetColumnArray();

                for (var i = 0; i < allColArray.length; i++) {
                    if (allColArray[i] == column) {
                        optColIdx = i - hiddenBefore;
                        break;
                    }
                    if (!allColArray[i].isVisible) {
                        hiddenBefore++;
                    }
                }
            }
            Sys.Debug.assert(optColIdx != null);
            commandMgr.Execute(CreateHideShowColumnCommand('show', column, optColIdx), "Show Column", SP.JsGrid.CommandManager.CommandType.Implicit);
        }
        function HideColumn(column) {
            if (paneConverter.GetVirtualColumnCount() != 1) {
                commandMgr.Execute(CreateHideShowColumnCommand('hide', column, null), "Hide Column", SP.JsGrid.CommandManager.CommandType.Implicit);
            }
        }
        function MoveColumn(srcIdx, rawDestIdx) {
            var destIdx = srcIdx < rawDestIdx ? rawDestIdx - 1 : rawDestIdx;

            commandMgr.Execute(CreateMoveColumnCommand(srcIdx, destIdx), "Move Column", SP.JsGrid.CommandManager.CommandType.Explicit);
        }
        function ExpandColumnMenuInternal(columnKey) {
            function OnColumnMenuHidden() {
                lockedColIdx = null;
                headerMgr.SetColumnMenuCollapsed(columnKey);
                DeactivateColumn();
                objBag.focusMgr.Focus();
            }
            if (lockedColIdx == null) {
                var column = paneConverter.GetColumnByKey(columnKey);

                if (column == null) {
                    return false;
                }
                var pos = null;

                if (objBag.spGrid || column.bOpenMenuOnContentClick) {
                    pos = headerMgr.GetColumnHeaderPosition(columnKey);
                }
                else {
                    pos = headerMgr.GetColumnMenuElementPosition(columnKey);
                }
                if (pos == null) {
                    return false;
                }
                lockedColIdx = paneConverter.ColKeyToColIdx(columnKey);
                var columnHeaderElement = headerMgr.GetColumnHeaderElement(columnKey);

                if (delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.ExpandColumnMenu)) {
                    delegateMgr.Apply(SP.JsGrid.DelegateType.ExpandColumnMenu, columnKey, pos, OnColumnMenuHidden);
                    headerMgr.SetColumnMenuExpanded(columnKey);
                }
                else if (objBag.columnMenuMgr.ExpandMenu(column, pos, OnColumnMenuHidden, bHidableColumns, bSortableColumns, bAutoFilterableColumns, columnHeaderElement)) {
                    headerMgr.SetColumnMenuExpanded(columnKey);
                }
                return true;
            }
            else {
                return false;
            }
        }
        function OnColumnMenuClick(eventInfo, columnKey) {
            if (ExpandColumnMenuInternal(columnKey)) {
                SP.Internal.DomElement.StopEvent(eventInfo);
            }
        }
        this.ExpandColumnMenu = function(colIdx) {
            if (objBag.columnMenuMgr.CanExpandMenu(paneConverter.GetColumnByIdx(colIdx), bHidableColumns, bSortableColumns, bAutoFilterableColumns, bResizableColumns)) {
                gridPane.ScrollColumnIntoViewHorizontally(colIdx);
                ActivateColumn(colIdx);
                return ExpandColumnMenuInternal(paneConverter.ColIdxToColKey(colIdx));
            }
            else {
                return false;
            }
        };
        this.GetColumnConfigurationDialog = function() {
            return new SP.JsGrid.Internal.ColumnConfigurationDialog(allColumns, bMovableColumns, bResizableColumns, objBag, function(newColumns) {
                InitColumns(newColumns, false);
            });
        };
        this.ShowColumnConfigurationDialog = function() {
            function ShowColumnConfigurationCore() {
                var ccDialog = gridPane.GetColumnConfigurationDialog();
                var elem = document.createElement('div');
                var options = {};

                options.title = SP.JsGrid.Res.columnConfigurationName;
                options.html = elem;
                options.width = ccDialog.GetWidth();
                options.height = ccDialog.GetHeight();
                options.dialogReturnValueCallback = function() {
                    ccDialog.Close();
                    ccDialog = null;
                    bColumnConfigShown = false;
                };
                var dlg = SP.UI.ModalDialog.showModalDialog(options);

                ccDialog.Open(elem, function() {
                    dlg.close(SP.UI.DialogResult.cancel);
                });
            }
            if (delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.ShowColumnConfigurationDialog)) {
                delegateMgr.Apply(SP.JsGrid.DelegateType.ShowColumnConfigurationDialog);
            }
            else {
                if (!bColumnConfigShown) {
                    var defd;

                    try {
                        defd = typeof SP.UI.ModalDialog.showModalDialog;
                    }
                    catch (e) {
                        defd = "undefined";
                    }
                    bColumnConfigShown = true;
                    EnsureScript("SP.UI.Dialog.js", defd, ShowColumnConfigurationCore);
                }
            }
        };
        function OnInsertedRow(headerCI, cellCIs) {
            if (headerCI != null && !objBag.spGrid) {
                SP.JsGrid.Style.ApplyRowHeaderStyle(headerCI.GetTd(), headerCI.GetRecord() != null ? GetHeaderStyle(headerCI.GetRowIdx(), true) : styles.rowHeaderStyleCollection.normal, GetRowHeaderSibling);
            }
            if (headerCI != null && reorderableRows.Contains(headerCI.GetRecordKey())) {
                (headerCI.GetTd()).style.cursor = 'move';
            }
        }
        function OnInsertedColumns(headerCIs, cellCIs, headerHeight) {
            for (var i = 0; i < headerCIs.length; i++) {
                var bCanExpandMenu = objBag.columnMenuMgr.CanExpandMenu(headerCIs[i].GetColumn(), bHidableColumns, bSortableColumns, bAutoFilterableColumns, bResizableColumns);
                var th = headerCIs[i].GetTd();

                headerMgr.CreateTableHeaderCell(headerCIs[i].GetColumn(), th, headerHeight, bMovableColumns, bResizableColumns, bSortableColumns, true, bCanExpandMenu ? OnColumnMenuClick : null, GetColumnHeaderSibling);
                if (objBag.spGrid)
                    headerMgr.ShowMenuOnColumn((tableMgr.GetColumnHeader(headerCIs[i].GetColIdx())).GetTd());
                headerMgr.ApplyHeaderStyle(th, GetHeaderStyle(headerCIs[i].GetColIdx(), false));
            }
            if (!objBag.spGrid)
                UpdateLeftmostColumnStyle();
            if (curColUpdateTimeOut == null) {
                curColUpdateTimeOut = setTimeout(UpdateFirstDisplayColumn, 0);
            }
        }
        function UpdateFirstDisplayColumn() {
            if (!bIsDisposed) {
                var leftMostHdr = tableMgr.GetColumnHeader(tableMgr.BeginColIdx());

                if (leftMostHdr != null) {
                    headerMgr.NotifyColumnHeaderOrderSet(leftMostHdr.GetTd());
                }
            }
            curColUpdateTimeOut = null;
        }
        function UpdateLeftmostColumnStyle() {
            var hdr = tableMgr.GetColumnHeader(tableMgr.BeginColIdx());

            if (hdr != null) {
                headerMgr.ApplyHeaderStyle(hdr.GetTd(), GetHeaderStyle(hdr.GetColIdx(), false));
            }
        }
        function GetDisplayControlAndContentForCell(column, record, fieldKey, style, optControlName) {
            var prop = record.GetProp(fieldKey);
            var propType = prop == null ? gridFieldMap[fieldKey].GetPropType() : prop.propType;
            var displayCtrl = SP.JsGrid.Internal.Property.GetDisplayControlForProperty(propType, optControlName);
            var content = displayCtrl.Render(fnGetCellValue(record, fieldKey, propType), record, column, gridFieldMap[fieldKey], propType, style, jsGridObj, objBag.RTL, (tableMgr.GetCellByKey(record.key(), fieldKey)).GetTd());

            return {
                content: content,
                displayControl: displayCtrl
            };
        }
        this.GetContentForCell = function(column, record, fieldKey, style, optControlName) {
            return (GetDisplayControlAndContentForCell(column, record, fieldKey, style, optControlName)).content;
        };
        function BuildCellContent(cellInfo) {
            var record = cellInfo.GetRecord();
            var content, td, displayControl;

            if (record != null) {
                var column = cellInfo.GetColumn();
                var fieldKey = cellInfo.GetFieldKey();
                var displayControlName = column.fnGetDisplayControlName && column.fnGetDisplayControlName(record, fieldKey);
                var displayControlAndContent = GetDisplayControlAndContentForCell(column, record, fieldKey, RefreshCellStyle(cellInfo), displayControlName);

                content = displayControlAndContent.content;
                displayControl = displayControlAndContent.displayControl;
            }
            if (content != null) {
                td = cellInfo.GetTd();
                var recordKey = record.key();

                if (content.multipleChildren != null) {
                    for (var i = 0; i < content.multipleChildren.length; i++) {
                        AddChild(content.multipleChildren[i]);
                    }
                }
                else {
                    AddChild(content);
                }
                return true;
            }
            return false;
            function AddChild(child) {
                if (child.fnDispose != null) {
                    if (disposeMap[recordKey] == null) {
                        disposeMap[recordKey] = {};
                    }
                    if (disposeMap[recordKey][fieldKey] == null) {
                        disposeMap[recordKey][fieldKey] = [];
                    }
                    disposeMap[recordKey][fieldKey].push(child.fnDispose);
                    child = child.elem;
                }
                td.appendChild(child);
                if (!objBag.spGrid) {
                    setTimeout(function() {
                        Sys.Debug.assert(displayControl.Id == 'DISP_IMAGE' || displayControl.Id == 'DISP_IMAGETEXT' || child.offsetHeight < rowHeight, String.format("Cell child content is bigger than row height. Control={0}, row height={1}, recordKey={2}, fieldKey={3}, child={4}", displayControlName, rowHeight, recordKey, fieldKey, child.innerHTML));
                    }, 0);
                }
            }
        }
        function TryDisposeRow(recordKey) {
            if (recordKey in disposeMap) {
                for (var fieldKey in disposeMap[recordKey]) {
                    SP.JsGrid.AsynchronousCellUpdater.RegisterCell(disposeRenderedObjectsJobKey, recordKey, fieldKey, disposeMap[recordKey][fieldKey]);
                }
                delete disposeMap[recordKey];
            }
        }
        this.TryBeginEdit = function(eventInfo) {
            Sys.Debug.assert(eventInfo.type == 'keypress' || eventInfo.type == 'mousedown' || eventInfo.type == 'gridapi' || eventInfo.type == 'keydown' && (eventInfo.keyCode == SP.Internal.Key.F2 || eventInfo.keyCode == SP.Internal.Key.IMEInput));
            var focusPos = selectionMgr.GetFocusForPane(gridPane);

            if (focusPos == null)
                return false;
            gridPane.ScrollCellIntoView(focusPos.rowIdx, focusPos.colIdx);
            if (editMgr.IsBound()) {
                cutcopypasteMgr.CancelMode();
                editMgr.BeginEdit(eventInfo);
                return true;
            }
            return false;
        };
        function GetColumnHeaderSibling(th, bPrevious) {
            return bPrevious ? th.previousSibling : th.nextSibling;
        }
        function GetRowHeaderSibling(td, bPrevious) {
            var sib = bPrevious ? td.parentNode.previousSibling : td.parentNode.nextSibling;

            return sib && sib.firstChild;
        }
        function GetHeaderStyle(idx, bRowHeader, bForceInactiveAndUnselected) {
            var coll = bRowHeader ? styles.rowHeaderStyleCollection : styles.columnHeaderStyleCollection;

            if (bForceInactiveAndUnselected) {
                return coll.normal;
            }
            var bIsMouseOver = idx == (bRowHeader ? activeRowIdx : activeColIdx);
            var rules = bRowHeader ? [selectionMgr.GetRowRanges(gridPane), selectionMgr.GetColumnRanges(gridPane)] : [selectionMgr.GetColumnRanges(gridPane), selectionMgr.GetRowRanges(gridPane)];

            for (var i = 0; i < rules[0].length; i++) {
                if (rules[0][i].Contains(idx)) {
                    return bIsMouseOver ? coll.allSelectedHover : coll.allSelected;
                }
            }
            if (rules[1].length != 0) {
                return bIsMouseOver ? coll.partSelectedHover : coll.partSelected;
            }
            var cellRanges = selectionMgr.GetCellRanges(gridPane);

            for (var i = 0; i < cellRanges.length; i++) {
                if ((bRowHeader ? cellRanges[i].rowRange : cellRanges[i].colRange).Contains(idx)) {
                    return bIsMouseOver ? coll.partSelectedHover : coll.partSelected;
                }
            }
            return bIsMouseOver ? coll.normalHover : coll.normal;
        }
        function SetUpPaneMouseHandlers(gridPane) {
            var resizingColIdx = null;
            var movingColIdx = null;
            var startMovingColIdx = null;
            var bColumnSelection = false;
            var bRowReordering = false;
            var mouseDownX, origWidth, origGhostX;
            var mouseDownY, origGhostY;
            var totalIteration = 40;
            var slotGap = 25;
            var topTr;
            var hitTest;
            var bHeaderEventHandlersSetup = false;
            var cachedMouseDownCellInfo = {
                cellType: null,
                recordKey: null,
                fieldKey: null,
                bPendingClick: false,
                bPendingDoubleClick: false
            };
            var lastMouseMoveCell;

            $addHandler(tableDiv, 'mousedown', OnTableMouseDown);
            $addHandler(tableDiv, 'mousemove', OnTableMouseMove);
            $addHandler(tableDiv, 'mouseup', OnTableMouseUp);
            $addHandler(tableDiv, 'dblclick', OnTableDoubleClick);
            $addHandler(selDragHandle, 'mousedown', OnFillHandleMouseDown);
            tableDiv.oncontextmenu = function() {
                return false;
            };
            this.SetupHeaderEvents = function() {
                if (!bHeaderEventHandlersSetup) {
                    topTr = tableMgr.GetColumnHeaderTr();
                    $addHandler(topTr, 'mousedown', OnColumnHeaderMouseDown);
                    $addHandler(topTr, 'mousemove', OnColumnHeaderMouseMove);
                    $addHandler(topTr, 'mouseout', OnColumnHeaderMouseOut);
                }
                bHeaderEventHandlersSetup = true;
            };
            this.ClearHeaderEvents = function() {
                if (bHeaderEventHandlersSetup) {
                    $clearHandlers(topTr);
                }
                bHeaderEventHandlersSetup = false;
            };
            this.Dispose = function() {
                $removeHandler(window, 'resize', onResizeHandler);
                this.ClearHeaderEvents();
                $clearHandlers(tableDiv);
                $clearHandlers(selDragHandle);
                topTr = null;
            };
            function ShiftSelect(eventInfo, ci) {
                var otherType = ci.GetCellType();
                var selectOp = eventInfo.ctrlKey ? SelectOp.ReplaceLast : SelectOp.Set;
                var focusPos = selectionMgr.GetFocusForPane(gridPane);

                if (focusPos != null) {
                    if (cachedMouseDownCellInfo.cellType == tableMgr.CellType.RowHeader && (otherType == tableMgr.CellType.RowHeader || otherType == tableMgr.CellType.Cell)) {
                        selectionMgr.SelectRange(gridPane, focusPos.rowIdx, ci.GetRowIdx(), null, null, selectOp, false, true);
                    }
                    else if (cachedMouseDownCellInfo.cellType == tableMgr.CellType.ColumnHeader && (otherType == tableMgr.CellType.ColumnHeader || otherType == tableMgr.CellType.Cell)) {
                        selectionMgr.SelectRange(gridPane, null, null, focusPos.colIdx, ci.GetColIdx(), selectOp, false, true);
                    }
                    else if (cachedMouseDownCellInfo.cellType == tableMgr.CellType.Cell && otherType == tableMgr.CellType.Cell) {
                        selectionMgr.SelectRange(gridPane, focusPos.rowIdx, ci.GetRowIdx(), focusPos.colIdx, ci.GetColIdx(), selectOp, false, true);
                    }
                }
            }
            function OnFillHandleMouseDown(eventInfo) {
                if (eventInfo.button == Sys.UI.MouseButton.leftButton && selectionMgr.GetFocusedPane() == gridPane) {
                    fillDownMgr.OnMouseDown(eventInfo, gridPane, objBag.parentNode, selDragHandle, tableMgr, selectionMgr);
                }
            }
            function OnTableDoubleClick(eventInfo) {
                var cellInfo = tableMgr.GetCellByChildElement(eventInfo.target);
                var cellType = cellInfo && cellInfo.GetCellType();

                if (cellType == tableMgr.CellType.ColumnHeader) {
                    AutoResizeActiveColumn();
                }
                FireClickEvent(eventInfo, cellInfo, SP.JsGrid.EventType.OnDoubleClick);
            }
            function OnTableMouseDown(eventInfo) {
                var cellInfo = tableMgr.GetCellByChildElement(eventInfo.target);

                cachedMouseDownCellInfo = {
                    cellType: null,
                    recordKey: null,
                    fieldKey: null,
                    bPendingClick: false,
                    bPendingDoubleClick: false
                };
                if (SP.Internal.DomElement.AttributeOnElementOrAncestor(eventInfo.target, "ms-jsgrid-click-passthrough", "true")) {
                    return;
                }
                if (eventInfo.button == Sys.UI.MouseButton.leftButton) {
                    if (cellInfo && cellInfo.GetRowIdx() == null && !bColumnSelection) {
                        return;
                    }
                    bColumnSelection = false;
                    HandleTableLeftClick();
                }
                else if (eventInfo.button == Sys.UI.MouseButton.rightButton) {
                    FireClickEvent(eventInfo, cellInfo, SP.JsGrid.EventType.OnRightClick);
                }
                return;
                function HandleTableLeftClick() {
                    if (cellInfo != null) {
                        cachedMouseDownCellInfo.cellType = cellInfo.GetCellType();
                        cachedMouseDownCellInfo.recordKey = cellInfo.GetRecordKey();
                        cachedMouseDownCellInfo.fieldKey = cellInfo.GetFieldKey();
                        if (cachedMouseDownCellInfo.cellType == tableMgr.CellType.RowHeader) {
                            if (reorderableRows.Contains(cachedMouseDownCellInfo.recordKey)) {
                                StartRowReorder(eventInfo);
                                return;
                            }
                        }
                        var focusPos = selectionMgr.GetFocusForPane(gridPane);

                        if (cachedMouseDownCellInfo.cellType != tableMgr.CellType.SelectAllSquare) {
                            eventInfo.preventDefault();
                            lastMouseMoveCell = cellInfo;
                            SP.Internal.DomElement.SetCapture(tableDiv, OnTableMouseMoveForSelect, function() {
                                setTimeout(UpdateRowHeadersForReorder, 0);
                            });
                        }
                        if (eventInfo.shiftKey) {
                            ShiftSelect(eventInfo, cellInfo);
                        }
                        else {
                            var rowIdx = cellInfo.GetRowIdx();
                            var colIdx = cellInfo.GetColIdx();
                            var selectOp = eventInfo.ctrlKey ? SelectOp.Append : SelectOp.Set;

                            if (cachedMouseDownCellInfo.cellType == tableMgr.CellType.RowHeader) {
                                selectionMgr.SelectRange(gridPane, rowIdx, rowIdx, null, null, selectOp, true, false);
                            }
                            else if (cachedMouseDownCellInfo.cellType == tableMgr.CellType.ColumnHeader) {
                                selectionMgr.SelectRange(gridPane, null, null, colIdx, colIdx, selectOp, true, false);
                            }
                            else if (cachedMouseDownCellInfo.cellType == tableMgr.CellType.Cell) {
                                selectionMgr.SelectRange(gridPane, rowIdx, rowIdx, colIdx, colIdx, selectOp, true, false);
                            }
                            lastMouseMoveCell = (cellInfo = tableMgr.GetCellByKey(cachedMouseDownCellInfo.recordKey, cachedMouseDownCellInfo.fieldKey));
                            cachedMouseDownCellInfo.bPendingClick = (cachedMouseDownCellInfo.bPendingDoubleClick = true);
                        }
                        if (cachedMouseDownCellInfo.cellType == tableMgr.CellType.Cell && focusPos != null && focusPos.recordKey == cachedMouseDownCellInfo.recordKey && focusPos.fieldKey == cachedMouseDownCellInfo.fieldKey) {
                            if (gridPane.TryBeginEdit(eventInfo)) {
                                eventInfo.stopPropagation();
                            }
                        }
                    }
                }
            }
            function OnTableMouseUp(eventInfo) {
                if (cachedMouseDownCellInfo.bPendingClick) {
                    var cellInfo = tableMgr.GetCellByChildElement(eventInfo.target);

                    if (cellInfo != null && !editMgr.IsEditing() && selectionMgr.IsOneCellSelected(selectionMgr.GetLastSelectionRangeNormalized()) && cellInfo.GetCellType() == tableMgr.CellType.Cell && cachedMouseDownCellInfo.recordKey == cellInfo.GetRecordKey() && cachedMouseDownCellInfo.fieldKey == cellInfo.GetFieldKey()) {
                        objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnSingleCellClick, new SP.JsGrid.EventArgs.SingleCellClick(eventInfo, cachedMouseDownCellInfo.recordKey, cachedMouseDownCellInfo.fieldKey));
                    }
                    cachedMouseDownCellInfo.bPendingClick = false;
                }
            }
            function FireClickEvent(eventInfo, cellInfo, eventType) {
                var cellType = cellInfo && cellInfo.GetCellType();
                var record = cellInfo && cellInfo.GetRecord();
                var recordKey = record && record.key();
                var fieldKey = cellInfo && cellInfo.GetFieldKey();
                var context = cellType == tableMgr.CellType.SelectAllSquare ? SP.JsGrid.ClickContext.SelectAllSquare : cellType == tableMgr.CellType.RowHeader ? SP.JsGrid.ClickContext.RowHeader : cellType == tableMgr.CellType.ColumnHeader ? SP.JsGrid.ClickContext.ColumnHeader : cellType == tableMgr.CellType.Cell ? SP.JsGrid.ClickContext.Cell : SP.JsGrid.ClickContext.Other;

                if (eventType == SP.JsGrid.EventType.OnRightClick || context != SP.JsGrid.ClickContext.Cell || cachedMouseDownCellInfo.bPendingDoubleClick && cachedMouseDownCellInfo.cellType == cellType && cachedMouseDownCellInfo.recordKey == recordKey && cachedMouseDownCellInfo.fieldKey == fieldKey) {
                    objBag.eventMgr.FireEvent(eventType, new SP.JsGrid.EventArgs.Click(eventInfo, context, recordKey, fieldKey));
                    cachedMouseDownCellInfo.bPendingDoubleClick = false;
                }
                SP.Internal.DomElement.StopEvent(eventInfo);
            }
            function OnTableMouseMoveForSelect(eventInfo) {
                var ci = tableMgr.GetCellByChildElement(eventInfo.target);

                if (ci != null && (lastMouseMoveCell == null || !lastMouseMoveCell.Equals(ci))) {
                    ShiftSelect(eventInfo, ci);
                    lastMouseMoveCell = ci;
                }
            }
            function OnTableMouseMove(eventInfo) {
                var ci = tableMgr.GetCellByChildElement(eventInfo.target);

                if (ci && ci.GetCellType() == tableMgr.CellType.RowHeader && !bRowReordering) {
                    ActivateRow(ci.GetRowIdx());
                }
                else {
                    DeactivateRow();
                }
            }
            function GetActiveReorderableRecordKeys(bReturnExpanded) {
                var selectedRowRanges = jsGridObj.GetSelectedRowRanges();

                if (selectedRowRanges.length == 1) {
                    var selectedRecordKeys = selectedRowRanges[0].keys;
                    var recordKeys = [];

                    if (objBag.controller.GetHierarchyManager() == null) {
                        recordKeys = selectedRecordKeys;
                    }
                    else {
                        var expandInfo = (objBag.controller.GetHierarchyManager()).ValidateAndExpandKeyList(selectedRecordKeys);

                        if (expandInfo == null) {
                            expandInfo = {
                                bAllChildKeysInView: true,
                                bGroupingRowFound: false,
                                bLevelZeroFound: false,
                                expandedKeys: selectedRecordKeys
                            };
                        }
                        if (expandInfo.bGroupingRowFound || expandInfo.bLevelZeroFound) {
                            return [];
                        }
                        for (var i = 0; i < expandInfo.expandedKeys.length; i++) {
                            if (jsGridObj.IsEntryRecordKey(expandInfo.expandedKeys[i]) || jsGridObj.IsProvisionalRecordKey(expandInfo.expandedKeys[i])) {
                                return [];
                            }
                        }
                        recordKeys = expandInfo.expandedKeys;
                    }
                    if (delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.CanReorderRecords) && delegateMgr.Apply(SP.JsGrid.DelegateType.CanReorderRecords, recordKeys)) {
                        return bReturnExpanded ? expandInfo.expandedKeys : selectedRecordKeys;
                    }
                }
                return [];
            }
            function UpdateRowHeadersForReorder() {
                if (bIsDisposed) {
                    return;
                }
                var rowHeaders = tableMgr.GetRowHeaders();

                for (var i = 0; i < rowHeaders.length; i++) {
                    (rowHeaders[i].GetTd()).style.cursor = '';
                }
                var keys = GetActiveReorderableRecordKeys(false);

                for (var i = 0; i < keys.length; i++) {
                    ((tableMgr.GetRowHeaderByKey(keys[i])).GetTd()).style.cursor = 'move';
                }
                reorderableRows.Clear();
                reorderableRows.AddArray(keys);
            }
            function StartRowReorder(eventInfo) {
                var timer;
                var bScrollTimerActive = false;
                var cachedMouseMoveEventInfo = null;

                function PositionReorderElements(eventInfo) {
                    var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);
                    var mouseDelta = mouseLoc.y - mouseDownY;
                    var tableLoc = SP.Internal.DomElement.GetLocation(tableDiv);
                    var hitTest = RowHeaderHitTest(eventInfo);

                    if (hitTest.insertRowIdx != tableMgr.EndRowIdx() && hitTest.insertRowIdx != null) {
                        var td = (tableMgr.GetRowHeader(hitTest.insertRowIdx)).GetTd();
                        var tdLoc = SP.Internal.DomElement.GetLocation(td);
                        var pos = tdLoc.y;

                        rowDropIndic.style.top = pos - tableLoc.y - 2 + 'px';
                        rowDropIndic.style.visibility = '';
                    }
                }
                function OnRowReorderMouseMove(eventInfo) {
                    cachedMouseMoveEventInfo = eventInfo;
                    PositionReorderElements(eventInfo);
                    var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);
                    var tableLoc = SP.Internal.DomElement.GetLocation(tableDiv);

                    if (mouseLoc.y >= tableLoc.y + tableDiv.offsetHeight - 50) {
                        StartTimerScroll(false);
                    }
                    else if (mouseLoc.y <= tableLoc.y + 50) {
                        StartTimerScroll(true);
                    }
                    else {
                        StopTimerScroll();
                    }
                }
                function TimerScroll(bUp) {
                    if (bUp) {
                        objBag.paneMgr.ScrollUpByOne();
                    }
                    else {
                        objBag.paneMgr.ScrollDownByOne();
                    }
                    PositionReorderElements(cachedMouseMoveEventInfo);
                    if (bScrollTimerActive) {
                        timer = setTimeout(function() {
                            TimerScroll(bUp);
                        }, 100);
                    }
                }
                function StartTimerScroll(bUp) {
                    if (!bScrollTimerActive) {
                        bScrollTimerActive = true;
                        timer = setTimeout(function() {
                            TimerScroll(bUp);
                        }, 0);
                    }
                }
                function StopTimerScroll() {
                    clearTimeout(timer);
                    bScrollTimerActive = false;
                }
                function OnRowReorderMouseUp(eventInfo) {
                    StopTimerScroll();
                    rowDropIndic.style.visibility = 'hidden';
                    bRowReordering = false;
                    tableDiv.style.cursor = '';
                    var hitTest = RowHeaderHitTest(eventInfo);

                    if (hitTest.insertRowIdx != tableMgr.EndRowIdx() && hitTest.insertRowIdx != null) {
                        var insertPointRecordKey = (tableMgr.GetRowHeader(hitTest.insertRowIdx)).GetRecordKey();

                        if (reorderableRows.Contains(insertPointRecordKey)) {
                            return;
                        }
                        else if (jsGridObj.IsEntryRecordKey(insertPointRecordKey)) {
                            insertPointRecordKey = null;
                        }
                        var range = GetSelectionRange();

                        Sys.Debug.assert(!range.bInvalid);
                        if (!delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.OnBeforeRecordReordered) || delegateMgr.Apply(SP.JsGrid.DelegateType.OnBeforeRecordReordered, range.selectedKeys)) {
                            jsGridObj.ReorderRecords(range.topRecordKey, range.bottomRecordKey, insertPointRecordKey, true);
                        }
                    }
                }
                function RowHeaderHitTest(eventInfo) {
                    var tableLoc = SP.Internal.DomElement.GetLocation(tableDiv);
                    var mousept = SP.Internal.DomElement.GetEventLocation(eventInfo);
                    var y = mousept.y;
                    var rowIdx;
                    var hdrs = tableMgr.GetRowHeaders();

                    for (var i = 0; i < hdrs.length; i++) {
                        var td = hdrs[i].GetTd();
                        var tdLoc = SP.Internal.DomElement.GetLocation(td);

                        if (i == 0 && y < tdLoc.y || y >= tdLoc.y && y < tdLoc.y + td.offsetHeight) {
                            if (reorderableRows.Contains(hdrs[i].GetRecordKey()) || i > 0 && reorderableRows.Contains(hdrs[i - 1].GetRecordKey())) {
                                var header = tableMgr.GetRowHeaderByKey((jsGridObj.GetSelectedRowRanges())[0].keys[0]);

                                if (header != null) {
                                    rowIdx = header.GetRowIdx();
                                }
                                else {
                                    rowIdx = hdrs[i].GetRowIdx();
                                }
                            }
                            else {
                                rowIdx = hdrs[i].GetRowIdx();
                            }
                            break;
                        }
                    }
                    if (rowIdx == null) {
                        rowIdx = tableMgr.EndRowIdx();
                    }
                    return {
                        insertRowIdx: rowIdx
                    };
                }
                function GetSelectionRange() {
                    var selectedKeys = GetActiveReorderableRecordKeys(true);

                    if (selectedKeys == null || selectedKeys.length == 0) {
                        return {
                            bInvalid: true
                        };
                    }
                    var visibleKeys = [];

                    for (var i = 0; i < selectedKeys.length; i++) {
                        if (paneConverter.IsRecordOnScreen(selectedKeys[i])) {
                            visibleKeys.push(selectedKeys[i]);
                        }
                    }
                    var idx = paneConverter.GetTopRowIdxForKey(visibleKeys[0]);
                    var topIdx = idx;
                    var bottomIdx = idx;
                    var topRecordKey = visibleKeys[0];
                    var bottomRecordKey = visibleKeys[0];

                    for (var i = 1; i < visibleKeys.length; i++) {
                        idx = paneConverter.GetTopRowIdxForKey(visibleKeys[i]);
                        if (idx < topIdx) {
                            topIdx = idx;
                            topRecordKey = visibleKeys[i];
                        }
                        else if (idx > bottomIdx) {
                            bottomIdx = idx;
                            bottomRecordKey = visibleKeys[i];
                        }
                    }
                    return {
                        topIdx: topIdx,
                        bottomIdx: bottomIdx,
                        topRecordKey: topRecordKey,
                        bottomRecordKey: bottomRecordKey,
                        selectedKeys: selectedKeys
                    };
                }
                function ExpandSelectionForReorder() {
                    var range = GetSelectionRange();

                    if (range.bInvalid) {
                        return false;
                    }
                    jsGridObj.SelectRowRange(range.topIdx, range.bottomIdx);
                    reorderableRows.Clear();
                    reorderableRows.AddArray(range.selectedKeys);
                    return true;
                }
                if (ExpandSelectionForReorder()) {
                    bRowReordering = true;
                    mouseDownY = (SP.Internal.DomElement.GetEventLocation(eventInfo)).y;
                    var td = eventInfo.target;
                    var tdLoc = SP.Internal.DomElement.GetLocation(td);
                    var tableLoc = SP.Internal.DomElement.GetLocation(tableDiv);
                    var parentLoc = SP.Internal.DomElement.GetLocation(parentNode);

                    origGhostY = tdLoc.y - tableLoc.y;
                    rowDropIndic.style.top = origGhostY + 'px';
                    rowDropIndic.style.width = td.offsetWidth + 'px';
                    rowDropIndic.style.visibility = '';
                    tableDiv.style.cursor = 'move';
                    SP.Internal.DomElement.SetCapture(td, OnRowReorderMouseMove, OnRowReorderMouseUp);
                    OnRowReorderMouseMove(eventInfo);
                }
            }
            function DetermineHeaderElementInfo(eventInfo) {
                var actionInfo = SP.Internal.DomElement.FindAncestorWithProperty(eventInfo.target, 'colAction');
                var thColumnKeyInfo = null;

                if (actionInfo != null) {
                    thColumnKeyInfo = SP.Internal.DomElement.FindAncestorWithProperty(actionInfo.elem, 'thColumnKey');
                }
                return {
                    colAction: actionInfo != null ? SP.Internal.DomElement.GetCustomAttribute(actionInfo.elem, 'colAction') : null,
                    thElem: thColumnKeyInfo != null ? thColumnKeyInfo.elem : null
                };
            }
            function OnColumnHeaderMouseDown(eventInfo) {
                if (eventInfo.button != Sys.UI.MouseButton.leftButton) {
                    return;
                }
                editMgr.StopEditing(false);
                headerMgr.HeaderMouseDown(eventInfo);
                var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);

                mouseDownX = mouseLoc.x;
                var elemInfo = DetermineHeaderElementInfo(eventInfo);
                var ignoreHeaderClick = headerMgr.InColumnHeaderEditMode() && elemInfo.colAction != 'sort';

                if (lockedColIdx == null && !ignoreHeaderClick) {
                    if (elemInfo.colAction == 'sort') {
                        var bIE10Touch = false;

                        if (typeof MSPointerEvent != "undefined") {
                            var target = SP.Internal.DomElement.FindFirstAncestorWithAnyPropertyValue(eventInfo.target, 'colAction', {
                                sort: null
                            });

                            if (target != null) {
                                var pointerType = target.elem.getAttribute("pointerType");

                                if (pointerType != null && Number(pointerType) != MSPointerEvent.MSPOINTER_TYPE_MOUSE) {
                                    bIE10Touch = true;
                                }
                            }
                        }
                        var hitTest = HeaderHitTest(eventInfo, true);

                        if (hitTest.colIdx != null) {
                            var column = (tableMgr.GetColumnHeader(hitTest.colIdx)).GetColumn();

                            if (bIE10Touch) {
                                OnColumnMenuClick(eventInfo, column.columnKey);
                            }
                            else {
                                headerMgr.OnSort(eventInfo, column.columnKey);
                            }
                        }
                    }
                    else if (elemInfo.colAction == 'resize' || elemInfo.colAction == 'resize-current') {
                        eventInfo.preventDefault();
                        var th = elemInfo.colAction == 'resize' ? GetColumnHeaderSibling(elemInfo.thElem, true) : elemInfo.thElem;

                        if (th != null && th.thColumnKey != null) {
                            SP.Internal.DomElement.SetCapture(topTr, OnColumnHeaderMouseMoveForColumnResize, OnColumnHeaderMouseUpForColumnResize);
                            resizingColIdx = paneConverter.ColKeyToColIdx(th.thColumnKey);
                            origWidth = parseInt((paneConverter.GetColumnByKey(th.thColumnKey)).width, 10);
                            headerMgr.SetColumnResizing(th.thColumnKey);
                        }
                    }
                    else if (elemInfo.colAction == 'move') {
                        if (objBag.spGrid)
                            return;
                        eventInfo.preventDefault();
                        var th = elemInfo.thElem;
                        var thLoc = SP.Internal.DomElement.GetLocation(th);
                        var tableLoc = SP.Internal.DomElement.GetLocation(tableDiv);
                        var parentLoc = SP.Internal.DomElement.GetLocation(parentNode);
                        var fieldInfo = paneConverter.GetColumnByKey(th.thColumnKey);

                        origGhostX = thLoc.x - parentLoc.x;
                        ghostHeader.style.top = thLoc.y - tableLoc.y + 'px';
                        ghostHeader.style.width = th.offsetWidth + 1 + 'px';
                        ghostHeader.style.height = th.offsetHeight + 'px';
                        ghostHeader.style.backgroundColor = th.style.backgroundColor;
                        SP.Internal.DomElement.SetText(ghostHeader.textDiv, fieldInfo.name);
                        SP.Internal.DomElement.SetOpacity(ghostHeader, 0.6);
                        ghostHeader.style.visibility = '';
                        columnDropIndic.style.top = ghostHeader.style.top;
                        columnDropIndic.style.height = ghostHeader.style.height;
                        columnDropIndic.style.visibility = '';
                        SP.Internal.DomElement.SetCapture(topTr, OnColumnHeaderMouseMoveForColumnMove, OnColumnHeaderMouseUpForColumnMove);
                        movingColIdx = (startMovingColIdx = paneConverter.ColKeyToColIdx(th.thColumnKey));
                        headerMgr.SetColumnMoving(th.thColumnKey);
                        OnColumnHeaderMouseMoveForColumnMove(eventInfo);
                    }
                    else if (elemInfo.colAction == 'select') {
                        bColumnSelection = true;
                    }
                }
            }
            function OnColumnHeaderMouseMoveForColumnResize(eventInfo) {
                var minX = (SP.Internal.DomElement.GetLocation(parentNode)).x;
                var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);
                var mouseX = Math.max(minX, mouseLoc.x);
                var mouseDelta = (mouseX - mouseDownX) * (objBag.RTL.bEnabled ? -1 : 1);
                var newWidth = Math.min(Math.max(origWidth + mouseDelta, SP.JsGrid.Internal.MinColumnWidth), paneSize.GetWidth() - SP.JsGrid.Internal.RowHeaderWidth);
                var th = (tableMgr.GetColumnHeader(resizingColIdx)).GetTd();

                (paneConverter.GetColumnByKey(th.thColumnKey)).width = newWidth;
                headerMgr.ResizeColumn(th, newWidth);
                itemSizes[resizingColIdx] = newWidth;
                tableMgr.ResizeColCoordCache(th.cellIndex, newWidth);
                UpdatePositionedElements();
                editMgr.NotifyMove(gridPane);
            }
            function OnColumnHeaderMouseUpForColumnResize(eventInfo) {
                if (resizingColIdx != null) {
                    var th = (tableMgr.GetColumnHeader(resizingColIdx)).GetTd();

                    headerMgr.SetColumnResized(th.thColumnKey);
                    tableMgr.OptimizeTableColumns();
                    horizScrollBar.Update({
                        itemSizes: itemSizes
                    });
                    resizingColIdx = null;
                }
            }
            function AutoResizeActiveColumn() {
                if (activeColIdx != null && activeColIdx != lockedColIdx) {
                    var column = paneConverter.GetColumnByIdx(activeColIdx);

                    if (column.isResizable) {
                        headerMgr.SetColumnResizing(column.columnKey);
                        var th = (tableMgr.GetColumnHeader(activeColIdx)).GetTd();
                        var newWidth = Math.max(headerMgr.GetColumnHeaderAutoResizeWidth(th), tableMgr.GetColumnAutoResizeWidth(activeColIdx));

                        if (newWidth != column.width) {
                            column.width = newWidth;
                            headerMgr.ResizeColumn(th, newWidth);
                            itemSizes[activeColIdx] = newWidth;
                            UpdatePositionedElements();
                            editMgr.NotifyMove(gridPane);
                            tableMgr.OptimizeTableColumns();
                            horizScrollBar.Update({
                                itemSizes: itemSizes
                            });
                        }
                        headerMgr.SetColumnResized(th.thColumnKey);
                    }
                }
            }
            function OnColumnHeaderMouseMoveForColumnMove(eventInfo) {
                var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);
                var mouseDelta = mouseLoc.x - mouseDownX;

                ghostHeader.style.left = origGhostX + mouseDelta + 'px';
                var hitTest = HeaderHitTest(eventInfo);
                var tableLoc = SP.Internal.DomElement.GetLocation(tableDiv);
                var pos;
                var bAddColumnEnabled = objBag.showAddColumnMenu && objBag.canUserAddColumn;

                if (hitTest.insertColIdx == tableMgr.EndColIdx()) {
                    var th = (tableMgr.GetColumnHeader(hitTest.insertColIdx - 1 - (bAddColumnEnabled ? 1 : 0))).GetTd();
                    var thLoc = SP.Internal.DomElement.GetLocation(th);

                    pos = thLoc.x + (objBag.RTL.bEnabled ? 0 : th.offsetWidth);
                }
                else {
                    var th = (tableMgr.GetColumnHeader(hitTest.insertColIdx)).GetTd();
                    var thLoc = SP.Internal.DomElement.GetLocation(th);

                    pos = thLoc.x + (objBag.RTL.bEnabled ? th.offsetWidth : 0);
                }
                var newLeft = pos - tableLoc.x - 2 + 'px';
                var currentLeft = columnDropIndic.style.left;
                var changeColPos = hitTest.insertColIdx < movingColIdx || hitTest.insertColIdx > movingColIdx + 1;

                if (currentLeft && newLeft != currentLeft && changeColPos) {
                    var movingTh = (tableMgr.GetColumnHeader(movingColIdx)).GetTd();
                    var movingColumnKey = movingTh.thColumnKey;

                    headerMgr.SetColumnMoved(movingColumnKey);
                    MoveColumn(movingColIdx, hitTest.insertColIdx);
                    movingColIdx = paneConverter.ColKeyToColIdx(movingColumnKey);
                    headerMgr.SetColumnMoving(movingColumnKey);
                }
                columnDropIndic.style.left = newLeft;
                columnDropIndic.style.visibility = '';
            }
            function OnCellsMouseMoveForCopy(eventInfo) {
                var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);
                var mouseDeltaX = mouseLoc.x - mouseDownX;
                var mouseDeltaY = mouseLoc.y - mouseDownY;

                ghostCells.style.top = origGhostY + mouseDeltaY + 'px';
                ghostCells.style.left = origGhostX + mouseDeltaX + 'px';
            }
            function OnColumnHeaderMouseUpForColumnMove(eventInfo) {
                var hitTest = HeaderHitTest(eventInfo);

                ghostHeader.style.visibility = (columnDropIndic.style.visibility = 'hidden');
                var columnKey = ((tableMgr.GetColumnHeader(movingColIdx)).GetTd()).thColumnKey;

                headerMgr.SetColumnMoved(columnKey);
                if (startMovingColIdx != movingColIdx) {
                    var destColIdx = startMovingColIdx < movingColIdx ? movingColIdx + 1 : movingColIdx;

                    delegateMgr.Apply(SP.JsGrid.DelegateType.ReorderColumnPositionInView, columnKey, destColIdx);
                }
                movingColIdx = (startMovingColIdx = null);
            }
            function OnCellsMouseUpForCopy(eventInfo) {
                cutcopypasteMgr.OnCopy(gridPane);
                hitTest = RowHitTest(eventInfo);
                hdrs = tableMgr.GetRowHeaders();
                selectionMgr.SetFocusByPos(gridPane, hitTest.row, hitTest.col);
                cutcopypasteMgr.OnPaste(gridPane);
                if (ghostCells != null) {
                    ghostCells.parentNode.removeChild(ghostCells);
                    ghostCells = null;
                }
                UpdatePositionedElements();
            }
            function OnColumnHeaderMouseMove(eventInfo) {
                if (resizingColIdx != null || movingColIdx != null) {
                    return;
                }
                var hitTest = HeaderHitTest(eventInfo, true);

                if (hitTest.colIdx != null) {
                    var columnKey = ((tableMgr.GetColumnHeader(hitTest.colIdx)).GetColumn()).columnKey;

                    if (headerMgr.ColumnCurrentlyEditing(columnKey))
                        return;
                }
                if (hitTest.colIdx != null && hitTest.bInVertical && lockedColIdx == null) {
                    ActivateColumn(hitTest.colIdx);
                    headerMgr.HeaderMouseMove(eventInfo);
                }
                else if (activeColIdx != null) {
                    DeactivateColumn();
                }
            }
            function OnColumnHeaderMouseOut(eventInfo) {
                var hitTest = HeaderHitTest(eventInfo, true);

                if (hitTest.colIdx != null) {
                    var columnKey = ((tableMgr.GetColumnHeader(hitTest.colIdx)).GetColumn()).columnKey;

                    if (headerMgr.ColumnCurrentlyEditing(columnKey) || hitTest.bInVertical && hitTest.colIdx == activeColIdx)
                        return;
                }
                headerMgr.HeaderMouseOut(eventInfo);
                DeactivateColumn();
            }
            function RowHitTest(eventInfo) {
                var parentLoc = SP.Internal.DomElement.GetLocation(parentNode);
                var mousept = SP.Internal.DomElement.GetEventLocation(eventInfo);
                var x = mousept.x;
                var y = mousept.y;
                var colidx = rowidx = 0;
                var tdLocX = tdLoxY = 0;
                var rowHeaders = tableMgr.GetRowHeaders();

                for (var i = 0; i < rowHeaders.length; i++) {
                    var hdrTd = rowHeaders[i].GetTd();

                    tdLoc = SP.Internal.DomElement.GetLocation(hdrTd);
                    if (hdrTd.offsetHeight + tdLoc.y > y) {
                        rowidx = i;
                        tdLocY = tdLoc.y - parentLoc.y;
                        break;
                    }
                }
                var hdrs = tableMgr.GetColumnHeaders();

                for (var i = 0; i < hdrs.length; i++) {
                    th = hdrs[i].GetTd();
                    thLoc = SP.Internal.DomElement.GetLocation(th);
                    if (thLoc.x + th.offsetWidth > x) {
                        colidx = i;
                        tdLocX = thLoc.x - parentLoc.x;
                        break;
                    }
                }
                return {
                    row: rowidx,
                    col: colidx,
                    x: tdLocX,
                    y: tdLocY
                };
            }
            function HeaderHitTest(eventInfo, bStrict) {
                var tableLoc = SP.Internal.DomElement.GetLocation(tableDiv);
                var mousept = SP.Internal.DomElement.GetEventLocation(eventInfo);
                var x = mousept.x;
                var y = mousept.y;
                var hdrs = tableMgr.GetColumnHeaders();
                var bInVertical = hdrs.length > 0 && (y >= tableLoc.y + (hdrs[0].GetTd()).offsetTop && y <= tableLoc.y + (hdrs[0].GetTd()).offsetHeight);
                var bInEyeBrow = bInVertical && y - tableLoc.y < headerMgr.constEyeBrowHeight;
                var colIdx, th, thLoc, insertColIdx;
                var buffer = !bInEyeBrow ? (headerMgr.constResizeWidth + 2) * (objBag.RTL.bEnabled ? -1 : 1) : 0;

                if (!bStrict || bInVertical && SP.Internal.DomElement.PointInDomElem(x, y, parentNode)) {
                    for (var i = 0; i < hdrs.length; i++) {
                        th = hdrs[i].GetTd();
                        thLoc = SP.Internal.DomElement.GetLocation(th);
                        if (x >= thLoc.x + (i != 0 ? buffer : 0) && x < thLoc.x + th.offsetWidth + (i != hdrs.length ? buffer : 0)) {
                            colIdx = hdrs[i].GetColIdx();
                            break;
                        }
                    }
                    var insAdj = 0;

                    if (th != null) {
                        var distToLeft = x - thLoc.x;
                        var distToRight = thLoc.x + th.offsetWidth - x;

                        insAdj = distToRight < distToLeft ? objBag.RTL.bEnabled ? 0 : 1 : objBag.RTL.bEnabled ? 1 : 0;
                    }
                    var firstThLoc = SP.Internal.DomElement.GetLocation(hdrs[0].GetTd());

                    insertColIdx = colIdx != null ? colIdx + insAdj : objBag.RTL.bEnabled ? x > firstThLoc.x + th.offsetWidth : x < firstThLoc.x ? tableMgr.BeginColIdx() : tableMgr.EndColIdx();
                }
                return {
                    colIdx: colIdx,
                    insertColIdx: insertColIdx,
                    bInVertical: bInVertical
                };
            }
        }
        function ComputeAproximateRowHeight() {
            if (cachedAproximateRowHeight == 0) {
                var upperCaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                var rowHeightAproxTableElem = document.createElement('table');

                rowHeightAproxTableElem.id = '__rowHeightAproxTableElem';
                rowHeightAproxTableElem.style.cssText = 'position:absolute;top:-500px;left:0px;';
                var td = (rowHeightAproxTableElem.insertRow(-1)).insertCell(-1);

                td.style.cssText = tableMgr.GetTdDefaultCssText();
                SP.Internal.DomElement.SetText(td, upperCaseChars);
                document.body.appendChild(rowHeightAproxTableElem);
                Sys.Debug.assert(td.offsetHeight > 0, "Test element was not be appended to DOM successfully!");
                cachedAproximateRowHeight = td.offsetHeight + 1;
            }
            return cachedAproximateRowHeight;
        }
        Init();
    };
    SP.JsGrid.Internal.GridPaneConverter = function(objBag) {
        var _posConverter;
        var _columns, _rowMultiple;
        var _fieldKeyToColIdx, _fieldKeyToRowOffset, _colKeyToColIdx;
        var _this = this;

        this.SetPosConverterObj = function(posConverter) {
            _posConverter = posConverter;
        };
        this.SetView = function(columns) {
            UpdateColumns(columns, true);
        };
        this.NotifyColumnsChanged = function(columns) {
            UpdateColumns(columns, false);
        };
        this.IdxToKey = function(rowIdx, colIdx) {
            return {
                recordKey: _posConverter.ViewIdxToRecordKey(Math.floor(rowIdx / _rowMultiple)),
                fieldKey: this.IdxToFieldKey(rowIdx, colIdx),
                columnKey: _columns[colIdx].columnKey
            };
        };
        this.IdxToFieldKey = function(rowIdx, colIdx) {
            return _columns[colIdx].fieldKeys[rowIdx % _rowMultiple];
        };
        this.KeyToIdx = function(recordKey, fieldKey) {
            var offset = _fieldKeyToRowOffset[fieldKey];

            if (offset != null) {
                var rowIdx = _posConverter.RecordKeyToViewIdx(recordKey) * _rowMultiple + offset;
                var colIdx = _fieldKeyToColIdx[fieldKey];

                if (colIdx != null) {
                    return {
                        rowIdx: rowIdx,
                        colIdx: colIdx
                    };
                }
            }
            return null;
        };
        this.GetTopRowIdxForKey = function(recordKey) {
            return _posConverter.RecordKeyToViewIdx(recordKey) * _rowMultiple;
        };
        this.GetTopRowIdx = function() {
            return _posConverter.GetTopViewIdx() * _rowMultiple;
        };
        this.RowIdxToViewIdx = function(rowIdx) {
            return Math.floor(rowIdx / _rowMultiple);
        };
        this.RowIdxToRelRowIdx = function(rowIdx) {
            return rowIdx - _posConverter.GetTopViewIdx() * _rowMultiple;
        };
        this.RowIdxToRecordKey = function(rowIdx) {
            return _posConverter.ViewIdxToRecordKey(this.RowIdxToViewIdx(rowIdx));
        };
        this.RelRowIdxToRowIdx = function(relRowIdx) {
            return relRowIdx + _posConverter.GetTopViewIdx() * _rowMultiple;
        };
        this.ColKeyToColIdx = function(columnKey) {
            return _colKeyToColIdx[columnKey];
        };
        this.ColIdxToColKey = function(colIdx) {
            return _columns[colIdx].columnKey;
        };
        this.ColKeyToFieldKeys = function(colKey) {
            return _columns[_colKeyToColIdx[colKey]].fieldKeys;
        };
        this.FieldKeyToColIdx = function(fieldKey) {
            return _fieldKeyToColIdx[fieldKey];
        };
        this.GetWholeRowDisplayCapacity = function() {
            return _posConverter.GetWholeRowDisplayCapacity() * _rowMultiple;
        };
        this.GetRowMultiple = function() {
            return _rowMultiple;
        };
        this.GetRecordsInvolved = function(rowIdx, count, fnCallback) {
            function AsyncCallback() {
                var r = _this.GetRecordsInvolved(rowIdx, count, fnCallback);

                if (r != null) {
                    fnCallback(r);
                }
            }
            function MakeMap(records) {
                var r = {};

                for (var i = 0; i < records.length; i++) {
                    r[records[i].key()] = records[i];
                }
                return r;
            }
            var viewIdx = (rowIdx - rowIdx % _rowMultiple) / _rowMultiple;
            var recordCount = Math.ceil((count + rowIdx % _rowMultiple) / _rowMultiple);
            var result = _posConverter.GetViewRecords(viewIdx, recordCount, AsyncCallback);

            return result.recordSetComplete ? MakeMap(result.records) : null;
        };
        this.IsRecordOnScreen = function(recordKey) {
            return _posConverter.IsRecordOnScreen(recordKey);
        };
        this.GetRecordKeysInvolved = function(rowIdx, count) {
            var viewIdx = (rowIdx - rowIdx % _rowMultiple) / _rowMultiple;
            var recordCount = Math.ceil((count + rowIdx % _rowMultiple) / _rowMultiple);
            var r = new Array(recordCount);

            for (var i = 0; i < recordCount; i++) {
                r[i] = _posConverter.ViewIdxToRecordKey(viewIdx + i);
            }
            return r;
        };
        this.GetVirtualRowCount = function() {
            return (_posConverter.GetViewRecordCount() + (objBag.entryRecordMgr.GetEntryRecords()).length) * _rowMultiple;
        };
        this.GetVirtualColumnCount = function() {
            return _columns.length;
        };
        this.GetColumnByIdx = function(colIdx) {
            return _columns[colIdx];
        };
        this.GetColumnByKey = function(columnKey) {
            var colIdx = _colKeyToColIdx[columnKey];

            return colIdx == null ? null : _columns[colIdx];
        };
        function UpdateColumns(columns, bNewMultiple) {
            _columns = columns;
            _fieldKeyToColIdx = {};
            _fieldKeyToRowOffset = {};
            _colKeyToColIdx = {};
            for (var i = 0; i < columns.length; i++) {
                _colKeyToColIdx[columns[i].columnKey] = i;
                var fieldKeys = columns[i].fieldKeys;

                if (bNewMultiple) {
                    _rowMultiple = fieldKeys.length;
                }
                Sys.Debug.assert(fieldKeys.length == _rowMultiple);
                for (var j = 0; j < _rowMultiple; j++) {
                    _fieldKeyToColIdx[fieldKeys[j]] = i;
                    _fieldKeyToRowOffset[fieldKeys[j]] = j;
                }
            }
        }
    };
    SP.JsGrid.Internal.GridTouchManager = function(parentNode, touchableActions) {
        var _touchManager, _touchTypes;
        var _touchableActions = touchableActions || {};
        var _controlInTouch;
        var _bTouchScrollingStarted = false, _bVertTouchScroll, _touchMovePos;
        var _scrollSensitivity = {
            x: 0.1,
            y: 0.2
        };

        EnsureScriptFunc("XUI.js", "XUI.Touch.CreateTouchManager", Init);
        function Init() {
            _touchManager = XUI.Touch.CreateTouchManager(parentNode, OnTouchStart, OnTouchMove, OnTouchEndOrCancel, OnTouchEndOrCancel, ShouldUpdateTouchStartPosition);
            _touchTypes = XUI.Touch.NormalizedType;
        }
        function FindAndCacheClosestTouchableControl(elem) {
            var bFound = false;

            while (!bFound && elem != null) {
                for (var key in _touchableActions) {
                    if (elem == _touchableActions[key].element) {
                        _controlInTouch = _touchableActions[key].control;
                        bFound = true;
                    }
                }
                elem = elem.parentNode;
            }
        }
        function OnTouchStart(eventInfo, pos) {
            FindAndCacheClosestTouchableControl(eventInfo.target);
            var fn = _controlInTouch && (_controlInTouch.ExecuteTouchAction || DefaultExecuteTouchAction);

            if (fn != null) {
                fn(eventInfo, pos);
            }
        }
        function OnTouchMove(eventInfo, pos, moveDelta) {
            var fn = _controlInTouch && (_controlInTouch.ExecuteTouchAction || DefaultExecuteTouchAction);

            if (fn != null) {
                fn(eventInfo, pos, moveDelta);
            }
        }
        function OnTouchEndOrCancel(eventInfo) {
            var fn = _controlInTouch && (_controlInTouch.ExecuteTouchAction || DefaultExecuteTouchAction);

            if (fn != null) {
                fn(eventInfo);
            }
        }
        function ShouldUpdateTouchStartPosition(moveDelta) {
            var fn = _controlInTouch && (_controlInTouch.ShouldUpdateTouchStartPosition || DefaultShouldUpdateTouchStartPosition);

            return fn != null && fn(moveDelta);
        }
        function DefaultExecuteTouchAction(eventInfo, pos, moveDelta) {
            switch (eventInfo.type) {
            case _touchTypes.touchmove:
                var d = GetNormalizedMoveDelta(moveDelta);

                if (!_bTouchScrollingStarted) {
                    _bVertTouchScroll = ShouldTouchScrollVertically(moveDelta);
                    _bTouchScrollingStarted = true;
                }
                if (_touchMovePos != pos) {
                    if (_bVertTouchScroll && d.y != 0) {
                        _controlInTouch.ScrollVerticallyByTouch(d.y > 0);
                        _touchMovePos = pos;
                    }
                    else if (d.x != 0) {
                        _controlInTouch.ScrollHorizontallyByTouch(d.x > 0);
                        _touchMovePos = pos;
                    }
                }
                eventInfo.preventDefault();
                break;
            case _touchTypes.touchend:
                _touchMovePos = null;
                _bTouchScrollingStarted = false;
                break;
            }
        }
        function DefaultShouldUpdateTouchStartPosition(moveDelta) {
            var d = GetNormalizedMoveDelta(moveDelta);
            var bVert = ShouldTouchScrollVertically(moveDelta);

            return !bVert && d.x != 0 || bVert && d.y != 0;
        }
        function GetNormalizedMoveDelta(moveDelta) {
            var normalizedDelta = {
                x: Math.floor(Math.abs(moveDelta.x) * _scrollSensitivity.x) * (moveDelta.x < 0 ? -1 : 1),
                y: Math.floor(Math.abs(moveDelta.y) * _scrollSensitivity.y) * (moveDelta.y < 0 ? -1 : 1)
            };

            return normalizedDelta;
        }
        function ShouldTouchScrollVertically(moveDelta) {
            return Math.abs(moveDelta.x) <= Math.abs(moveDelta.y);
        }
        this.RegisterTouchableAction = function(key, action) {
            _touchableActions[key] = action;
        };
        this.UnregisterTouchableAction = function(key) {
            delete _touchableActions[key];
        };
        this.Dispose = function() {
            if (_touchManager != null) {
                _touchManager.Dispose();
            }
        };
    };
    SP.JsGrid.EmptyValue = {};
    SP.JsGrid.InvalidValue = {};
    SP.JsGrid.GuidManager = (function() {
        var _map = [];
        var _idxMap = [];

        return {
            GetIndexForGuid: function(g) {
                var mIdx = SP.Internal.JS.LowerBound(_map, g, 'guid');
                var r;

                if (_map[mIdx] != null && _map[mIdx].guid == g) {
                    r = _map[mIdx].idx;
                }
                else {
                    r = _idxMap.length;
                    _idxMap.push({
                        guid: g,
                        idx: r
                    });
                    _map.splice(mIdx, 0, _idxMap[r]);
                }
                return r;
            },
            LookupIndexForGuid: function(g) {
                var mIdx = SP.Internal.JS.LowerBound(_map, g, 'guid');
                var r = null;

                if (_map[mIdx] != null && _map[mIdx].guid == g) {
                    r = _map[mIdx].idx;
                }
                return r;
            },
            LookupGuidForIndex: function(idx) {
                return _idxMap[idx] != null ? _idxMap[idx].guid : null;
            }
        };
    })();
    SP.JsGrid.AsynchronousTaskManager = new (function() {
        var _delay = [10, 75, 150, 500];
        var _tasks = {};
        var _this = this;
        var _stopCount = 0;

        function RegisterTask(fnDoIncrementalWork, optPriority, optKey) {
            var pri = optPriority == null ? SP.JsGrid.AsynchronousTaskManager.Priority.High : optPriority;
            var key = optKey;
            var intervalId = setInterval(function() {
                if (key in _tasks && !fnDoIncrementalWork(key)) {
                    _this.ClearTask(key);
                }
            }, _delay[pri]);

            key = key != null ? key : intervalId;
            _tasks[key] = {
                intervalId: intervalId,
                priority: pri,
                fn: fnDoIncrementalWork
            };
            return key;
        }
        this.RegisterTask = function(fnDoIncrementalWork, optPriority) {
            return RegisterTask(fnDoIncrementalWork, optPriority);
        };
        this.SetTaskPriority = function(taskKey, newPri) {
            var taskInfo = _tasks[taskKey];

            this.ClearTask(taskKey);
            RegisterTask(taskInfo.fn, newPri, taskKey);
        };
        this.GetTaskPriority = function(taskKey) {
            return _tasks[taskKey] && _tasks[taskKey].priority;
        };
        this.TaskRegistered = function(taskKey) {
            return taskKey in _tasks;
        };
        this.ClearTask = function(taskKey) {
            var curTask = _tasks[taskKey];

            if (curTask != null) {
                clearInterval(curTask.intervalId);
                delete _tasks[taskKey];
            }
        };
        this.Stop = function() {
            for (var idx in _tasks) {
                clearInterval(_tasks[idx].intervalId);
            }
            _stopCount++;
        };
        this.Resume = function() {
            if (_stopCount == 1) {
                var items = {};

                for (var idx in _tasks) {
                    items[idx] = _tasks[idx];
                }
                _tasks = {};
                for (var idx in items) {
                    RegisterTask(items[idx].fn, items[idx].priority, idx);
                }
            }
            _stopCount = Math.min(_stopCount - 1, 0);
        };
    });
    SP.JsGrid.AsynchronousTaskManager.Priority = {
        Low: 3,
        Medium: 2,
        High: 1,
        SuperHigh: 0
    };
    SP.JsGrid.AsynchronousCellUpdater = new (function() {
        var _jobs = {};
        var _maxNumToProcess = 10;
        var _curJobKey = 0;
        var _upShiftThreshold = 5;
        var _downShiftThreshold = 20;
        var _asyncMgr = SP.JsGrid.AsynchronousTaskManager;

        function TryAdjustThreadPriority(job) {
            var diff = job.cells.length - job.lastCellCount;
            var bHighPriMode = _asyncMgr.GetTaskPriority(job.token) == _asyncMgr.Priority.SuperHigh;

            if (!bHighPriMode && diff < _upShiftThreshold) {
                _asyncMgr.SetTaskPriority(job.token, _asyncMgr.Priority.SuperHigh);
                bHighPriMode = true;
            }
            else if (bHighPriMode && diff > _downShiftThreshold) {
                _asyncMgr.SetTaskPriority(job.token, _asyncMgr.Priority.Medium);
                bHighPriMode = false;
            }
            return bHighPriMode;
        }
        function ProcessTasks(jobKey, bAll) {
            var job = _jobs[jobKey];
            var toProcess;

            if (!bAll) {
                var bHighPriMode = TryAdjustThreadPriority(job);

                toProcess = Math.min(bHighPriMode ? _maxNumToProcess * 7 : _maxNumToProcess, job.cells.length);
            }
            else {
                toProcess = job.cells.length;
            }
            var count = 0;
            var bBreak = false;
            var toDelete = [];

            for (var i = 0; i < toProcess; i++) {
                job.fn.apply(null, job.cells[i]);
            }
            job.cells.splice(0, toProcess);
            job.lastCellCount = job.cells.length;
            return job.cells.length != 0;
        }
        this.RegisterCell = function(jobKey, recordKey, fieldKey) {
            var job = _jobs[jobKey];

            if (job.token == null || !_asyncMgr.TaskRegistered(job.token)) {
                job.token = _asyncMgr.RegisterTask(job.fnProcess, _asyncMgr.Priority.Medium);
            }
            job.cells[job.cells.length] = Array.prototype.slice.apply(arguments, [1, arguments.length]);
        };
        this.ChangeRecordKeys = function(oldKey, newKey) {
            for (var jobKey in _jobs) {
                var cells = _jobs[jobKey].cells;

                for (var i = 0; i < cells.length; i++) {
                    if (cells[i][0] == oldKey) {
                        cells[i][0] = newKey;
                    }
                }
            }
        };
        this.RegisterJob = function(fn) {
            var jobKey = _curJobKey++;

            _jobs[jobKey] = {
                fn: fn,
                cells: [],
                fnProcess: function() {
                    return ProcessTasks(jobKey);
                },
                lastCellCount: 0
            };
            return jobKey;
        };
        this.FlushJob = function(jobKey) {
            if (jobKey in _jobs) {
                ProcessTasks(jobKey, true);
            }
        };
    });
    SP.JsGrid.Internal.Color = (function() {
        var _hex2pos = {
            '0': 0,
            '1': 1,
            '2': 2,
            '3': 3,
            '4': 4,
            '5': 5,
            '6': 6,
            '7': 7,
            '8': 8,
            '9': 9,
            'A': 10,
            'B': 11,
            'C': 12,
            'D': 13,
            'E': 14,
            'F': 15
        };
        var _pos2hex = '0123456789ABCDEF';

        return {
            MakeColor: function(r, g, b) {
                return SP.JsGrid.Internal.Color.MakeAlphaColor(1, r, g, b);
            },
            MakeAlphaColor: function(a, r, g, b) {
                return {
                    a: a,
                    r: r * a,
                    g: g * a,
                    b: b * a
                };
            },
            RemoveAlphaChannel: function(color) {
                return color.a < 1 ? SP.JsGrid.Internal.Color.MakeColor(color.r / color.a, color.g / color.a, color.b / color.a) : color;
            },
            HexStringToColor: function(hexStr) {
                function ConvertComponentToNum(hex) {
                    var charAt0 = hex.charAt(0);
                    var charAt1 = hex.length == 1 ? charAt0 : hex.charAt(1);

                    return (_hex2pos[charAt0] * 16 + _hex2pos[charAt1]) / 255;
                }
                var r;
                var components;

                if (hexStr.charAt(0) == '#') {
                    var uHexStr = hexStr.toUpperCase();

                    r = uHexStr.length == 4 ? SP.JsGrid.Internal.Color.MakeColor(ConvertComponentToNum(uHexStr.substr(1, 1)), ConvertComponentToNum(uHexStr.substr(2, 1)), ConvertComponentToNum(uHexStr.substr(3, 1))) : SP.JsGrid.Internal.Color.MakeColor(ConvertComponentToNum(uHexStr.substr(1, 2)), ConvertComponentToNum(uHexStr.substr(3, 2)), ConvertComponentToNum(uHexStr.substr(5, 2)));
                }
                else if (hexStr.indexOf('rgb(') == 0 || hexStr.indexOf('RGB(') == 0) {
                    components = (hexStr.substr(4, hexStr.length - 5)).split(',');
                    r = SP.JsGrid.Internal.Color.MakeColor(components[0] / 255, components[1] / 255, components[2] / 255);
                }
                else if (hexStr.indexOf('rgba(') == 0 || hexStr.indexOf('RGBA(') == 0) {
                    components = (hexStr.substr(5, hexStr.length - 6)).split(',');
                    r = SP.JsGrid.Internal.Color.MakeAlphaColor(components[3], components[0] / 255, components[1] / 255, components[2] / 255);
                }
                return r;
            },
            ColorToHexString: function(color) {
                function ConvertComponentToHexString(num) {
                    num = Math.floor(num * 255);
                    return _pos2hex.charAt(Math.floor(num / 16)) + _pos2hex.charAt(num % 16);
                }
                return '#' + ConvertComponentToHexString(color.r) + ConvertComponentToHexString(color.g) + ConvertComponentToHexString(color.b);
            },
            AlphaBlend: function(alphaColor1, alphaColor2) {
                var invA1 = 1 - alphaColor1.a;

                return SP.JsGrid.Internal.Color.MakeAlphaColor(alphaColor1.a + alphaColor2.a * invA1, alphaColor1.r + invA1 * alphaColor2.r, alphaColor1.g + invA1 * alphaColor2.g, alphaColor1.b + invA1 * alphaColor2.b);
            }
        };
    })();
    SP.Internal.JS = {
        object: function(o) {
            function F() {
            }
            F.prototype = o;
            return new F();
        },
        ConvertTableToMap: function(ary, keyCol, valueCol) {
            var r = {};

            for (var i = 0; i < ary.length; i++) {
                r[ary[i][keyCol]] = valueCol != null ? ary[i][valueCol] : ary[i];
            }
            return r;
        },
        ConvertTableColumnToArray: function(tbl, valueCol) {
            var r = [];

            for (var i = 0; i < tbl.length; i++) {
                r.push(tbl[i][valueCol]);
            }
            return r;
        },
        ConvertSetKeysToArray: function(st) {
            var r = [];

            for (var key in st) {
                r.push(key);
            }
            return r;
        },
        ConvertSetDataToArray: function(st) {
            var r = [];

            for (var key in st) {
                r.push(st[key]);
            }
            return r;
        },
        ConvertArrayToSet: function(ary, keyMember) {
            var r = {};

            for (var i = 0; i < ary.length; i++) {
                r[ary[i][keyMember]] = ary[i];
            }
            return r;
        },
        EncodeString: function(str) {
            return '"' + str + '"';
        },
        MoveItemInArray: function(array, from, to) {
            var item = array.splice(from, 1);

            array.splice(to, 0, item[0]);
        },
        GetFirstElement: function(assocArray) {
            for (var key in assocArray) {
                return assocArray[key];
            }
            return undefined;
        },
        IsAssocArrayEmpty: function(assocArray) {
            for (var key in assocArray) {
                return false;
            }
            return true;
        },
        GetAssocArraySize: function(assocArray) {
            var r = 0;

            for (var key in assocArray) {
                r++;
            }
            return r;
        },
        CloneObj: function(obj, bDeep) {
            if (obj == null) {
                return null;
            }
            if (obj.clone != null && bDeep) {
                return obj.clone();
            }
            if (obj.Clone != null && bDeep) {
                return obj.Clone();
            }
            if (obj instanceof Array) {
                var r = [];

                for (var i = 0; i < obj.length; i++) {
                    r.push(bDeep ? SP.Internal.JS.CloneObj(obj[i], true) : obj[i]);
                }
                return r;
            }
            if (obj instanceof Date) {
                r = new Date(obj.getTime());
                return r;
            }
            if (obj instanceof Function) {
                return obj;
            }
            if (obj instanceof Object) {
                var isClonable = true;

                for (var idx in obj) {
                    isClonable = isClonable && !(obj[idx] instanceof Function);
                }
                if (isClonable) {
                    var r = {};

                    for (var idx in obj) {
                        if (!(idx in r)) {
                            r[idx] = bDeep ? SP.Internal.JS.CloneObj(obj[idx], true) : obj[idx];
                        }
                    }
                }
                return r;
            }
            return obj;
        },
        BinarySearch: function(array, val, itemMember) {
            var idx = SP.Internal.JS.LowerBound(array, val, itemMember);

            return idx === array.length || (itemMember ? array[idx][itemMember] : array[idx]) !== val ? null : idx;
        },
        LowerBound: function(array, val, itemMember) {
            return SP.Internal.JS.LowerBoundCompare(array, val, function(idx, val) {
                var aryVal = itemMember ? array[idx][itemMember] : array[idx];

                return val > aryVal ? 1 : aryVal > val ? -1 : 0;
            });
        },
        LowerBoundCompare: function(array, val, com) {
            var l = -1, r = array.length, m;

            while (r - l > 1) {
                m = l + r >>> 1;
                com(m, val) > 0 ? (l = m) : (r = m);
            }
            return r;
        },
        UpperBound: function(array, val, itemMember) {
            var l = -1, r = array.length, m;

            while (r - l > 1) {
                m = l + r >>> 1;
                var centerVal = itemMember ? array[m][itemMember] : array[m];

                val >= centerVal ? (l = m) : (r = m);
            }
            return r;
        },
        Compose: function(f, g) {
            return function(x) {
                var gx = g ? g(x) : x;

                return f ? f(gx) : gx;
            };
        },
        FindInArray: function(array, fnPredicate, bLast) {
            var r;

            for (var i = 0; i < array.length; i++) {
                if (fnPredicate(array[i])) {
                    r = i;
                    if (!bLast) {
                        break;
                    }
                }
            }
            return r;
        },
        Find: function(assocArray, fnPredicate, bLast) {
            var r = SP.Internal.JS.FindKey(assocArray, fnPredicate, bLast);

            return r == null ? null : assocArray[r];
        },
        FindKey: function(assocArray, fnPredicate, bLast) {
            var r = undefined;

            for (var i in assocArray) {
                if (fnPredicate(assocArray[i])) {
                    r = i;
                    if (!bLast) {
                        break;
                    }
                }
            }
            return r;
        },
        RoundTo: function(value, n) {
            var r = Math.pow(10, n);

            return value == 0 ? value : Math.round(value * r) / r;
        },
        _shutUpKeys: null,
        CoalesceFunctionCalls: function(key, fnQueuedFunction, optWindow) {
            if (this._shutUpKeys == null) {
                this._shutUpKeys = new SP.Utilities.Set();
            }
            var keys = this._shutUpKeys;

            if (!keys.Contains(key)) {
                keys.Add(key);
                setTimeout(QueuedFunctionWrapper, optWindow == null ? 0 : optWindow);
            }
            function QueuedFunctionWrapper() {
                keys.Remove(key);
                fnQueuedFunction();
            }
        },
        Flatten2LevelArray: function(array) {
            var r = [];

            for (var idx in array) {
                for (var sIdx in array[idx]) {
                    r.push(array[idx][sIdx]);
                }
            }
            return r;
        },
        TokenizeString: function(str, delim) {
            var r = [];

            if (str != null && str != SP.JsGrid.EmtpyValue) {
                var splits = str.split(delim);

                for (var i = 0; i < splits.length; i++) {
                    var v = splits[i].replace(/^\s+|\s+$/g, '');

                    if (v != '') {
                        r.push(v);
                    }
                }
            }
            return r;
        },
        JoinStrings: function(strArray, delimStr) {
            if (strArray == null) {
                return null;
            }
            var trimmed = [];

            for (var i = 0; i < strArray.length; i++) {
                if (strArray[i] != '' && strArray[i] != null) {
                    trimmed.push(strArray[i]);
                }
            }
            return trimmed.join(delimStr);
        },
        ProfilerMark: function(text) {
            if (window.msWriteProfilerMark)
                window.msWriteProfilerMark(text);
        }
    };
    SP.JsGrid.EventArgs = {
        CellFocusChanged: function(newRecordKey, newFieldKey, oldRecordKey, oldFieldKey) {
            return {
                newRecordKey: newRecordKey,
                newFieldKey: newFieldKey,
                oldRecordKey: oldRecordKey,
                oldFieldKey: oldFieldKey
            };
        },
        RowFocusChanged: function(newRecordKey, oldRecordKey) {
            return {
                newRecordKey: newRecordKey,
                oldRecordKey: oldRecordKey
            };
        },
        CellEditBegin: function(recordKey, fieldKey) {
            return {
                recordKey: recordKey,
                fieldKey: fieldKey
            };
        },
        CellEditCompleted: function(recordKey, fieldKey, changeKey, bCancelled) {
            return {
                recordKey: recordKey,
                fieldKey: fieldKey,
                changeKey: changeKey,
                bCancelled: bCancelled
            };
        },
        Click: function(eventInfo, context, recordKey, fieldKey) {
            return {
                eventInfo: eventInfo,
                context: context,
                recordKey: recordKey,
                fieldKey: fieldKey
            };
        },
        PropertyChanged: function(recordKey, fieldKey, oldProp, newProp, propType, changeKey, validationState) {
            return {
                recordKey: recordKey,
                fieldKey: fieldKey,
                oldProp: oldProp,
                newProp: newProp,
                propType: propType,
                changeKey: changeKey,
                validationState: validationState
            };
        },
        RecordInserted: function(recordKey, recordIdx, afterRecordKey, changeKey) {
            return {
                recordKey: recordKey,
                recordIdx: recordIdx,
                afterRecordKey: afterRecordKey,
                changeKey: changeKey
            };
        },
        RecordDeleted: function(recordKey, recordIdx, changeKey) {
            return {
                recordKey: recordKey,
                recordIdx: recordIdx,
                changeKey: changeKey
            };
        },
        RecordChecked: function(recordKeySet, bChecked) {
            return {
                recordKeySet: recordKeySet,
                bChecked: bChecked
            };
        },
        OnCellErrorStateChanged: function(recordKey, fieldKey, bAddingError, bCellCurrentlyHasError, bCellHadError, errorId) {
            return {
                recordKey: recordKey,
                fieldKey: fieldKey,
                bAddingError: bAddingError,
                bCellCurrentlyHasError: bCellCurrentlyHasError,
                bCellHadError: bCellHadError,
                errorId: errorId
            };
        },
        OnRowErrorStateChanged: function(recordKey, bAddingError, bErrorCurrentlyInRow, bRowHadError, errorId, message) {
            return {
                recordKey: recordKey,
                bAddingError: bAddingError,
                bErrorCurrentlyInRow: bErrorCurrentlyInRow,
                bRowHadError: bRowHadError,
                errorId: errorId,
                message: message
            };
        },
        OnEntryRecordAdded: function(recordKey) {
            return {
                recordKey: recordKey
            };
        },
        OnEntryRecordCommitted: function(origRecKey, recordKey, changeKey) {
            return {
                originalRecordKey: origRecKey,
                recordKey: recordKey,
                changeKey: changeKey
            };
        },
        SingleCellClick: function(eventInfo, recordKey, fieldKey) {
            return {
                eventInfo: eventInfo,
                recordKey: recordKey,
                fieldKey: fieldKey
            };
        },
        PendingChangeKeyInitiallyComplete: function(changeKey) {
            return {
                changeKey: changeKey
            };
        },
        VacateChange: function(changeKey) {
            return {
                changeKey: changeKey
            };
        },
        GridErrorStateChanged: function(bAnyErrors) {
            return {
                bAnyErrors: bAnyErrors
            };
        },
        SingleCellKeyDown: function(eventInfo, recordKey, fieldKey) {
            return {
                eventInfo: eventInfo,
                recordKey: recordKey,
                fieldKey: fieldKey
            };
        },
        OnRecordsReordered: function(recordKeys, changeKey) {
            return {
                reorderedKeys: recordKeys,
                changeKey: changeKey
            };
        },
        OnRowEscape: function(recordKey) {
            return {
                recordKey: recordKey
            };
        },
        OnEndRenameColumn: function(columnKey, originalColumnTitle, newColumnTitle) {
            return {
                columnKey: columnKey,
                originalColumnTitle: originalColumnTitle,
                newColumnTitle: newColumnTitle
            };
        },
        OnBeginRedoDataUpdateChange: function(changeKey) {
            return {
                changeKey: changeKey
            };
        },
        OnBeginUndoDataUpdateChange: function(changeKey) {
            return {
                changeKey: changeKey
            };
        }
    };
    SP.JsGrid.Internal.EventArgs = {
        OnRowHeaderStateChanged: function(recordKey, rowHeaderState) {
            return {
                recordKey: recordKey,
                rowHeaderState: rowHeaderState
            };
        },
        ChangeKeyStageUpdated: function(changeKey) {
            return {
                changeKey: changeKey
            };
        },
        RecordInserted: function(recordKey) {
            return {
                recordKey: recordKey
            };
        },
        RecordDeleted: function(recordKey) {
            return {
                recordKey: recordKey
            };
        }
    };
    SP.JsGrid.Image = function(imgSrc, bIsClustered, optOuterCssNames, optImgCssNames, bIsAnimated) {
        this.imgSrc = imgSrc;
        this.bIsClustered = bIsClustered;
        this.outerCssNames = optOuterCssNames;
        this.imgCssNames = optImgCssNames;
        this.bIsAnimated = bIsAnimated;
    };
    SP.JsGrid.Image.prototype = {
        Render: function(altText, clickFn, bHideTooltip) {
            if (this.imgSrc == null) {
                return null;
            }
            var r = document.createElement('img');

            r.style.border = "0";
            r.src = this.imgSrc;
            if (altText != null) {
                r.alt = altText;
                if (!bHideTooltip) {
                    r.title = altText;
                }
            }
            else {
                r.alt = "";
            }
            if (this.imgCssNames != null) {
                r.className = this.imgCssNames;
            }
            if (this.bIsClustered) {
                var div = document.createElement('div');

                div.className = this.outerCssNames;
                div.appendChild(r);
                r = div;
            }
            if (this.bIsAnimated) {
                Sys.Debug.assert(clickFn == null, 'Cannot specify a clickFn to an animated image.');
                clickFn = function(eventInfo) {
                    r.style.visibility = 'hidden';
                };
            }
            if (clickFn != null) {
                $addHandler(r, 'mousedown', clickFn);
                $addHandler(r, 'keydown', function(eventInfo) {
                    if (eventInfo.keyCode == Sys.UI.Key.enter) {
                        clickFn(eventInfo);
                        SP.Internal.DomElement.StopEvent(eventInfo);
                    }
                });
                r.style.cursor = 'pointer';
                r.tabIndex = -1;
            }
            if (clickFn != null) {
                r.Dispose = function() {
                    $clearHandlers(r);
                    clickFn = null;
                    div = null;
                    r.Dispose = null;
                    r = null;
                };
            }
            return r;
        }
    };
    SP.JsGrid.ApplyServerChangesToGrid = function(jsgrid, changes, fnInsertRecord, optFnIngorePropUpdate, bOptNewChange, optFnNotifyAfterApplyPropChange) {
        var currentChangeKey;

        if (changes != null) {
            for (var i = 0; i < changes.length; i++) {
                var curChange = changes[i];
                var props = [];
                var deletes = [];
                var inserts = [];

                for (var j = 0; j < curChange.updates.length; j++) {
                    var curUpdate = curChange.updates[j];

                    if (curUpdate.type == SP.JsGrid.Internal.VersionManager.ChangeType.Prop) {
                        props.push(GetPropUpdate(curUpdate.recordKey, curUpdate.fieldKey, curUpdate.newProp));
                    }
                    else if (curUpdate.type == SP.JsGrid.Internal.VersionManager.ChangeType.Insert) {
                        inserts.push(curUpdate);
                    }
                    else if (curUpdate.type == SP.JsGrid.Internal.VersionManager.ChangeType.Delete) {
                        deletes.push(curUpdate.recordKey);
                    }
                }
                ApplyInserts(inserts);
                ApplyPropUpdates(props);
                ApplyDeletes(deletes);
                ClearCurrentChangeKey();
            }
        }
        function GetPropUpdate(recordKey, fieldKey, serverProp) {
            var newPropUpdate;

            if (serverProp.hasLocalizedValue && serverProp.hasDataValue) {
                newPropUpdate = SP.JsGrid.CreateValidatedPropertyUpdate(recordKey, fieldKey, serverProp.dataValue, serverProp.localizedValue);
            }
            else {
                newPropUpdate = SP.JsGrid.CreateUnvalidatedPropertyUpdate(recordKey, fieldKey, serverProp.hasDataValue ? serverProp.dataValue : serverProp.localizedValue, !serverProp.hasDataValue);
            }
            return newPropUpdate;
        }
        function GetCurrentChangeKey() {
            var r = currentChangeKey;

            if (r == null && !bOptNewChange) {
                if (curChange.changeNumber == -1) {
                    Sys.Debug.assert(false, "Invalid change list from server - if these changes are to be applied as a new update, please set the bOptNewChange parameter to true");
                }
                else {
                    r = jsgrid.GetChangeKeyForVersion(curChange.changeNumber);
                }
            }
            return r;
        }
        function CurrentChangeKeyUpdated(ck) {
            currentChangeKey = ck;
        }
        function ClearCurrentChangeKey() {
            currentChangeKey = null;
            optChangeKey = null;
        }
        function ApplyInserts(inserts) {
            for (var i = 0; i < inserts.length; i++) {
                var ck = fnInsertRecord(inserts[i].afterRecordKey, inserts[i].recordKey, GetCurrentChangeKey());

                Sys.Debug.assert(ck != null, 'The change key from inserting the record must be returned.');
                CurrentChangeKeyUpdated(ck);
            }
        }
        function ApplyPropUpdates(propUpdates) {
            if (props.length > 0) {
                var ck = jsgrid.UpdateProperties(props, SP.JsGrid.UserAction.UserEdit, GetCurrentChangeKey());

                if (optFnNotifyAfterApplyPropChange != null) {
                    optFnNotifyAfterApplyPropChange(props, ck);
                }
                CurrentChangeKeyUpdated(ck);
            }
        }
        function ApplyDeletes(propUpdates) {
            if (deletes.length > 0) {
                var ck = jsgrid.DeleteRecords(deletes, GetCurrentChangeKey());

                CurrentChangeKeyUpdated(ck);
            }
        }
    };
    SP.JsGrid.EventManager = function() {
        var events = {};

        this.FireEvent = function(eventType, eventArgs) {
            var curEvents = events[eventType];

            if (curEvents != null) {
                for (var idx in curEvents) {
                    curEvents[idx](eventArgs);
                }
            }
        };
        this.AttachEvent = function(eventType, fnOnEvent) {
            if (events[eventType] == null) {
                events[eventType] = [];
            }
            events[eventType].push(fnOnEvent);
        };
        this.DetachEvent = function(eventType, fnOnEvent) {
            if (events[eventType] != null) {
                var idx = SP.Internal.JS.FindInArray(events[eventType], function(item) {
                    return item == fnOnEvent;
                });

                if (idx != null) {
                    events[eventType].splice(idx, 1);
                }
            }
        };
    };
    SP.JsGrid.DelegateManager = function() {
        var _delegates = {};

        this.SetDelegate = function(delegateKey, fn) {
            if (fn != null) {
                _delegates[delegateKey] = fn;
            }
            else {
                delete _delegates[delegateKey];
            }
        };
        this.DelegatePresent = function(delegateKey) {
            return delegateKey in _delegates;
        };
        this.GetDelegate = function(delegateKey) {
            return _delegates[delegateKey];
        };
        this.Apply = function() {
            var delegate = _delegates[arguments[0]];

            if (delegate != null) {
                return delegate.apply(null, Array.prototype.slice.call(arguments, 1));
            }
        };
    };
    SP.JsGrid.MakeShapeStyle = function(shape, color) {
        return {
            shape: shape,
            color: color
        };
    };
    SP.JsGrid.MakeBarStyle = function(shape, color, pattern, startShapeStyle, endShapeStyle, strokeWeight) {
        return {
            shape: shape,
            color: color,
            pattern: pattern,
            start: startShapeStyle,
            end: endShapeStyle,
            strokeWeight: strokeWeight
        };
    };
    SP.JsGrid.Internal.EmptyFunction = function() {
    };
    SP.JsGrid.Internal.CrackCellKey = function(cellKey) {
        var a = cellKey.split(',');

        return {
            rowIdx: a[0],
            colIdx: a[1]
        };
    };
    SP.JsGrid.Internal.MakeCellKey = function(rowIdx, colIdx) {
        return [rowIdx, colIdx].join();
    };
    SP.JsGrid.Internal.IsNoOpChange = function(propChangedArgs, record) {
        var fieldKey = propChangedArgs.fieldKey;

        return (!record.HasLocalizedValue(fieldKey) || propChangedArgs.oldProp.localized == propChangedArgs.newProp.localized) && (!record.HasDataValue(fieldKey) || propChangedArgs.oldProp.data == propChangedArgs.newProp.data);
    };
    SP.JsGrid.Internal.JSONParse = function(jsonText) {
        return JSON.parse(jsonText, ReviveSerializedDate);
        function ReviveSerializedDate(key, value) {
            if (typeof value == 'string') {
                var dateRegEx = new RegExp('^/Date\\((-?[0-9]+)\\)/$', 'g');
                var regExResult = dateRegEx.exec(value);

                if (regExResult != null) {
                    var ticks = parseInt(regExResult[1]);

                    return new Date(ticks);
                }
            }
            return value;
        }
    };
    if (!Type.isNamespace('SP.Internal')) {
        Type.registerNamespace('SP.Internal');
    }
    SP.Internal.DomElement = (function() {
        var _zoomFactor = 1;
        var _captureElem, _fnUserOnMouseMove, _fnUserOnMouseUp, _origBodyCursor, _bUsingIE;

        function OnMouseMove(eventInfo) {
            if (_captureElem != null && eventInfo.button == Sys.UI.MouseButton.leftButton) {
                if (_fnUserOnMouseMove != null) {
                    _fnUserOnMouseMove(_bUsingIE ? eventInfo : MakeAtlasEventInfo(eventInfo));
                }
            }
        }
        function OnMouseUp(eventInfo) {
            if (_captureElem != null && eventInfo.button == Sys.UI.MouseButton.leftButton) {
                if (_fnUserOnMouseUp != null) {
                    _fnUserOnMouseUp(_bUsingIE ? eventInfo : MakeAtlasEventInfo(eventInfo));
                }
                ReleaseCapture();
            }
        }
        function OnLoseCapture(eventInfo) {
            ReleaseCapture();
        }
        function StopEvent(eventInfo) {
            eventInfo.stopPropagation();
            eventInfo.preventDefault();
        }
        function MakeAtlasEventInfo(eventInfo) {
            return new Sys.UI.DomEvent(eventInfo);
        }
        function SetCaptureForIE(domObj, fnUserOnMouseMove, fnUserOnMouseUp) {
            _bUsingIE = true;
            _captureElem = domObj;
            _fnUserOnMouseMove = fnUserOnMouseMove;
            _fnUserOnMouseUp = fnUserOnMouseUp;
            $addHandler(document, 'mousemove', OnMouseMove);
            $addHandler(document, 'mouseup', OnMouseUp);
            _captureElem.setCapture(true);
        }
        function SetCaptureForNonIE(domObj, fnUserOnMouseMove, fnUserOnMouseUp) {
            _bUsingIE = false;
            _captureElem = domObj;
            _fnUserOnMouseMove = fnUserOnMouseMove;
            _fnUserOnMouseUp = fnUserOnMouseUp;
            _origBodyCursor = document.body.style.cursor;
            document.body.style.cursor = SP.Internal.DomElement.GetComputedStyle(_captureElem, 'cursor', 'cursor');
            document.addEventListener('mousemove', OnMouseMove, true);
            document.addEventListener('mouseup', OnMouseUp, true);
            document.addEventListener('mouseover', StopEvent, true);
            document.addEventListener('mouseenter', StopEvent, true);
            document.addEventListener('mouseleave', StopEvent, true);
        }
        function ReleaseCapture() {
            if (_captureElem != null) {
                if (_bUsingIE) {
                    _captureElem.releaseCapture();
                    $removeHandler(document, 'mousemove', OnMouseMove);
                    $removeHandler(document, 'mouseup', OnMouseUp);
                }
                else {
                    document.body.style.cursor = _origBodyCursor;
                    document.removeEventListener('mousemove', OnMouseMove, true);
                    document.removeEventListener('mouseup', OnMouseUp, true);
                    document.removeEventListener('mouseover', StopEvent, true);
                    document.removeEventListener('mouseenter', StopEvent, true);
                    document.removeEventListener('mouseleave', StopEvent, true);
                }
                _captureElem = null;
                _fnUserOnMouseMove = null;
                _fnUserOnMouseUp = null;
                _origBodyCursor = null;
            }
        }
        function CacheIEZoomFactor() {
            if (r.BrowserIsIE) {
                var div1, div2;

                if ((div1 = $get('__iezoomtest1')) == null || (div2 = $get('__iezoomtest2')) == null) {
                    div1 = document.createElement('div');
                    div2 = document.createElement('div');
                    div1.style.cssText = 'position:absolute;top:0px;left:0px';
                    div2.style.cssText = 'position:absolute;top:0px;left:200px';
                    div1.appendChild(div2);
                    div1.id = '__iezoomtest1';
                    div2.id = '__iezoomtest2';
                    document.body.appendChild(div1);
                }
                var loc1 = Sys.UI.DomElement.getLocation(div1);
                var loc2 = Sys.UI.DomElement.getLocation(div2);

                _zoomFactor = (loc2.x - loc1.x) / 200;
                if (_zoomFactor == 0) {
                    _zoomFactor = 1;
                }
            }
        }
        function GetInt(str) {
            var r = parseInt(str, 10);

            return isNaN(r) ? 0 : r;
        }
        function OnMouseWheel(eventInfo, fnOnScroll) {
            var e = eventInfo.rawEvent;

            eventInfo.wheelDelta = Math.round(e.wheelDelta != null ? e.wheelDelta / -40 : e.detail);
            fnOnScroll(eventInfo);
        }
        var r = {
            AttributeOnElementOrAncestor: function(domElem, attribName, attribValue) {
                while (domElem != null && domElem.getAttribute != null) {
                    var val = domElem.getAttribute(attribName);

                    if (val == attribValue) {
                        return true;
                    }
                    domElem = domElem.parentNode;
                }
                return false;
            },
            PointInDomElem: function(x, y, domElem, optLocation) {
                var location = optLocation == null ? SP.Internal.DomElement.GetLocation(domElem) : optLocation;

                return location.x <= x && location.x + domElem.offsetWidth >= x && location.y <= y && location.y + domElem.offsetHeight >= y;
            },
            ElementAttachedToDom: function(elem) {
                if (document.body.contains != null) {
                    return document.body.contains(elem);
                }
                else {
                    Sys.Debug.assert(document.body.compareDocumentPosition != null);
                    return document.body.compareDocumentPosition(elem) >= 16;
                }
            },
            ReleaseCapture: ReleaseCapture,
            StopEvent: StopEvent,
            ForceIEZoomFactorRecomputation: CacheIEZoomFactor,
            GetLocation: function(domElem) {
                return SP.Internal.DomElement.AdjustCoordsForIEZoom(Sys.UI.DomElement.getLocation(domElem));
            },
            GetEventLocation: function(eventInfo) {
                var offsets = SP.Internal.DomElement.GetScreenOffsets();

                return SP.Internal.DomElement.AdjustCoordsForIEZoom({
                    x: eventInfo.clientX + offsets.left,
                    y: eventInfo.clientY + offsets.top
                });
            },
            GetNextElement: function(domElem) {
                do {
                    var n = domElem.nextSibling;
                } while (n && n.nodeType != 1);
                return n;
            },
            GetPrevElement: function(domElem) {
                do {
                    var n = domElem.previousSibling;
                } while (n && n.nodeType != 1);
                return n;
            },
            GetFirstChildElement: function(domElem) {
                var n = domElem.firstChild;

                while (n && n.nodeType != 1) {
                    n = domElem.nextSibling;
                }
                return n;
            },
            AddMouseWheelHandler: function(domElem, fnOnScroll) {
                var wheelFn = function(eventInfo) {
                    OnMouseWheel(eventInfo, fnOnScroll);
                };

                if (domElem._mouseWheelFnInfo == null) {
                    domElem._mouseWheelFnInfo = [];
                }
                domElem._mouseWheelFnInfo.push({
                    usrFn: fnOnScroll,
                    wheelFn: wheelFn
                });
                $addHandler(domElem, 'mousewheel', wheelFn);
                $addHandler(domElem, 'DOMMouseScroll', wheelFn);
            },
            RemoveMouseWheelHandler: function(domElem, fnOnScroll) {
                var idx = SP.Internal.JS.FindInArray(domElem._mouseWheelFnInfo, function(obj) {
                    return obj.usrFn == fnOnScroll;
                });

                if (idx != null) {
                    $removeHandler(domElem, 'mousewheel', domElem._mouseWheelFnInfo[idx].wheelFn);
                    $removeHandler(domElem, 'DOMMouseScroll', domElem._mouseWheelFnInfo[idx].wheelFn);
                    if (domElem._mouseWheelFnInfo.length == 1) {
                        domElem._mouseWheelFnInfo = null;
                    }
                    else {
                        domElem._mouseWheelFnInfo.splice(idx, 1);
                    }
                }
            },
            GetCustomAttribute: function(obj, attribute) {
                var attrib = obj.getAttribute != null ? obj.getAttribute(attribute) : null;

                return attrib == null || attrib == '' ? obj[attribute] : attrib;
            },
            GetParentElement: function(domElem) {
                var p = domElem.parentNode;

                return p && p.nodeType != 1 ? null : p;
            },
            SetOpacity: function(domObj, val) {
                domObj.style.opacity = val;
                domObj.style['-moz-opacity'] = val;
                domObj.style.filter = 'alpha(opacity=' + val * 100 + ')';
            },
            RemoveOpacity: function(domObj) {
                domObj.style.opacity = '';
                domObj.style['-moz-opacity'] = 1.0;
                domObj.style.filter = '';
            },
            ForEachElementChild: function(elem, fn, bExcludeSelf) {
                if (!bExcludeSelf) {
                    fn(elem);
                }
                for (var i = 0; i < elem.childNodes.length; i++) {
                    SP.Internal.DomElement.ForEachElementChild(elem.childNodes[i], fn, false);
                }
            },
            FindAncestorWithProperty: function(elem, propName, child) {
                return elem == null ? null : this.GetCustomAttribute(elem, propName) !== undefined ? {
                    elem: elem,
                    child: child
                } : SP.Internal.DomElement.FindAncestorWithProperty(elem.parentNode, propName, elem);
            },
            FindFirstAncestorWithAnyPropertyValue: function(elem, propName, propValues, child) {
                return elem == null ? null : this.GetCustomAttribute(elem, propName) in propValues ? {
                    elem: elem,
                    child: child
                } : SP.Internal.DomElement.FindFirstAncestorWithAnyPropertyValue(elem.parentNode, propName, propValues, elem);
            },
            GetChildrenWithCustomAttribute: function(parent, attribName) {
                var r = {};
                var _this = this;

                _this.ForEachElementChild(parent, function(elem) {
                    var attrib = _this.GetCustomAttribute(elem, attribName);

                    if (attrib != null) {
                        r[attrib] = elem;
                    }
                });
                return r;
            },
            FindChildrenWithProperty: function(elem, propName) {
                var r = [];
                var _this = this;

                function FindChildrenWithPropsInternal(iElem) {
                    for (var i = 0; i < iElem.childNodes.length; i++) {
                        var curElem = iElem.childNodes[i];

                        if (_this.GetCustomAttribute(curElem, propName) != null) {
                            r.push(curElem);
                        }
                        FindChildrenWithPropsInternal(curElem, propName);
                    }
                }
                FindChildrenWithPropsInternal(elem);
                return r;
            },
            ComputeMaximumSizeForWebPart: function(parentNode, bNotAllowedToChangeLayout) {
                var r = {};
                var blueSPBorder = $get('MSO_ContentTable');

                Sys.Debug.assert(blueSPBorder != null, "The function 'ComputeMaximumSizeForWebPart' may only be called on a sharepoint web part page");
                var parentLoc = SP.Internal.DomElement.GetLocation(parentNode);
                var areaLoc = SP.Internal.DomElement.GetLocation(blueSPBorder);

                if (!bNotAllowedToChangeLayout)
                    parentNode.style.display = 'none';
                var offset = parentLoc.y - areaLoc.y;

                r.height = blueSPBorder.offsetHeight - offset;
                offset = parentLoc.x - areaLoc.x;
                r.width = blueSPBorder.offsetWidth - offset;
                if (!bNotAllowedToChangeLayout)
                    parentNode.style.display = 'block';
                return r;
            },
            SetMouseHover: function(elem, fnOnMouseIn, fnOnMouseOut, fnOnMouseMove) {
                $addHandler(elem, 'mousemove', HandleMouseMove);
                $addHandler(elem, 'mouseout', HandleMouseOut);
                var _bMouseOut = true;
                var _bMouseAboutToBeOut = false;

                function HandleMouseOut() {
                    _bMouseAboutToBeOut = true;
                    setTimeout(ProcessMouseOut, 0);
                }
                function HandleMouseMove(eventInfo) {
                    if (_bMouseOut && fnOnMouseIn != null) {
                        fnOnMouseIn();
                    }
                    if (fnOnMouseMove != null) {
                        fnOnMouseMove(eventInfo);
                    }
                    _bMouseOut = (_bMouseAboutToBeOut = false);
                }
                function ProcessMouseOut() {
                    if (!_bMouseOut && _bMouseAboutToBeOut) {
                        if (fnOnMouseOut != null) {
                            fnOnMouseOut();
                        }
                        _bMouseOut = true;
                        _bMouseAboutToBeOut = false;
                    }
                }
                return function() {
                    $removeHandler(elem, 'mouseout', HandleMouseOut);
                    $removeHandler(elem, 'mousemove', HandleMouseMove);
                    HandleMouseOut = null;
                    HandleMouseMove = null;
                    ProcessMouseOut = null;
                    elem = null;
                };
            },
            DashNameFromCamelName: function(camelName) {
                return camelName.replace(/[A-Z]/g, function(match) {
                    return '-' + match.toLowerCase();
                });
            },
            CamelNameFromDashName: function(dashName) {
                return dashName.replace(/-(\w)/g, function(match, charMatch) {
                    return charMatch.toUpperCase();
                });
            },
            GetXmlDomObj: function(optXmlText) {
                var xmlDoc;

                if (document.implementation && document.implementation.createDocument) {
                    xmlDoc = document.implementation.createDocument('', '', null);
                }
                else
                    try {
                        var el = document.createElement('xml');

                        document.body.appendChild(el);
                        xmlDoc = el.XMLDocument;
                        document.body.removeChild(el);
                    }
                    catch (e) {
                        xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                        xmlDoc.setProperty("ProhibitDTD", true);
                    }
                if (optXmlText != null) {
                    if ('loadXML' in xmlDoc) {
                        xmlDoc.async = false;
                        xmlDoc.loadXML(optXmlText);
                    }
                    else {
                        parser = new DOMParser();
                        xmlDoc = parser.parseFromString(optXmlText, "text/xml");
                    }
                }
                return xmlDoc;
            },
            BrowserIsIE: Sys.Browser.agent == Sys.Browser.InternetExplorer,
            BrowserIsIEAndRenderingModeIs7: Sys.Browser.agent == Sys.Browser.InternetExplorer && (document.documentMode == null || document.documentMode == 7),
            BrowserCanRenderVml: Sys.Browser.agent == Sys.Browser.InternetExplorer && (document.documentMode == null || document.documentMode < 9),
            SetTextNoBR: function(domObj, newVal) {
                domObj.innerHTML = '';
                domObj.appendChild(document.createTextNode(newVal));
            }
        };
        var functionsRequiringInit = [{
            name: 'SetText',
            selector: function() {
                return document.body.innerText != null ? function(domObj, newVal) {
                    domObj.innerText = newVal;
                } : function(domObj, newVal) {
                    domObj.textContent = newVal;
                };
            }
        }, {
            name: 'SetCapture',
            selector: function() {
                return Sys.Browser.agent == Sys.Browser.InternetExplorer && Sys.Browser.version < 9 ? SetCaptureForIE : SetCaptureForNonIE;
            }
        }, {
            name: 'GetScreenOffsets',
            selector: function() {
                return 'pageYOffset' in window ? function() {
                    return {
                        top: window.pageYOffset,
                        left: window.pageXOffset
                    };
                } : function() {
                    return {
                        top: document.documentElement.scrollTop,
                        left: document.documentElement.scrollLeft
                    };
                };
            }
        }, {
            name: 'GetXmlHttpObj',
            selector: function() {
                return window.XMLHttpRequest ? function() {
                    return new XMLHttpRequest();
                } : function() {
                    return new ActiveXObject("Microsoft.XMLHTTP");
                };
            }
        }, {
            name: 'GetComputedStyle',
            selector: function() {
                return document.defaultView != null && document.defaultView.getComputedStyle != null ? function(domObj, camelStyleName, dashStyleName) {
                    return (document.defaultView.getComputedStyle(domObj, null)).getPropertyValue(dashStyleName);
                } : function(domObj, camelStyleName, dashStyleName) {
                    if (camelStyleName == 'width') {
                        return String(domObj.offsetWidth) + "px";
                    }
                    return domObj.currentStyle[camelStyleName];
                };
            }
        }, {
            name: 'AdjustCoordsForIEZoom',
            selector: function() {
                if (r.BrowserIsIE) {
                    CacheIEZoomFactor();
                    $addHandler(window, 'resize', CacheIEZoomFactor);
                }
                return function(point) {
                    return {
                        x: Math.round(point.x / _zoomFactor),
                        y: Math.round(point.y / _zoomFactor)
                    };
                };
            }
        }, {
            name: 'GetOuterHTML',
            selector: function() {
                return document.body.outerHTML != null ? function(domObj) {
                    return domObj.outerHTML;
                } : function(domObj) {
                    var oDoc = domObj.ownerDocument;
                    var oClone = domObj.cloneNode(true);
                    var oTemp = oDoc.createElement("div");

                    oDoc.documentElement.appendChild(oTemp);
                    oTemp.appendChild(oClone);
                    var sHTML = oTemp.innerHTML;

                    oDoc.documentElement.removeChild(oTemp);
                    return sHTML;
                };
            }
        }];

        for (var i = 0; i < functionsRequiringInit.length; i++) {
            MakeStub(functionsRequiringInit[i]);
        }
        return r;
        function MakeStub(fnInfo) {
            r[fnInfo.name] = function() {
                r[fnInfo.name] = fnInfo.selector();
                return r[fnInfo.name].apply(r, arguments);
            };
        }
    })();
    SP.GetSingleStopBreakpoint = function() {
        var counter;

        return function(initCount) {
            if (counter == null) {
                counter = initCount != null ? initCount : 1;
            }
            if (counter == 1) {
                debugger;
            }
            if (counter > 0) {
                --counter;
            }
        };
    };
    bpt = SP.GetSingleStopBreakpoint();
    SP.Internal.Timer = function() {
        this.Reset();
    };
    SP.Internal.Timer.prototype = {
        ElapsedMs: function() {
            return (new Date()).getTime() - this.start;
        },
        Reset: function() {
            this.start = (new Date()).getTime();
        },
        toString: function(fmt) {
            var ms = this.ElapsedMs();
            var d = new Date(ms);
            var hrs = Math.floor(ms / 3600000);
            var mins = d.getUTCMinutes();
            var secs = d.getUTCSeconds() + d.getUTCMilliseconds() / 1000;

            if (fmt == 'M') {
                mins += hrs * 60;
                hrs = 0;
            }
            else if (fmt == 'S') {
                secs += (hrs * 60 + mins) * 60;
                hrs = (mins = 0);
            }
            var r = [];

            if (hrs) {
                r.push(hrs);
            }
            if (hrs + mins) {
                r.push((mins < 10 ? '0' : '') + mins);
            }
            r.push((secs < 10 ? '0' : '') + secs.toFixed(3));
            return r.join(':');
        }
    };
    SP.Internal.CallAsyncFn = function(fnAsyncOp, fnAsyncOpComplete, fnPreIfAsync, fnPostIfAsync) {
        if (fnAsyncOp(function() {
            if (fnAsyncOpComplete != null) {
                fnAsyncOpComplete();
            }
            if (fnPostIfAsync != null) {
                fnPostIfAsync();
            }
        })) {
            fnAsyncOpComplete();
        }
        else if (fnPreIfAsync != null) {
            fnPreIfAsync();
        }
    };
    SP.ElementCover = function(elementToCover, childElems, optId) {
        var transparentDiv, opaqueDiv, opaqueContainerDiv, _this = this;

        this.Show = function() {
            $addHandler(elementToCover, 'resize', OnResize);
            elementToCover.appendChild(transparentDiv);
            elementToCover.appendChild(opaqueContainerDiv);
            this.RefreshLayout();
        };
        this.Hide = function() {
            $removeHandler(elementToCover, 'resize', OnResize);
            elementToCover.removeChild(transparentDiv);
            elementToCover.removeChild(opaqueContainerDiv);
        };
        this.Dispose = function() {
            transparentDiv = (opaqueDiv = (opaqueContainerDiv = null));
        };
        this.RefreshLayout = function() {
            opaqueContainerDiv.style.height = (transparentDiv.style.height = Math.max(0, elementToCover.offsetHeight - 2) + 'px');
            opaqueContainerDiv.style.width = (transparentDiv.style.width = Math.max(0, elementToCover.offsetWidth - 2) + 'px');
            opaqueDiv.style.left = Math.max((elementToCover.offsetWidth - opaqueDiv.offsetWidth) / 2, 50) + 'px';
            opaqueDiv.style.marginTop = (elementToCover.offsetHeight - opaqueDiv.offsetHeight) / 2 + 'px';
        };
        function OnResize(eventInfo) {
            _this.RefreshLayout();
        }
        function Init() {
            Sys.Debug.assert(elementToCover.tagName.toUpperCase() == 'DIV' && elementToCover.style.position.toUpperCase() == 'RELATIVE', "Banner can only cover relative positioned div elements!");
            transparentDiv = document.createElement('div');
            transparentDiv.style.cssText = 'z-index:5; position:absolute; top:0px; left:0px; background-color:#ffffff;border:1px solid #999999;';
            SP.Internal.DomElement.SetOpacity(transparentDiv, .85);
            if (optId != null) {
                transparentDiv.id = optId;
            }
            opaqueContainerDiv = document.createElement('div');
            opaqueContainerDiv.style.cssText = 'z-index:6; position:absolute; top:0px; left:0px; background-color:transparent;';
            opaqueDiv = document.createElement('div');
            opaqueDiv.style.cssText = 'position:absolute; vertical-align:middle; top:0px; left:0px; padding-left:20px; padding-right:20px; background-color:#ffffff; border:1px solid #EBEEF2; white-space:nowrap;';
            for (var i = 0; i < childElems.length; i++) {
                opaqueDiv.appendChild(childElems[i]);
            }
            opaqueContainerDiv.appendChild(opaqueDiv);
        }
        Init();
    };
    SP.LoadingBanner = function(elementToCover, optBannerId) {
        var imgTextContainer, textElem, imgElem, elemCover;

        this.Show = function(message) {
            if (message == null) {
                imgElem.alt = (imgElem.title = "");
                textElem.style.display = "none";
            }
            else {
                SP.Internal.DomElement.SetText(textElem, message);
                imgElem.alt = (imgElem.title = message);
                textElem.style.display = "";
            }
            elemCover.Show();
        };
        this.Hide = function() {
            elemCover.Hide();
        };
        this.UpdateText = function(message) {
            SP.Internal.DomElement.SetText(textElem, message);
            elemCover.RefreshLayout();
        };
        this.Dispose = function() {
            elemCover.Dispose();
            textElem = (imgElem = (elementToCover = null));
        };
        function Init() {
            imgElem = document.createElement('img');
            imgElem.src = SP.JsGrid.ImagesDirectory + 'progress-circle-24.gif';
            imgElem.style.cssText = 'vertical-align:middle;margin:30px 10px 30px 10px';
            textElem = document.createElement('span');
            textElem.style.cssText = 'vertical-align:middle; margin:30px 10px 30px 10px; color:black; text-align:center; white-space:nowrap; overflow:hidden';
            elemCover = new SP.ElementCover(elementToCover, [imgElem, textElem], optBannerId);
        }
        Init();
    };
    SP.ErrorBanner = function(elementToCover, optBannerId) {
        var textElem, elemCover;

        this.Show = function(message) {
            SP.Internal.DomElement.SetText(textElem, message);
            elemCover.Show();
        };
        this.Hide = function() {
            elemCover.Hide();
        };
        this.UpdateText = function(message) {
            SP.Internal.DomElement.SetText(textElem, message);
            elemCover.RefreshLayout();
        };
        this.Dispose = function() {
            elemCover.Dispose();
            textElem = (elementToCover = null);
        };
        function Init() {
            var tbl = document.createElement('table');

            textElem = (tbl.insertRow(-1)).insertCell(-1);
            textElem.style.cssText = 'align:middle; vertical-align:middle; color:#AA0000;text-align:center; padding:20px;';
            elemCover = new SP.ElementCover(elementToCover, [tbl], optBannerId);
        }
        Init();
    };
    SP.Internal.Key = {
        shift: 16,
        insert: 45,
        six: 54,
        numpad_plus: 107,
        numpad_minus: 109,
        F2: 113,
        F6: 117,
        plus: Sys.Browser.agent == Sys.Browser.InternetExplorer ? 187 : 61,
        comma: 188,
        minus: Sys.Browser.agent == Sys.Browser.InternetExplorer ? 189 : 109,
        dot: 190,
        back_slash: 220,
        IMEInput: 229
    };
    SP.JsGrid.Utility = {
        IsChar: function(eventInfo) {
            return eventInfo.type == 'keypress' && (eventInfo.rawEvent.which == null || eventInfo.rawEvent.which > 0 && eventInfo.rawEvent.charCode > 0);
        },
        FocusElementInDOMCollection: function(domElementsCollection, focusedDomElement, bNext) {
            var focusableElements = [];

            function IsFocusable(elem) {
                var elemIsFocusable;

                if (elem.hasAttribute != null) {
                    elemIsFocusable = elem.hasAttribute('tabIndex') && elem.getAttribute('tabIndex') == -1;
                }
                else {
                    elemIsFocusable = elem.tabIndex != null && elem.tabIndex == -1;
                }
                return elemIsFocusable;
            }
            function GetFocusableElements(domElementsCollection) {
                for (var i = 0; i < domElementsCollection.length; i++) {
                    var elem = domElementsCollection[i];

                    if (IsFocusable(elem)) {
                        focusableElements.push(elem);
                    }
                    GetFocusableElements(elem.childNodes);
                }
            }
            function FocusElement() {
                if (focusableElements.length == 0)
                    return null;
                var result;

                if (focusedDomElement == null) {
                    result = focusableElements[0];
                }
                else {
                    for (var i = 0; i < focusableElements.length; i++) {
                        if (focusableElements[i] != focusedDomElement)
                            continue;
                        result = bNext ? i == focusableElements.length - 1 ? focusableElements[0] : focusableElements[i + 1] : i == 0 ? focusableElements[focusableElements.length - 1] : focusableElements[i - 1];
                        break;
                    }
                }
                if (result != null) {
                    try {
                        result.focus();
                    }
                    catch (e) {
                        Sys.Debug.assert(false, "Incorrectly trying to focus the element. Is it hidden?");
                    }
                }
                return result;
            }
            GetFocusableElements(domElementsCollection);
            return FocusElement();
        },
        CloneObj: function(obj, bDeep) {
            return SP.Internal.JS.CloneObj(obj, bDeep);
        },
        GetDocumentDirection: function() {
            return document.documentElement.getAttribute('dir');
        },
        GetIMNMarkerId: function(gridId, recordKey, fieldKey, sipAddress) {
            if (window.g_jsGridPresenceImageCounter == null) {
                window.g_jsGridPresenceImageCounter = 0;
            }
            if (window.g_jsGridPresenceImageCache == null) {
                window.g_jsGridPresenceImageCache = {};
            }
            var key = String.format("{0}_{1}_{2}_{3}", gridId, recordKey, fieldKey, sipAddress);
            var r = g_jsGridPresenceImageCache[key];

            if (r == null) {
                r = (g_jsGridPresenceImageCache[key] = String.format("{0}_imn_{1}", gridId, g_jsGridPresenceImageCounter++));
            }
            return r;
        },
        HTMLDecode: function(str) {
            return STSHtmlDecode(str);
        },
        HTMLEncode: function(str) {
            return STSHtmlEncode(str);
        }
    };
    SP.JsGrid.ChangeKeyOnCompleteMap = function() {
        var _changeKeys = new Array();

        return {
            GetList: function() {
                return _changeKeys;
            },
            AddMapping: function(id, fn) {
                var obj = {
                    id: id,
                    fn: fn
                };

                _changeKeys.splice(SP.Internal.JS.LowerBound(_changeKeys, id, 'id'), 0, obj);
            },
            RemoveMapping: function(id) {
                var pos = SP.Internal.JS.BinarySearch(_changeKeys, id, 'id');

                if (pos != null) {
                    _changeKeys.splice(pos, 1);
                }
                return pos != null;
            },
            CallFunctions: function(id, success, result) {
                for (var i = 0; i < _changeKeys.length; i++) {
                    if (_changeKeys[i].id <= id) {
                        if (_changeKeys[i].fn != null) {
                            _changeKeys[i].fn(success, result);
                        }
                        this.RemoveMapping(_changeKeys[i].id);
                    }
                    else {
                        break;
                    }
                }
            }
        };
    };
    SP.JsGrid.Internal.HeaderManager = function(objBag, styleMgr, fnGetLocStr, fnUpdatePositionedElements) {
        var borderMap = {
            menu: objBag.RTL.Left,
            resize: objBag.RTL.Right,
            eyeBrow: 'Bottom'
        };
        var ElementState = {
            Normal: 1,
            Hover: 2,
            Clicked: 3
        };
        var _headerChildObjects = {};
        var _partsEnabled = {};
        var _initalColorMap = {};
        var _styles = {};
        var _lockedElements = {};
        var _sortStates = {};
        var _filterStates = {};
        var _activeColumn = null;
        var _this = this;
        var _curHighlightedElem;
        var _curActingColumnInfo;
        var _fnGetHeaderSibling;
        var _coreContentWidthMeasuringElement;
        var _coreContentBaseCssText;
        var _dropDownMenuVisible = false;
        var _currentEditColumnKey = null;
        var constMenuWidth = 15;
        var constCoreContentPadding = objBag.spGrid ? 0 : 2;

        this.constEyeBrowHeight = 5;
        this.constResizeWidth = 5;
        CreateCoreContentMeasuringElement();
        function UpdateWidths(th, divs, totalWidth) {
            if (objBag.spGrid)
                return;
            th.style.width = (divs.move.style.width = totalWidth - 1 + 'px');
            divs.eyeBrow.style.width = totalWidth - 1 + 'px';
            var contentWidth = totalWidth - _this.constResizeWidth - _this.constResizeWidth;

            divs.content.style.width = contentWidth + 'px';
            if (divs.sort != null) {
                divs.sort.style[objBag.RTL.left] = Math.round((contentWidth - 6) / 2) + 'px';
            }
            divs.coreContent.style.width = contentWidth - constCoreContentPadding + 'px';
        }
        function IncrementItemWidth(item, n) {
            if (objBag.spGrid)
                return;
            var width = parseInt(SP.Internal.DomElement.GetComputedStyle(item, 'width', 'width'));

            Sys.Debug.assert(!isNaN(width));
            if (!isNaN(width)) {
                item.style.width = width + n + 'px';
            }
        }
        function AdjustColumnWidthToShowRightSection(divs) {
            IncrementItemWidth(divs.content, -constMenuWidth);
            IncrementItemWidth(divs.coreContent, -constMenuWidth);
        }
        function AdjustColumnWidthToHideRightSection(divs) {
            IncrementItemWidth(divs.content, constMenuWidth);
            IncrementItemWidth(divs.coreContent, constMenuWidth);
        }
        function CreateCoreContentMeasuringElement() {
            var defaultHeaderStyle = styleMgr.columnHeaderStyleCollection.normal;
            var fontFamily = defaultHeaderStyle.font != null ? 'font-family:' + defaultHeaderStyle.font + ';' : '';

            _coreContentBaseCssText = String.format('text-align:{0};padding-{0}:{1}px;{2}font-size:{3};font-weight:{4};', objBag.RTL.left, constCoreContentPadding, fontFamily, defaultHeaderStyle.fontSize, defaultHeaderStyle.fontWeight);
            var tableElem = document.createElement('table');

            tableElem.style.cssText = 'position:absolute;visibility:hidden;top:0px;left:0px;width:0px;height:0px;';
            tableElem.insertRow(-1);
            var th = document.createElement('th');

            tableElem.rows[0].appendChild(th);
            _coreContentWidthMeasuringElement = document.createElement('div');
            _coreContentWidthMeasuringElement.className = 'jsgrid-header-core-content';
            _coreContentWidthMeasuringElement.style.cssText = _coreContentBaseCssText;
            th.appendChild(_coreContentWidthMeasuringElement);
            objBag.parentNode.appendChild(tableElem);
        }
        function CalculateChildObjects(th) {
            var r = SP.Internal.DomElement.GetChildrenWithCustomAttribute(th, 'colid');

            r.th = th;
            return r;
        }
        this.CreateTableHeaderCell = function(column, th, headerHeight, bMovableColumns, bResizableColumns, bSortableColumns, bColumnSelectionEnabled, fnOnColumnMenuClick, fnGetHeaderSibling) {
            var bCanMoveThisCol = bMovableColumns && !column.bOpenMenuOnContentClick && !column.isFooter;
            var headerCursor = bCanMoveThisCol ? 'move' : 'default';
            var bCanSortThisCol = bSortableColumns && column.isSortable;
            var bCanResizeThisCol = bResizableColumns && column.isResizable;
            var defaultHeaderStyle = styleMgr.columnHeaderStyleCollection.normal;
            var bOpenMenuOnContentClick = column.bOpenMenuOnContentClick;
            var bIconOnlyMenu = column.imgSrc != null && bOpenMenuOnContentClick;
            var html = [];

            if (!objBag.spGrid) {
                html.push('<div colid="eyeBrow" class="jsgrid-header-eyebrow" colAction="select" style="border-bottom:1px solid transparent;"></div>');
            }
            html.push('<div colid="move" ' + (bCanMoveThisCol ? 'colAction="move"' : '') + ' style="white-space:nowrap;" class="ms-positionRelative">');
            html.push('<div colid="resize" ');
            if (!objBag.spGrid)
                html.push('class="jsgrid-header-expand" ');
            html.push('style="float:');
            html.push(objBag.RTL.left + ';');
            if (objBag.spGrid)
                html.push('position:absolute;');
            html.push('"></div>');
            html.push('<div colid="content" ');
            if (!objBag.spGrid)
                html.push('class="jsgrid-header-content" ');
            else if (!bIconOnlyMenu)
                html.push('class="ms-spGrid-HeaderContentStyle" ');
            html.push('style="float:' + objBag.RTL.left + ';text-align:left;cursor:' + headerCursor + ';"><div colid="coreContent" coltype="text" ');
            if (!objBag.spGrid)
                html.push('class="jsgrid-header-core-content" ');
            html.push('style="' + _coreContentBaseCssText + 'cursor:' + headerCursor + ';" unselectable="true">');
            if (bCanSortThisCol) {
                html.push('<a colid="sortA" style="cursor:pointer" colAction="sort"><img colid="sortImg" style="padding-' + objBag.RTL.left + ':3px;" src="' + SP.JsGrid.ImagesDirectory + 'sort.gif"/></a>');
            }
            html.push('<div colid="filterState" class="jsgrid-header-filter-state" style="width:14px;border-' + objBag.RTL.left + ':1px solid transparent;">');
            if (objBag.spGrid) {
                html.push('<span class="ms-filter-iconouter" ><img class="ms-filter-icon" src="' + GetThemedImageUrl("spcommon.png") + '" title="' + SP.JsGrid.Res.filterIndicator + '" /></span>');
            }
            else {
                html.push('<div style="padding-' + objBag.RTL.left + ':3px;"><div colid="filterStateImg" class="clip11x11" >');
                html.push('<img class="jsgridcluster_jsgrid-header-filter-icon"  src="' + SP.JsGrid.ImagesDirectory + 'jsgridcluster.png" title="' + SP.JsGrid.Res.filterIndicator + '"/>');
                html.push('</div></div>');
            }
            html.push('</div>');
            html.push('</div></div>');
            if (fnOnColumnMenuClick != null) {
                _dropDownMenuVisible = true;
                html.push('<div colid="menu" class="');
                if (objBag.spGrid)
                    html.push('s4-ctx s4-ctx-grid');
                else
                    html.push('jsgrid-header-menu');
                html.push('" colAction="menu" style="');
                if (!objBag.spGrid) {
                    html.push('float:' + objBag.RTL.left + ';');
                }
                if (objBag.spGrid) {
                    html.push('width:7px;border-' + objBag.RTL.left + ':1px solid transparent; position:absolute; visibility: hidden;"><div style="padding-' + objBag.RTL.left + ':0px;"><div colid="menuImg" class="clip9x6" ');
                }
                else {
                    html.push('width:14px;border-' + objBag.RTL.left + ':1px solid transparent;"><div style="padding-' + objBag.RTL.left + ':4px;"><div colid="menuImg" class="clip9x6" ');
                }
                if (objBag.spGrid) {
                    html.push('style="visibility:hidden;" ');
                }
                html.push('><img class="jsgridcluster_jsgrid-down-arrow"  src="' + SP.JsGrid.ImagesDirectory + 'jsgridcluster.png" alt="' + SP.JsGrid.Res.openMenu + '" title="' + SP.JsGrid.Res.openMenu + '"/></div></div></div>');
            }
            html.push('<div colid="resizeRight" ');
            if (!objBag.spGrid)
                html.push('class="jsgrid-header-expand" ');
            html.push((bCanResizeThisCol ? 'colAction="resize-current"' : '') + 'style="float:');
            if (objBag.spGrid)
                html.push(objBag.RTL.right);
            else
                html.push(objBag.RTL.left);
            html.push(';cursor:' + (bCanResizeThisCol ? 'w-resize' : 'default') + ';"></div>');
            html.push('</div>');
            th.innerHTML = html.join('');
            var columnKey = column.columnKey;
            var divs = _headerChildObjects[columnKey] = CalculateChildObjects(th);

            _partsEnabled[columnKey] = {
                selection: bColumnSelectionEnabled,
                move: bCanMoveThisCol,
                resize: bCanResizeThisCol
            };
            if (bCanSortThisCol) {
                SetColumnSortState(columnKey, _sortStates[columnKey]);
            }
            if (fnOnColumnMenuClick != null) {
                $addHandler(divs.menu, 'click', function(ev) {
                    fnOnColumnMenuClick(ev, columnKey);
                });
                if (divs != null & divs.sortA != null && objBag != null && objBag.paneMgr != null) {
                    RegisterHeaderSortAnchorTouchOverride(divs.sortA, objBag.paneMgr.GetPane(), columnKey);
                }
                if (bOpenMenuOnContentClick || objBag.spGrid) {
                    $addHandler(th, 'click', function(ev) {
                        var targetElem = GetEventSrcElement(ev);

                        if (targetElem == null || targetElem.getAttribute("colAction") != null)
                            return;
                        var colid = targetElem.getAttribute("colid");

                        if (colid == "resize" || colid == "resizeRight")
                            return;
                        fnOnColumnMenuClick(ev, columnKey);
                    });
                    RegisterHeaderThTouchOverride(th, objBag.paneMgr.GetPane(), columnKey);
                }
            }
            if (bIconOnlyMenu) {
                divs.menuImg.style.display = "none";
                divs.menu.style.visibility = "hidden";
            }
            if (column.imgSrc != null) {
                divs.coreContent.colType = 'image';
                divs.coreContent.style.cursor = headerCursor;
                divs.coreContent.className = 'jsgrid-header-core-img-content';
                if (Boolean(column.imgRawSrc)) {
                    divs.coreContent.innerHTML = column.imgRawSrc + divs.coreContent.innerHTML;
                }
                else
                    divs.coreContent.innerHTML = '<img style="border:0px; padding-top:2px" src="' + column.imgSrc + '"/>' + divs.coreContent.innerHTML;
            }
            else if (column.name != null) {
                var textNode = document.createTextNode(column.name);

                if (divs.sortA != null)
                    divs.sortA.insertBefore(textNode, divs.sortA.firstChild);
                else
                    divs.coreContent.insertBefore(textNode, divs.coreContent.firstChild);
            }
            if (column.name != null) {
                th.title = column.name;
            }
            _fnGetHeaderSibling = fnGetHeaderSibling;
            _this.UpdateHeaderHeights(headerHeight);
            Sys.Debug.assert(column.width != null && column.width >= SP.JsGrid.Internal.MinColumnWidth, "Column width should have been adjusted via headerMgr.AdjustColumnWidth(column)!");
            UpdateWidths(th, divs, column.width);
            th.thColumnKey = columnKey;
            if (objBag.spGrid) {
                if (column.imgSrc)
                    th.className = "ms-vh-icon";
                th.nowrap = "nowrap";
            }
            if (_activeColumn != null && _activeColumn.thColumnKey == columnKey) {
                _activeColumn = null;
            }
            th = (divs = null);
            if (columnKey in _filterStates) {
                SetColumnFilteredDisplay(columnKey);
            }
            return th;
        };
        function RegisterHeaderSortAnchorTouchOverride(sortA, gridPane, columnKey) {
            if (sortA != null && gridPane != null) {
                EnsureScriptParams('core.js', 'RegisterTouchOverride', sortA, function(ev) {
                    var paneConverter = gridPane.GetGridPaneConverter();
                    var columnIdx = paneConverter.ColKeyToColIdx(columnKey);

                    gridPane.ExpandColumnMenu(columnIdx);
                    return true;
                });
            }
        }
        function RegisterHeaderThTouchOverride(th, gridPane, columnKey) {
            if (th != null && gridPane != null) {
                EnsureScriptParams('core.js', 'RegisterTouchOverride', th, function(ev) {
                    var targetElem = GetEventSrcElement(ev);

                    if (targetElem == null || targetElem.getAttribute("colAction") != null)
                        return false;
                    var paneConverter = gridPane.GetGridPaneConverter();
                    var columnIdx = paneConverter.ColKeyToColIdx(columnKey);

                    return gridPane.ExpandColumnMenu(columnIdx);
                });
            }
        }
        function UpdateHeader(th, prevTh) {
            var resize = _headerChildObjects[th.thColumnKey].resize;

            if (prevTh != null && _partsEnabled[prevTh.thColumnKey].resize) {
                resize.colAction = 'resize';
                resize.style.cursor = 'w-resize';
            }
            else if (_partsEnabled[th.thColumnKey].move) {
                resize.colAction = 'move';
                resize.style.cursor = 'move';
            }
            else {
                resize.colAction = null;
                resize.style.cursor = 'default';
            }
        }
        this.NotifyColumnHeaderOrderSet = function(firstTh) {
            var curTh = firstTh;
            var prevTh = null;

            while (curTh != null) {
                UpdateHeader(curTh, prevTh);
                prevTh = curTh;
                curTh = _fnGetHeaderSibling(curTh, false);
            }
        };
        this.DisposeHeader = function(th) {
            if (_curHighlightedElem != null && _curHighlightedElem.columnKey == th.thColumnKey) {
                _curHighlightedElem = null;
            }
            if (_curActingColumnInfo != null && _curActingColumnInfo.key == th.thColumnKey) {
                _curActingColumnInfo = null;
            }
            var menuElem = _headerChildObjects[th.thColumnKey] && _headerChildObjects[th.thColumnKey].menu;

            if (menuElem != null) {
                $clearHandlers(menuElem);
            }
            delete _headerChildObjects[th.thColumnKey];
            delete _styles[th.thColumnKey];
            delete _initalColorMap[th.thColumnKey];
            delete _partsEnabled[th.thColumnKey];
            delete _lockedElements[th.thColumnKey];
            th.thColumnKey = null;
        };
        this.Dispose = function() {
            var ths = [];

            for (var idx in _headerChildObjects) {
                ths.push(_headerChildObjects[idx].th);
            }
            for (var i = ths.length - 1; i >= 0; i--) {
                delete _sortStates[ths[i].thColumnKey];
                this.DisposeHeader(ths[i]);
            }
            _activeColumn = (_headerChildObjects = (_curActingColumnInfo = (_curHighlightedElem = (_lockedElements = (_partsEnabled = (_sortStates = (_this = null)))))));
        };
        this.ApplyHeaderStyle = function(th, style, bActive) {
            var divs = _headerChildObjects[th.thColumnKey];

            if (_curActingColumnInfo != null && _curActingColumnInfo.key == th.thColumnKey) {
                _curActingColumnInfo.curStyle = style;
                return;
            }
            if (th.headerStyleType != style.type) {
                _initalColorMap[th.thColumnKey] = {};
                th.style['border' + objBag.RTL.Right] = SP.JsGrid.Style.MakeBorderString(1, 'solid ', style.innerBorderColor);
                if (divs != null) {
                    if (style.font != null) {
                        divs.coreContent.style.fontFamily = style.font;
                    }
                    divs.coreContent.style.fontSize = style.fontSize;
                    divs.coreContent.style.fontWeight = style.fontWeight;
                    divs.coreContent.style.color = style.textColor;
                    if (divs.sortA != null && divs.sortA.style != null) {
                        divs.sortA.style.color = style.textColor;
                    }
                    th.style.backgroundColor = (divs.resize.style.backgroundColor = style.backgroundColor);
                    divs.resize.style['border' + objBag.RTL.Right] = SP.JsGrid.Style.MakeBorderString(1, 'solid ', style.backgroundColor);
                }
                if (divs != null && divs.eyeBrow != null) {
                    _initalColorMap[th.thColumnKey].eyeBrow = {};
                    _initalColorMap[th.thColumnKey].eyeBrow.bg = (divs.eyeBrow.style.backgroundColor = style.eyeBrowColor);
                    _initalColorMap[th.thColumnKey].eyeBrow.border = (divs.eyeBrow.style['border' + borderMap.eyeBrow + 'Color'] = style.eyeBrowBorderColor);
                }
                else {
                    delete _initalColorMap[th.thColumnKey].eyeBrow;
                    if (style.innerBorderColor != null)
                        th.style.borderTop = SP.JsGrid.Style.MakeBorderString(1, 'solid ', style.innerBorderColor);
                }
                th.style.borderBottom = SP.JsGrid.Style.MakeBorderString(1, 'solid ', style.outerBorderColor);
                _initalColorMap[th.thColumnKey].move = (th.style.backgroundColor = style.backgroundColor);
                if (divs != null && divs.menu != null) {
                    _initalColorMap[th.thColumnKey].menu = {};
                    _initalColorMap[th.thColumnKey].menu.bg = (divs.menu.style.backgroundColor = style.menuColor);
                    if (style.menuBorderColor != null) {
                        _initalColorMap[th.thColumnKey].menu.border = (divs.menu.style['borderColor'] = style.menuBorderColor);
                    }
                }
                else {
                    delete _initalColorMap[th.thColumnKey].menu;
                }
                if (divs != null) {
                    divs.resizeRight.style.backgroundColor = divs.menu != null && divs.menu.style.display == 'inline-block' ? style.menuColor : style.backgroundColor;
                }
                _styles[th.thColumnKey] = style;
            }
            th.headerStyleType = style.type;
            th.headerStyleBorderString = SP.JsGrid.Style.MakeBorderString(1, 'solid', style.outerBorderColor);
            th.headerStyleInnerBorderString = SP.JsGrid.Style.MakeBorderString(1, 'solid', style.innerBorderColor);
            var previousSibling = _fnGetHeaderSibling(th, true);

            if (previousSibling != null) {
                if (style.innerBorderColor != null)
                    previousSibling.style['border' + objBag.RTL.Right] = (FindObjectWithOverridingStyle(previousSibling, th)).headerStyleInnerBorderString;
                else
                    previousSibling.style['border' + objBag.RTL.Right] = (FindObjectWithOverridingStyle(previousSibling, th)).headerStyleBorderString;
            }
            if (_partsEnabled[th.thColumnKey] != null && _partsEnabled[th.thColumnKey].resize != null) {
                var nextSibling = _fnGetHeaderSibling(th, false);

                if (nextSibling != null && _headerChildObjects[nextSibling.thColumnKey] != null && _initalColorMap[nextSibling.thColumnKey] != null) {
                    if (style.innerBorderColor != null)
                        th.style['border' + objBag.RTL.Right] = (FindObjectWithOverridingStyle(nextSibling, th)).headerStyleInnerBorderString;
                    else
                        th.style['border' + objBag.RTL.Right] = (FindObjectWithOverridingStyle(nextSibling, th)).headerStyleBorderString;
                    var resize = _headerChildObjects[nextSibling.thColumnKey].resize;

                    if (!bActive) {
                        _initalColorMap[nextSibling.thColumnKey].resize = {};
                        _initalColorMap[nextSibling.thColumnKey].resize = (resize.style.backgroundColor = (resize.style['border' + borderMap.resize + 'Color'] = _styles[nextSibling.thColumnKey].backgroundColor));
                    }
                    else {
                        _initalColorMap[nextSibling.thColumnKey].resize = {};
                        _initalColorMap[nextSibling.thColumnKey].resize.bg = (resize.style.backgroundColor = _styles[nextSibling.thColumnKey].resizeColor);
                        _initalColorMap[nextSibling.thColumnKey].resize.border = (resize.style['border' + borderMap.resize + 'Color'] = _styles[nextSibling.thColumnKey].resizeBorderColor);
                    }
                }
            }
            function FindObjectWithOverridingStyle(obj1, obj2) {
                Sys.Debug.assert(obj1.headerStyleType != null || obj2.headerStyleType != null);
                return obj1.headerStyleType == null ? obj2 : obj2.headerStyleType == null ? obj1 : obj1.headerStyleType > obj2.headerStyleType ? obj1 : obj2;
            }
        };
        this.GetColumnHeaderAutoResizeWidth = function(th) {
            var divs = _headerChildObjects[th.thColumnKey];

            if (divs.coreContent != null) {
                return th.offsetWidth + Math.max(divs.coreContent.scrollWidth - divs.coreContent.offsetWidth, 0);
            }
            return th.offsetWidth;
        };
        this.AdjustColumnWidth = function(column) {
            if (column.width == null || column.width <= 0) {
                column.width = SP.JsGrid.Internal.MinColumnWidth;
                if (column.name != null) {
                    SP.Internal.DomElement.SetText(_coreContentWidthMeasuringElement, column.name);
                    var menuWidthSpace = _dropDownMenuVisible ? constMenuWidth + 10 : 0;

                    column.width = _coreContentWidthMeasuringElement.scrollWidth + _this.constResizeWidth + _this.constResizeWidth + menuWidthSpace;
                }
            }
            column.width = Math.max(column.width, SP.JsGrid.Internal.MinColumnWidth);
        };
        this.ResizeColumn = function(th, newWidth) {
            var columnKey = th.thColumnKey;

            UpdateWidths(th, _headerChildObjects[columnKey], newWidth);
            objBag.bUpdateCoordCache = true;
        };
        this.ShowMenuOnColumn = function(th) {
            if (_activeColumn != th && th.thColumnKey != null) {
                var divs = _headerChildObjects[th.thColumnKey];

                if (divs.menu != null) {
                    if (!objBag.spGrid) {
                        this.HideMenuOnColumn();
                        if (th.thColumnKey in _filterStates) {
                            ClearColumnFilteredDisplay(th.thColumnKey);
                        }
                        divs.resizeRight.style.backgroundColor = _styles[th.thColumnKey].menuColor;
                        Sys.Debug.assert(SP.Internal.DomElement.GetComputedStyle(divs.menu, 'display', 'display') == 'none');
                        divs.menu.style.display = 'inline-block';
                    }
                    AdjustColumnWidthToShowRightSection(divs);
                    _activeColumn = th;
                }
            }
        };
        this.HideMenuOnColumn = function() {
            if (_activeColumn != null && _activeColumn.thColumnKey != null) {
                var colKey = _activeColumn.thColumnKey;
                var divs = _headerChildObjects[colKey];

                if (divs.menu != null) {
                    Sys.Debug.assert(!objBag.spGrid);
                    divs.resizeRight.style.backgroundColor = _styles[_activeColumn.thColumnKey].backgroundColor;
                    Sys.Debug.assert(SP.Internal.DomElement.GetComputedStyle(divs.menu, 'display', 'display') == 'inline-block' || SP.Internal.DomElement.GetComputedStyle(divs.menu, 'display', 'display') == 'block');
                    divs.menu.style.display = 'none';
                    AdjustColumnWidthToHideRightSection(divs);
                    _activeColumn = null;
                    if (colKey in _filterStates) {
                        SetColumnFilteredDisplay(colKey);
                    }
                }
            }
        };
        this.GetChildObjects = function(columnKey) {
            return _headerChildObjects[columnKey];
        };
        this.GetColumnHeaderElement = function(columnKey) {
            var headerElements = _headerChildObjects[columnKey];

            return headerElements != null ? headerElements.th : null;
        };
        this.GetColumnHeaderPosition = function(columnKey) {
            var headerElements = _headerChildObjects[columnKey];
            var headerTHElem = null;

            if (headerElements != null) {
                headerTHElem = headerElements.th;
            }
            if (headerTHElem == null) {
                return null;
            }
            var thPos = SP.Internal.DomElement.GetLocation(headerTHElem);

            return {
                left: thPos.x,
                width: headerTHElem.offsetWidth,
                top: thPos.y + (objBag.RTL.bEnabled ? 4 : 0),
                height: headerTHElem.offsetHeight
            };
        };
        this.GetColumnMenuElementPosition = function(columnKey) {
            var menuElem = _headerChildObjects[columnKey].menu;

            if (menuElem == null) {
                return null;
            }
            var resizeElem = _headerChildObjects[columnKey].resizeRight;
            var menuPos = SP.Internal.DomElement.GetLocation(menuElem);
            var resizePos = SP.Internal.DomElement.GetLocation(resizeElem);

            return {
                left: Math.min(menuPos.x, resizePos.x),
                width: menuElem.offsetWidth + resizeElem.offsetWidth,
                top: menuPos.y + (objBag.RTL.bEnabled ? 4 : 0),
                height: menuElem.offsetHeight
            };
        };
        this.UpdateHeaderHeights = function(headerHeight) {
            if (objBag.spGrid)
                return;
            Sys.Debug.assert(headerHeight >= 30);
            for (var idx in _headerChildObjects) {
                var divs = _headerChildObjects[idx];

                divs.move.style.height = headerHeight - 5 + 'px';
                if (divs.menuImg != null) {
                    divs.menuImg.style.marginTop = Math.floor((headerHeight - 5 - 6) / 2) + 'px';
                }
                if (divs.filterStateImg != null) {
                    divs.filterStateImg.style.marginTop = Math.floor((headerHeight - 5 - 11) / 2) + 'px';
                }
                divs.coreContent.style.lineHeight = (divs.coreContent.style.height = headerHeight - 12 + 'px');
            }
        };
        this.OnSort = function(eventInfo, columnKey) {
            SP.Internal.DomElement.StopEvent(eventInfo);
            eventInfo.preventDefault();
            objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.Sort, [{
                columnName: columnKey,
                isDescending: _sortStates[columnKey] == SP.JsGrid.SortMode.Ascending
            }]);
        };
        this.RenameColumn = function(columnKey) {
            objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnBeginRenameColumn);
            objBag.selectionMgr.Clear(false);
            var renameColumnElem;
            var gridPane = objBag.paneMgr.GetGridPane();
            var paneConverter = gridPane.GetGridPaneConverter();
            var headerDiv = _headerChildObjects[columnKey];
            var contentRegion = headerDiv.content;
            var contentRegionCssClasses = contentRegion.className;
            var editableRegion = headerDiv.coreContent;
            var headerCell = GetParentTdFromHeaderDiv(editableRegion);
            var headerCellWidthStyle = headerCell.style.width;
            var headerCellMinWidthStyle = headerCell.style.minWidth;
            var columnInfo = paneConverter.GetColumnByKey(columnKey);
            var originalTitle = columnInfo.name;

            _this.SetColumnEditing(columnKey);
            InsertRenameColumnElem();
            renameColumnElem.select();
            function GetParentTdFromHeaderDiv(inDiv) {
                while (inDiv && inDiv.tagName != "TH")
                    inDiv = inDiv.parentNode;
                return inDiv;
            }
            function InsertRenameColumnElem() {
                var renameWidthBuffer = 20;

                renameColumnElem = document.createElement('input');
                renameColumnElem.id = columnKey + '_' + gridPane.Id + '_focusElement';
                renameColumnElem.className = 'jsgrid-control-header-editbox';
                renameColumnElem.value = originalTitle;
                renameColumnElem.style.width = headerCell.clientWidth - renameWidthBuffer + "px";
                renameColumnElem.setAttribute("type", "text");
                renameColumnElem.setAttribute("colAction", "rename");
                $addHandler(renameColumnElem, 'blur', OnHeaderBlur);
                $addHandler(renameColumnElem, 'keydown', OnHeaderKeyDown);
                $addHandler(renameColumnElem, 'mousedown', OnHeaderMouseAction);
                $addHandler(renameColumnElem, 'mouseup', OnHeaderMouseAction);
                $addHandler(renameColumnElem, 'click', OnHeaderMouseAction);
                var actualHeaderCellWidth = SP.Internal.DomElement.GetComputedStyle(headerCell, 'width', 'width');

                headerCell.style.width = actualHeaderCellWidth;
                headerCell.style.minWidth = actualHeaderCellWidth;
                contentRegion.className = "ms-spGrid-HeaderContentStyle-Rename";
                editableRegion.parentNode.replaceChild(renameColumnElem, editableRegion);
                renameColumnElem.focus();
            }
            var updateColumnTitleTimeout = null;

            function OnHeaderBlur(domEvent) {
                if (updateColumnTitleTimeout == null)
                    updateColumnTitleTimeout = setTimeout(function() {
                        UpdateNewTitle(domEvent);
                    }, 50);
            }
            function UpdateNewTitle(domEvent) {
                var newColumnTitle = TrimSpaces(renameColumnElem.value);

                _this.SetColumnEdited(columnKey);
                $removeHandler(renameColumnElem, 'blur', OnHeaderBlur);
                $removeHandler(renameColumnElem, 'keydown', OnHeaderKeyDown);
                if (newColumnTitle.length < 1) {
                    alert(fnGetLocStr('RenameColumn_BlankColumnName'));
                    newColumnTitle = originalTitle;
                }
                columnInfo.name = newColumnTitle;
                if (headerDiv.sortA != null) {
                    var textNode = headerDiv.sortA.firstChild;

                    if (textNode != null && textNode.nodeType == 3) {
                        textNode.data = newColumnTitle;
                    }
                    else {
                        SP.Internal.DomElement.SetText(headerDiv.sortA, newColumnTitle);
                    }
                }
                else {
                    SP.Internal.DomElement.SetText(editableRegion, newColumnTitle);
                }
                headerCell.title = newColumnTitle;
                editableRegion.setAttribute('colAction', 'sort');
                headerCell.style.width = headerCellWidthStyle;
                headerCell.style.minWidth = headerCellMinWidthStyle;
                contentRegion.className = contentRegionCssClasses;
                renameColumnElem.parentNode.replaceChild(editableRegion, renameColumnElem);
                if (newColumnTitle != originalTitle) {
                    columnInfo.width = null;
                    _this.AdjustColumnWidth(columnInfo);
                    _this.ResizeColumn(headerCell, columnInfo.width);
                }
                objBag.bUpdateCoordCache = true;
                Sys.Debug.assert(fnUpdatePositionedElements != null);
                if (fnUpdatePositionedElements != null) {
                    fnUpdatePositionedElements();
                }
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnEndRenameColumn, new SP.JsGrid.EventArgs.OnEndRenameColumn(columnKey, originalTitle, newColumnTitle));
            }
            ;
            function OnHeaderKeyDown(domEvent) {
                if (domEvent && domEvent.keyCode == Sys.UI.Key.esc)
                    renameColumnElem.value = originalTitle;
                if (domEvent && (domEvent.keyCode == Sys.UI.Key.tab || domEvent.keyCode == Sys.UI.Key.enter))
                    renameColumnElem.blur();
            }
            ;
            function OnHeaderMouseAction(domEvent) {
                if (updateColumnTitleTimeout != null)
                    clearTimeout(updateColumnTitleTimeout);
                domEvent.stopPropagation();
            }
        };
        function ColumnIsPresent(columnKey) {
            return columnKey in _headerChildObjects;
        }
        function UpdateColorFromEventInfo(eventInfo, elemState) {
            var th = SP.Internal.DomElement.FindAncestorWithProperty(eventInfo.target, 'thColumnKey');

            if (th != null && ColumnIsPresent(th.elem.thColumnKey)) {
                var elem = SP.Internal.DomElement.FindAncestorWithProperty(eventInfo.target, 'colid');

                if (elem != null) {
                    if (UpdateColor(th.elem.thColumnKey, elem.elem, elemState)) {
                        return elem.elem;
                    }
                }
            }
            return null;
        }
        function UpdateColor(columnKey, elem, elemState) {
            var colid = SP.Internal.DomElement.GetCustomAttribute(elem, 'colid');

            if (SP.Internal.DomElement.GetCustomAttribute(elem, 'colAction') == 'move') {
                return false;
            }
            else if (colid == 'resizeRight') {
                var sib = _fnGetHeaderSibling(_headerChildObjects[columnKey].th, false);

                if (sib != null) {
                    colid = 'resize';
                    columnKey = sib.thColumnKey;
                }
                else {
                    colid = 'menu';
                }
            }
            if (colid != null && columnKey in _initalColorMap && colid in _initalColorMap[columnKey] && !(columnKey in _lockedElements && colid in _lockedElements[columnKey])) {
                if (colid != "eyeBrow" || _partsEnabled[columnKey].selection) {
                    if (elemState == ElementState.Normal) {
                        ApplyColorToElem(columnKey, colid, _initalColorMap[columnKey][colid].bg, _initalColorMap[columnKey][colid].border);
                    }
                    else if (elemState == ElementState.Hover) {
                        ApplyColorToElem(columnKey, colid, _styles[columnKey][colid + 'HoverColor'], _styles[columnKey][colid + 'HoverBorderColor']);
                    }
                    else if (elemState == ElementState.Clicked) {
                        ApplyColorToElem(columnKey, colid, _styles[columnKey].elementClickColor, _styles[columnKey].elementClickBorderColor);
                    }
                }
            }
            return true;
        }
        function ApplyColorToElem(columnKey, colid, color, borderColor) {
            if (color != null) {
                _headerChildObjects[columnKey][colid].style.backgroundColor = color;
                if (colid == 'menu') {
                    _headerChildObjects[columnKey]['resizeRight'].style.backgroundColor = color;
                }
            }
            if (borderColor != null) {
                _headerChildObjects[columnKey][colid].style['border' + borderMap[colid] + 'Color'] = borderColor;
            }
        }
        function ClearSort(columnKey) {
            delete _sortStates[columnKey];
            if (_headerChildObjects[columnKey] != null && _headerChildObjects[columnKey].sortImg != null) {
                _headerChildObjects[columnKey].sortImg.src = SP.JsGrid.ImagesDirectory + 'blank.gif';
                _headerChildObjects[columnKey].sortImg.style.width = "7px";
            }
        }
        function SetSortImg(childObjectCollection, bAscending) {
            if (childObjectCollection.sortImg != null) {
                childObjectCollection.sortImg.style.display = '';
                if (bAscending) {
                    childObjectCollection.sortImg.src = "/_layouts/15/images/sort.gif?rev=23";
                    childObjectCollection.sortImg.alt = (childObjectCollection.sortImg.title = SP.JsGrid.Res.sortedAsc);
                }
                else {
                    childObjectCollection.sortImg.src = "/_layouts/15/images/rsort.gif?rev=23";
                    childObjectCollection.sortImg.alt = (childObjectCollection.sortImg.title = SP.JsGrid.Res.sortedDesc);
                }
            }
        }
        function SetColumnSortState(columnKey, sortMode) {
            delete _sortStates[columnKey];
            if (sortMode == SP.JsGrid.SortMode.Ascending || sortMode == SP.JsGrid.SortMode.Descending) {
                _sortStates[columnKey] = sortMode;
                var childObjectCollection = _headerChildObjects[columnKey];

                if (childObjectCollection != null) {
                    if (sortMode == SP.JsGrid.SortMode.Ascending) {
                        SetSortImg(childObjectCollection, true);
                    }
                    else {
                        SetSortImg(childObjectCollection, false);
                    }
                }
            }
            else {
                ClearSort(columnKey);
            }
        }
        function ClearColumnFiltered(columnKey) {
            delete _filterStates[columnKey];
            ClearColumnFilteredDisplay(columnKey);
        }
        function SetColumnFiltered(columnKey) {
            _filterStates[columnKey] = null;
            SetColumnFilteredDisplay(columnKey);
        }
        function ClearColumnFilteredDisplay(columnKey) {
            var divs = _headerChildObjects[columnKey];

            if (divs != null && divs.filterState != null && divs.filterState.style.display == 'inline-block') {
                divs.filterState.style.display = 'none';
            }
        }
        function SetColumnFilteredDisplay(columnKey) {
            var divs = _headerChildObjects[columnKey];

            if (divs != null && divs.filterState != null && divs.filterState.style.display != 'inline-block' && !(_activeColumn != null && _activeColumn.thColumnKey == columnKey)) {
                divs.filterState.style.display = 'inline-block';
            }
        }
        this.SetSortState = function(sortState) {
            for (var colKey in _sortStates) {
                ClearSort(colKey);
            }
            if (sortState != null) {
                for (var i = 0; i < sortState.length; i++) {
                    SetColumnSortState(sortState[i].fieldKey, sortState[i].isDescending ? SP.JsGrid.SortMode.Descending : SP.JsGrid.SortMode.Ascending);
                }
            }
        };
        this.SetFilterState = function(filterState) {
            for (var colKey in _filterStates) {
                ClearColumnFiltered(colKey);
            }
            if (filterState != null) {
                for (var i = 0; i < filterState.length; i++) {
                    SetColumnFiltered(filterState[i]);
                }
            }
        };
        this.HeaderMouseDown = function(eventInfo) {
            UpdateColorFromEventInfo(eventInfo, ElementState.Clicked);
        };
        this.HeaderMouseUp = function(eventInfo) {
            UpdateColorFromEventInfo(eventInfo, ElementState.Normal);
        };
        this.HeaderMouseMove = function(eventInfo) {
            var elem = UpdateColorFromEventInfo(eventInfo, ElementState.Hover);
            var curHighlightElem = _curHighlightedElem != null ? _curHighlightedElem.elem : null;

            if (elem != null && SP.Internal.DomElement.GetCustomAttribute(elem, "colid") == "menuImg") {
                elem = (SP.Internal.DomElement.FindAncestorWithProperty(elem.parentNode, 'colid')).elem;
            }
            if (curHighlightElem != elem) {
                _this.HeaderMouseOut(eventInfo);
                if (curHighlightElem != elem && elem != null) {
                    _curHighlightedElem = {
                        elem: elem,
                        columnKey: (SP.Internal.DomElement.FindAncestorWithProperty(eventInfo.target, 'thColumnKey')).elem.thColumnKey
                    };
                }
            }
        };
        this.HeaderMouseOut = function(eventInfo) {
            if (_curHighlightedElem != null) {
                UpdateColor(_curHighlightedElem.columnKey, _curHighlightedElem.elem, ElementState.Normal);
                _curHighlightedElem = null;
            }
        };
        this.InColumnHeaderEditMode = function() {
            return _currentEditColumnKey != null;
        };
        this.ColumnCurrentlyEditing = function(columnKey) {
            return _currentEditColumnKey == columnKey;
        };
        this.SetColumnSelected = function(columnKey) {
            LockItem(columnKey, 'eyebrow');
        };
        this.SetColumnUnselected = function(columnKey) {
            UnlockItem(columnKey, 'eyebrow');
        };
        this.SetColumnMenuExpanded = function(columnKey) {
            LockItem(columnKey, 'menu');
        };
        this.SetColumnMenuCollapsed = function(columnKey) {
            UnlockItem(columnKey, 'menu');
        };
        this.SetColumnMoving = function(columnKey) {
            if (!objBag.spGrid)
                this.HideMenuOnColumn();
            LockItem(columnKey, 'move', true);
        };
        this.SetColumnMoved = function(columnKey) {
            UnlockItem(columnKey, 'move', true);
        };
        this.SetColumnResizing = function(columnKey) {
            if (!objBag.spGrid)
                this.HideMenuOnColumn();
            LockItem(columnKey, 'resize', true);
        };
        this.SetColumnEdited = function(columnKey) {
            _currentEditColumnKey = null;
            UnlockItem(columnKey, 'coreContent', true);
        };
        this.SetColumnEditing = function(columnKey) {
            if (!objBag.spGrid)
                this.HideMenuOnColumn();
            _currentEditColumnKey = columnKey;
            LockItem(columnKey, 'coreContent', true);
        };
        this.SetColumnResized = function(columnKey) {
            UnlockItem(columnKey, 'resize', true);
        };
        function LockColumn(key) {
            if (_curActingColumnInfo != null) {
                Sys.Debug.assert(false);
            }
            _curActingColumnInfo = {};
            _curActingColumnInfo.key = key;
        }
        function UnLockColumn() {
            if (_curActingColumnInfo != null) {
                var info = _curActingColumnInfo;

                _curActingColumnInfo = null;
                if (info.curStyle != null) {
                    _this.ApplyHeaderStyle(_headerChildObjects[info.key].th, info.curStyle);
                }
            }
        }
        function LockItem(columnKey, colId, bLockCol) {
            UpdateColor(columnKey, _headerChildObjects[columnKey][colId], ElementState.Clicked);
            if (_lockedElements[columnKey] == null) {
                _lockedElements[columnKey] = {};
            }
            _lockedElements[columnKey][colId] = '';
            if (bLockCol) {
                LockColumn(columnKey);
            }
        }
        function UnlockItem(columnKey, colId, bUnlockCol) {
            Sys.Debug.assert(columnKey in _lockedElements && colId in _lockedElements[columnKey]);
            delete _lockedElements[columnKey][colId];
            if (SP.Internal.JS.IsAssocArrayEmpty(_lockedElements[columnKey])) {
                delete _lockedElements[columnKey];
            }
            if (_curActingColumnInfo != null && _curActingColumnInfo.key == columnKey) {
                UnLockColumn();
            }
            if (ColumnIsPresent(columnKey)) {
                UpdateColor(columnKey, _headerChildObjects[columnKey][colId], _headerChildObjects[columnKey][colId] == _curHighlightedElem ? ElementState.Hover : ElementState.Normal);
            }
        }
    };
    SP.JsGrid.Internal.HierarchyManager = function(objBag, posConverter, operationalUtil, optGroupingLevel, optGroupingRecordKeyPrefix, optUnfilteredHierarchyMgr, fnControllerExpandNode, fnIsEntryRecordKey, delayLoadKeySet, filteredDescCountSeed) {
        var visibleCollapsed = [];
        var collapsedSet = new SP.Utilities.Set();
        var collapsedCount = 0;
        var descCountCache, staticDescCountCache = {};
        var unfilteredHierMgr = optUnfilteredHierarchyMgr;
        var _this = this;
        var groupingDescCountAdjustments = {};
        var jsGridObj = objBag.jsGridObj;
        var tableCache = objBag.tableCache;
        var commandMgr = objBag.commandMgr;
        var delegateMgr = objBag.delegateMgr;

        if (filteredDescCountSeed == null) {
            filteredDescCountSeed = {};
        }
        if (unfilteredHierMgr != null) {
            descCountCache = new DescendantCountCache(unfilteredHierMgr);
        }
        this.ChangeKeys = function(oldKey, newKey) {
            if (collapsedSet.Contains(oldKey)) {
                collapsedSet.Remove(oldKey);
                collapsedSet.Add(oldKey);
            }
            TraverseNodes(visibleCollapsed, function(node) {
                if (node.recordKey == oldKey) {
                    node.recordKey = newKey;
                }
            });
            if (unfilteredHierMgr != null) {
                unfilteredHierMgr.ChangeKeys(oldKey, newKey);
            }
        };
        this.GetState = function(bDecompressGuidKeys) {
            var recordKeys = [], recordIdxs = [], recordDescendantCounts = [];

            TraverseNodes(visibleCollapsed, function(node) {
                var key = node.recordKey;

                recordKeys.push(bDecompressGuidKeys && !_this.IsGroupingRecord(key) ? SP.JsGrid.GuidManager.LookupGuidForIndex(key) : key);
                recordIdxs.push(node.recordIdx);
                recordDescendantCounts.push(GetDescendantCount(key));
            });
            return {
                recordKeys: recordKeys,
                recordIdxs: recordIdxs,
                recordDescendantCounts: recordDescendantCounts
            };
        };
        this.SetState = function(state, optUnfilteredHierarchyMgr) {
            visibleCollapsed = [];
            collapsedSet = new SP.Utilities.Set();
            collapsedCount = 0;
            if (optUnfilteredHierarchyMgr != null) {
                unfilteredHierMgr = optUnfilteredHierarchyMgr;
                descCountCache = new DescendantCountCache(unfilteredHierMgr);
            }
            if (state != null) {
                staticDescCountCache = {};
                for (var i = 0; i < state.recordIdxs.length; i++) {
                    staticDescCountCache[state.recordKeys[i]] = state.recordDescendantCounts[i];
                }
                for (var i = 0; i < state.recordIdxs.length; i++) {
                    this.NotifyCollapse(state.recordIdxs[i], state.recordKeys[i]);
                }
            }
        };
        this.GetUnfilteredHierarchyMgr = function() {
            return unfilteredHierMgr;
        };
        this.GetViewRecords = function(viewIdx, count, fnCallback) {
            return tableCache.GetRecords(ConvertRange(viewIdx, count), fnCallback);
        };
        this.GetViewRecordCount = function() {
            return tableCache.GetRecordCount() - collapsedCount;
        };
        this.SetTableView = function(pposConverter, poperationalUtil, poptGroupingLevel, poptGroupingRecordKeyPrefix) {
            posConverter = pposConverter;
            operationalUtil = poperationalUtil;
            optGroupingLevel = poptGroupingLevel;
            optGroupingRecordKeyPrefix = poptGroupingRecordKeyPrefix;
            groupingDescCountAdjustments = {};
        };
        this.ConvertViewIdxToRecordIdx = function(viewIdx) {
            var idx = SP.Internal.JS.UpperBound(visibleCollapsed, viewIdx, 'viewIdx');

            if (!idx) {
                return viewIdx;
            }
            var vc = visibleCollapsed[idx - 1];

            return vc.viewIdx == viewIdx ? vc.recordIdx : vc.recordIdx + (viewIdx - vc.viewIdx) + GetDescendantCount(vc.recordKey);
        };
        this.ConvertRecordIdxToViewIdx = function(recordIdx) {
            var idx = SP.Internal.JS.UpperBound(visibleCollapsed, recordIdx, 'recordIdx');

            if (!idx) {
                return recordIdx;
            }
            var vc = visibleCollapsed[idx - 1];

            if (vc.recordIdx == recordIdx) {
                return vc.viewIdx;
            }
            else {
                var diff = recordIdx - vc.recordIdx - GetDescendantCount(vc.recordKey);

                return diff <= 0 ? null : vc.viewIdx + diff;
            }
        };
        this.IsGroupingRecord = function(recordKey) {
            return this.IsGrouped() && recordKey.constructor == String && recordKey.indexOf(optGroupingRecordKeyPrefix) == 0;
        };
        this.GetNodeInfo = function(record) {
            return {
                nodeType: this.GetNodeType(record.key()),
                indent: this.GetNodeIndentLevel(record)
            };
        };
        this.GetNodeType = function(recordKey) {
            if (delayLoadKeySet.Contains(recordKey)) {
                return SP.JsGrid.Internal.HierarchyManager.NodeType.Collapsed;
            }
            else if (jsGridObj.IsEntryRecordKey(recordKey) || GetDescendantCount(recordKey) == 0) {
                return SP.JsGrid.Internal.HierarchyManager.NodeType.Leaf;
            }
            else if (collapsedSet.Contains(recordKey)) {
                return SP.JsGrid.Internal.HierarchyManager.NodeType.Collapsed;
            }
            else {
                return SP.JsGrid.Internal.HierarchyManager.NodeType.Expanded;
            }
        };
        this.GetNodeIndentLevel = function(record) {
            if (jsGridObj.IsEntryRecordKey(record.key())) {
                return jsGridObj.GetSpCsrRenderCtx() != null ? 1 : 0;
            }
            else if (this.IsGrouped()) {
                var indent = operationalUtil.GetValue(record, SP.JsGrid.OperationalConstants.GroupingOutlineLevel);

                return indent == null ? optGroupingLevel : indent;
            }
            else {
                return GetNonGroupingOutlineLevel(record);
            }
        };
        this.GetInsertAfterInfoForInsert = function(insertAfterKey, insertBeforeKey) {
            Sys.Debug.assert(insertAfterKey != null);
            var lowestExpandedAndVisibleParentKey = null;
            var curParentKey = insertAfterKey;

            while ((curParentKey = unfilteredHierMgr.GetParent(curParentKey)) != null) {
                if (!IsExpanded(curParentKey)) {
                    lowestExpandedAndVisibleParentKey = null;
                    if (!fnIsEntryRecordKey(insertBeforeKey) && insertBeforeKey != null) {
                        return unfilteredHierMgr.GetOutlineLevel(insertBeforeKey);
                    }
                }
                else if (lowestExpandedAndVisibleParentKey == null && tableCache.IsKeyInView(curParentKey)) {
                    lowestExpandedAndVisibleParentKey = curParentKey;
                }
            }
            var aol = Math.max(lowestExpandedAndVisibleParentKey != null ? unfilteredHierMgr.GetOutlineLevel(lowestExpandedAndVisibleParentKey) + 1 : 0, 1);

            return fnIsEntryRecordKey(insertBeforeKey) || insertBeforeKey == null ? aol : Math.max(aol, unfilteredHierMgr.GetOutlineLevel(insertBeforeKey));
        };
        this.GetAfterKeyFromBeforeKey = function(insertBeforeKey) {
            return unfilteredHierMgr.GetPrevNode(insertBeforeKey);
        };
        this.GetInsertAfterInfoForDelete = function(recordKey) {
            return {
                insertAfterKey: unfilteredHierMgr.GetPrevNode(recordKey),
                outlineLevel: unfilteredHierMgr.GetOutlineLevel(recordKey)
            };
        };
        this.NotifyCollapse = function(recordIdx, recordKey) {
            var viewIdx = _this.ConvertRecordIdxToViewIdx(recordIdx);

            Sys.Debug.assert(viewIdx != null);
            var descCount = GetDescendantCount(recordKey);

            Sys.Debug.assert(!collapsedSet.Contains(recordKey));
            collapsedSet.Add(recordKey);
            var finalViewIdxDelta = descCount;
            var collapsedChildCount = 0;

            ForEachVisibleCollapsedNodeInSubtree(recordIdx, descCount, function(nodeRecordIdx, nodeRecordKey) {
                finalViewIdxDelta -= GetDescendantCount(nodeRecordKey);
                collapsedChildCount++;
            });
            var vcidx = SP.Internal.JS.LowerBound(visibleCollapsed, recordIdx, 'recordIdx');
            var children = visibleCollapsed.splice(vcidx, collapsedChildCount, {
                recordIdx: recordIdx,
                recordKey: recordKey,
                viewIdx: viewIdx
            });

            visibleCollapsed[vcidx].collapsedChildren = children;
            AdjustViewIdxCache(vcidx + 1, -finalViewIdxDelta, visibleCollapsed);
            collapsedCount += finalViewIdxDelta;
            return finalViewIdxDelta;
        };
        this.NotifyExpand = function(recordIdx, recordKey) {
            Sys.Debug.assert(_this.ConvertRecordIdxToViewIdx(recordIdx) != null);
            Sys.Debug.assert(collapsedSet.Contains(recordKey));
            collapsedSet.Remove(recordKey);
            var vcidx = SP.Internal.JS.BinarySearch(visibleCollapsed, recordIdx, 'recordIdx');

            Sys.Debug.assert(vcidx != null);
            var vc = visibleCollapsed[vcidx];
            var finalViewIdxDelta = GetDescendantCount(recordKey);
            var rootDelta = vc.recordIdx - vc.viewIdx;

            for (var idx in vc.collapsedChildren) {
                var nodeDescCount = GetDescendantCount(vc.collapsedChildren[idx].recordKey);

                finalViewIdxDelta -= nodeDescCount;
                rootDelta += nodeDescCount;
            }
            Array.prototype.splice.apply(visibleCollapsed, [vcidx, 1].concat(vc.collapsedChildren));
            AdjustViewIdxCache(vcidx + vc.collapsedChildren.length, finalViewIdxDelta, visibleCollapsed);
            collapsedCount -= finalViewIdxDelta;
            return finalViewIdxDelta;
        };
        this.GetNextNonGroupingIdx = function(recordIdx) {
            while (this.IsGroupingRecord(tableCache.RecordIdxToKey(recordIdx))) {
                if (recordIdx == tableCache.GetRecordCount() - 1) {
                    Sys.Debug.assert(false);
                    return recordIdx;
                }
                recordIdx++;
            }
            return recordIdx;
        };
        this.NotifyInsertRowAfter = function(afterRecordKey, recordIdx, newRecordKey, newOutlineLevel) {
            function AdjustVisCollEntries(entries) {
                if (entries != null) {
                    for (var i = 0; i < entries.length; i++) {
                        var entry = entries[i];

                        entry.recordIdx++;
                        entry.viewIdx++;
                        AdjustVisCollEntries(entry.collapsedChildren);
                    }
                }
            }
            var parentKeyToRedraw = null;

            if (unfilteredHierMgr != null) {
                var convRes = ConvertInsAfterKeyAndOutlineLevelToParentAndPrevSibling(afterRecordKey, newOutlineLevel);

                parentKeyToRedraw = convRes.parentKey;
                if (!IsExpanded(parentKeyToRedraw)) {
                    fnControllerExpandNode(parentKeyToRedraw);
                }
                unfilteredHierMgr.Insert(newRecordKey, convRes.parentKey, convRes.previousSiblingKey, false);
                unfilteredHierMgr.ForEachAncestor(newRecordKey, false, function(key) {
                    descCountCache.AdjustCount(key, 1);
                });
            }
            else if (this.IsGrouped()) {
                var parentKey = FindParentKeyForGrouping(recordIdx);

                Sys.Debug.assert(parentKey != null);
                if (groupingDescCountAdjustments[parentKey] == null) {
                    groupingDescCountAdjustments[parentKey] = 0;
                }
                groupingDescCountAdjustments[parentKey]++;
            }
            else {
                Sys.Debug.assert(false);
            }
            var vcidx = SP.Internal.JS.LowerBound(visibleCollapsed, recordIdx, 'recordIdx');

            AdjustVisCollEntries(visibleCollapsed.slice(vcidx));
            return parentKeyToRedraw;
        };
        this.NotifyRecordsReordered = function(beginRecordIdx, endRecordIdx, newRecordIdx, reorderedKeys, beforeRecordKey) {
            if (unfilteredHierMgr != null) {
                AdjustVisibleCollapsedNodes();
                AdjustUnfiltedHierarchy();
                descCountCache.Clear();
            }
            else {
                Sys.Debug.assert(false);
            }
            function AdjustVisibleCollapsedNodes() {
                var visibleReorderedCount = GetVisibleCountOfRange(beginRecordIdx, endRecordIdx);
                var visibleSkippedOverCount = newRecordIdx < beginRecordIdx && newRecordIdx != null ? GetVisibleCountOfRange(newRecordIdx + 1, beginRecordIdx) : GetVisibleCountOfRange(endRecordIdx + 1, newRecordIdx == null ? tableCache.GetRecordCount() - 1 : newRecordIdx - 1);

                TraverseList(visibleCollapsed);
                function GetVisibleCountOfRange(beginRecordIdx, endRecordIdx) {
                    var ret = 0;

                    for (var i = beginRecordIdx; i <= endRecordIdx; i++) {
                        if (_this.ConvertRecordIdxToViewIdx(i) != null) {
                            ret++;
                        }
                    }
                    return ret;
                }
                function TraverseList(list) {
                    var bNeedsToSort = false;

                    for (var i = 0; i < list.length; i++) {
                        var bSkipDescendantNodes = false;
                        var vc = list[i];

                        if (beginRecordIdx > vc.recordIdx && newRecordIdx <= vc.recordIdx) {
                            vc.viewIdx += visibleReorderedCount;
                            vc.recordIdx += reorderedKeys.length;
                        }
                        else if (vc.recordIdx > endRecordIdx && (newRecordIdx > vc.recordIdx || newRecordIdx == null)) {
                            vc.viewIdx -= visibleReorderedCount;
                            vc.recordIdx -= reorderedKeys.length;
                        }
                        else if (vc.recordIdx >= beginRecordIdx && vc.recordIdx <= endRecordIdx) {
                            var tempViewIdx = newRecordIdx < beginRecordIdx && newRecordIdx != null ? vc.viewIdx - visibleSkippedOverCount : vc.viewIdx + visibleSkippedOverCount;
                            var tempRecordIdx;

                            if (newRecordIdx == null) {
                                tempRecordIdx = vc.recordIdx - beginRecordIdx + tableCache.GetRecordCount() - (endRecordIdx - beginRecordIdx + 1);
                            }
                            else {
                                if (newRecordIdx < vc.recordIdx) {
                                    tempRecordIdx = vc.recordIdx - beginRecordIdx + newRecordIdx;
                                }
                                else {
                                    tempRecordIdx = newRecordIdx - (endRecordIdx - beginRecordIdx + 1) + (vc.recordIdx - beginRecordIdx);
                                }
                            }
                            var viewIdxDeleta = tempViewIdx - vc.viewIdx;
                            var recordIdxDelta = tempRecordIdx - vc.recordIdx;

                            vc.viewIdx = tempViewIdx;
                            vc.recordIdx = tempRecordIdx;
                            TraverseNodes(vc.collapsedChildren, function(vc) {
                                vc.viewIdx += viewIdxDeleta;
                                vc.recordIdx += recordIdxDelta;
                            });
                            bSkipDescendantNodes = true;
                            bNeedsToSort = true;
                        }
                        if (!bSkipDescendantNodes) {
                            TraverseList(vc.collapsedChildren);
                        }
                    }
                    if (bNeedsToSort) {
                        list.sort(function(a, b) {
                            return a.recordIdx - b.recordIdx;
                        });
                    }
                }
            }
            function AdjustUnfiltedHierarchy() {
                var afterRecordKey = beforeRecordKey == null ? unfilteredHierMgr.GetLastNodeKey() : _this.GetAfterKeyFromBeforeKey(beforeRecordKey);
                var convRes = ConvertInsAfterKeyAndOutlineLevelToParentAndPrevSibling(afterRecordKey, _this.GetInsertAfterInfoForInsert(afterRecordKey, beforeRecordKey));
                var topNodes = unfilteredHierMgr.GetKeysInOrder((GetTopLevelNodes(reorderedKeys)).ToArray());
                var nodeSet = new SP.Utilities.Set();

                nodeSet.AddArray(topNodes);
                var prevSiblingMap = {};

                for (var i = 0; i < topNodes.length; i++) {
                    prevSiblingMap[topNodes[i]] = unfilteredHierMgr.GetPrevSibling(topNodes[i]);
                }
                var lastItemMoved = null;

                for (var i = 0; i < topNodes.length; i++) {
                    var parentKey = unfilteredHierMgr.GetParent(topNodes[i]);

                    parentKey = nodeSet.Contains(parentKey) ? parentKey : convRes.parentKey;
                    var prevSibling = prevSiblingMap[topNodes[i]];

                    prevSibling = nodeSet.Contains(prevSibling) ? prevSibling : i == 0 ? convRes.previousSiblingKey : lastItemMoved;
                    unfilteredHierMgr.Move(topNodes[i], parentKey, prevSibling, false);
                    lastItemMoved = topNodes[i];
                }
            }
        };
        this.ValidateAndMinimizeKeyList = function(recordKeys) {
            for (var i = 0; i < recordKeys.length; i++) {
                if (unfilteredHierMgr.GetParent(recordKeys[i]) == null) {
                    return {
                        bLevelZeroFound: true
                    };
                }
            }
            return {
                bLevelZeroFound: false,
                minimizedKeys: (GetTopLevelNodes(recordKeys)).ToArray()
            };
        };
        this.ValidateAndExpandKeyList = function(recordKeys) {
            if (unfilteredHierMgr == null) {
                return null;
            }
            for (var i = 0; i < recordKeys.length; i++) {
                if (!unfilteredHierMgr || !unfilteredHierMgr.IsKeyPresent(recordKeys[i])) {
                    return {
                        bGroupingRowFound: true
                    };
                }
                if (unfilteredHierMgr.GetParent(recordKeys[i]) == null) {
                    return {
                        bLevelZeroFound: true
                    };
                }
            }
            function GetDescendants(topLevelNodes) {
                function AreChildKeysInView(parentKey) {
                    var keys = unfilteredHierMgr.GetChildren(parentKey);

                    for (var i = keys.length - 1; i >= 0; i--) {
                        if (!tableCache.IsKeyInView(keys[i]) || !AreChildKeysInView(keys[i])) {
                            return false;
                        }
                        outputArray.push(keys[i]);
                    }
                    return true;
                }
                var bAllInView = true;
                var outputArray = [];

                for (var key in topLevelNodes.GetCollection()) {
                    if (!AreChildKeysInView(key)) {
                        bAllInView = false;
                        break;
                    }
                    outputArray.push(key);
                }
                return {
                    bAllChildKeysInView: bAllInView,
                    bGroupingRowFound: false,
                    bLevelZeroFound: false,
                    expandedKeys: outputArray
                };
            }
            return GetDescendants(GetTopLevelNodes(recordKeys));
        };
        this.CanDelete = function(recordKey) {
            return (unfilteredHierMgr.GetChildren(recordKey)).length == 0;
        };
        this.NotifyDeleteRow = function(recordKey, recordIdx) {
            function AdjustVisCollEntries(entries) {
                if (entries != null) {
                    for (var i = 0; i < entries.length; i++) {
                        var entry = entries[i];

                        entry.recordIdx--;
                        if (!bDeletingCollapsedRecord) {
                            entry.viewIdx--;
                        }
                        AdjustVisCollEntries(entry.collapsedChildren);
                    }
                }
            }
            collapsedSet.Remove(recordKey);
            var bDeletingCollapsedRecord = this.ConvertRecordIdxToViewIdx(recordIdx) == null;

            if (bDeletingCollapsedRecord) {
                collapsedCount--;
            }
            if (unfilteredHierMgr != null) {
                Sys.Debug.assert(this.CanDelete(recordKey));
                var parentKeyToRedraw = unfilteredHierMgr.GetParent(recordKey);

                unfilteredHierMgr.Delete(recordKey);
                descCountCache.Delete(recordKey);
                unfilteredHierMgr.ForEachAncestor(parentKeyToRedraw, true, function(key) {
                    descCountCache.AdjustCount(key, -1);
                });
            }
            else if (this.IsGrouped()) {
                var parentKey = FindParentKeyForGrouping(recordIdx);

                Sys.Debug.assert(parentKey != null);
                if (groupingDescCountAdjustments[parentKey] == null) {
                    groupingDescCountAdjustments[parentKey] = 0;
                }
                groupingDescCountAdjustments[parentKey]--;
            }
            else {
                Sys.Debug.assert(false);
            }
            var vcidx = SP.Internal.JS.LowerBound(visibleCollapsed, recordIdx, 'recordIdx');

            if (visibleCollapsed[vcidx] != null && visibleCollapsed[vcidx].recordIdx == recordIdx) {
                visibleCollapsed.splice(vcidx, 1);
            }
            AdjustVisCollEntries(visibleCollapsed.slice(vcidx));
        };
        this.CanIndent = function(recordKey) {
            return unfilteredHierMgr.GetPrevSibling(recordKey) != null;
        };
        this.EnsureIndentPreconditionsMet = function(recordKey) {
            var prevSibKey = unfilteredHierMgr.GetPrevSibling(recordKey);

            if (descCountCache.GetCount(prevSibKey) != 0 && !IsExpanded(prevSibKey)) {
                fnControllerExpandNode(prevSibKey);
            }
            return null;
        };
        this.NotifyIndent = function(recordKey, optFirstAdoptedChildKey) {
            Sys.Debug.assert(this.CanIndent(recordKey));
            var prevSibKey = unfilteredHierMgr.GetPrevSibling(recordKey);
            var origDescCount = descCountCache.GetCount(recordKey);
            var adpotedChildren = optFirstAdoptedChildKey == null ? [] : [].concat(unfilteredHierMgr.GetSiblingSlice(optFirstAdoptedChildKey, false, true));

            unfilteredHierMgr.Move(recordKey, prevSibKey, null, true);
            var adoptedDescCount = 0;

            for (var i = 0; i < adpotedChildren.length; i++) {
                adoptedDescCount += (tableCache.IsKeyInView(adpotedChildren[i]) ? 1 : 0) + descCountCache.GetCount(adpotedChildren[i]);
                unfilteredHierMgr.Move(adpotedChildren[i], prevSibKey, null, true);
            }
            descCountCache.AdjustCount(recordKey, -adoptedDescCount);
            descCountCache.AdjustCount(prevSibKey, 1 + origDescCount);
            return [{
                startingRecordKey: prevSibKey,
                count: 1
            }, {
                startingRecordKey: recordKey,
                count: 1 + GetUncollapsedDescendantCount(recordKey)
            }];
        };
        this.CanOutdent = function(recordKey) {
            var parentKey = unfilteredHierMgr.GetParent(recordKey);

            return parentKey != null && unfilteredHierMgr.GetParent(parentKey) != null;
        };
        this.EnsureOutdentPreconditionsMet = function(recordKey) {
            var parentKey = unfilteredHierMgr.GetParent(recordKey);
            var sibsAfterMe = unfilteredHierMgr.GetSiblingSlice(recordKey, false, false);

            if (sibsAfterMe.length != 0 && !IsExpanded(recordKey)) {
                fnControllerExpandNode(recordKey);
            }
            return sibsAfterMe.length == 0 ? null : sibsAfterMe;
        };
        this.NotifyOutdent = function(recordKey) {
            Sys.Debug.assert(this.CanOutdent(recordKey));
            var parentKey = unfilteredHierMgr.GetParent(recordKey);
            var origVisibleDescCount = GetUncollapsedDescendantCount(recordKey);
            var newChildren = [].concat(unfilteredHierMgr.GetSiblingSlice(recordKey, false, false));

            unfilteredHierMgr.Move(recordKey, unfilteredHierMgr.GetParent(parentKey), parentKey, false);
            var adoptDescCount = 0;

            for (var i = 0; i < newChildren.length; i++) {
                adoptDescCount += (tableCache.IsKeyInView(newChildren[i]) ? 1 : 0) + descCountCache.GetCount(newChildren[i]);
                unfilteredHierMgr.Move(newChildren[i], recordKey, null, true);
            }
            descCountCache.AdjustCount(recordKey, adoptDescCount);
            descCountCache.AdjustCount(parentKey, -1 * (1 + descCountCache.GetCount(recordKey)));
            return [{
                startingRecordKey: parentKey,
                count: 1
            }, {
                startingRecordKey: recordKey,
                count: 1 + origVisibleDescCount
            }];
        };
        this.IsGrouped = function() {
            return optGroupingLevel != 0 && optGroupingLevel != null;
        };
        this.GetOutlineLevel = function(record) {
            return GetNonGroupingOutlineLevel(record);
        };
        this.GetParentKey = function(recordKey) {
            return unfilteredHierMgr != null ? unfilteredHierMgr.GetParent(recordKey) : this.IsGrouped() ? FindParentKeyForGrouping(posConverter.RecordKeyToRecordIdx(recordKey)) : null;
        };
        function TraverseNodes(nodes, fn) {
            for (var i = 0; i < nodes.length; i++) {
                TraverseNodes(nodes[i].collapsedChildren, fn);
                fn(nodes[i]);
            }
        }
        function FindParentKeyForGrouping(recordIdx) {
            var r = null;
            var curRecordIdx = recordIdx - 1;

            while (r == null && curRecordIdx >= 0) {
                var curRecKey = tableCache.RecordIdxToKey(curRecordIdx);

                if (_this.IsGroupingRecord(curRecKey)) {
                    r = curRecKey;
                }
                curRecordIdx--;
            }
            return r;
        }
        function ConvertRange(viewIdx, count) {
            var ranges = [];
            var lastRecordIdx = _this.ConvertViewIdxToRecordIdx(viewIdx);
            var range = {
                pos: lastRecordIdx,
                count: 1
            };
            var recordIdx;

            for (var i = viewIdx + 1; i < viewIdx + count; i++) {
                recordIdx = _this.ConvertViewIdxToRecordIdx(i);
                if (recordIdx == lastRecordIdx + 1) {
                    range.count++;
                }
                else {
                    ranges.push(range);
                    range = {
                        pos: recordIdx,
                        count: 1
                    };
                }
                lastRecordIdx = recordIdx;
            }
            ranges.push(range);
            return ranges;
        }
        function GetUncollapsedDescendantCount(recordKey) {
            if (collapsedSet.Contains(recordKey)) {
                return 0;
            }
            var descCount = GetDescendantCount(recordKey);
            var recordIdx = posConverter.RecordKeyToRecordIdx(recordKey);

            ForEachVisibleCollapsedNodeInSubtree(recordIdx, descCount, function(nodeRecordIdx, nodeRecordKey) {
                descCount -= GetDescendantCount(nodeRecordKey);
            });
            return descCount;
        }
        function ForEachVisibleCollapsedNodeInSubtree(rootRecordIdx, rootDescendantCount, fnCallback) {
            var subTreeEndPos = rootRecordIdx + rootDescendantCount;
            var vcidx = SP.Internal.JS.UpperBound(visibleCollapsed, rootRecordIdx, 'recordIdx');

            while (vcidx < visibleCollapsed.length && visibleCollapsed[vcidx].recordIdx <= subTreeEndPos) {
                fnCallback(visibleCollapsed[vcidx].recordIdx, visibleCollapsed[vcidx].recordKey);
                vcidx++;
            }
        }
        function AdjustViewIdxCache(startingIdx, delta, vCollapsedArray) {
            for (var i = startingIdx; i < vCollapsedArray.length; i++) {
                vCollapsedArray[i].viewIdx += delta;
                AdjustViewIdxCache(0, delta, vCollapsedArray[i].collapsedChildren);
            }
        }
        function GetNonGroupingOutlineLevel(record) {
            return unfilteredHierMgr != null ? unfilteredHierMgr.GetOutlineLevel(record.key()) : operationalUtil.GetValue(record, SP.JsGrid.OperationalConstants.HierarchyOutlineLevel);
        }
        function GetKeysInView(keys) {
            var r = [];

            for (var i = 0; i < keys.length; i++) {
                if (tableCache.IsKeyInView(keys[i])) {
                    r.push(keys[i]);
                }
            }
            return r;
        }
        function GetDescendantCount(recordKey) {
            var descCount;
            var bGrouped = _this.IsGrouped();

            if (unfilteredHierMgr != null && !bGrouped) {
                descCount = descCountCache.GetCount(recordKey);
            }
            else {
                if (!bGrouped && recordKey in filteredDescCountSeed) {
                    descCount = filteredDescCountSeed[recordKey];
                }
                else {
                    var record = tableCache.GetCachedRecord(recordKey);

                    if (record == null) {
                        descCount = staticDescCountCache[recordKey];
                        Sys.Debug.assert(descCount != null, 'Unable to determine descendant count of a hierarchy node');
                    }
                    else {
                        descCount = operationalUtil.GetValue(record, bGrouped ? SP.JsGrid.OperationalConstants.GroupingDescendantCount : SP.JsGrid.OperationalConstants.HierarchyDescendantCount) || 0;
                    }
                    if (bGrouped && _this.IsGroupingRecord(recordKey) && recordKey in groupingDescCountAdjustments) {
                        descCount += groupingDescCountAdjustments[recordKey];
                    }
                }
            }
            return descCount;
        }
        function GetTopLevelNodes(keys) {
            var inputSet = new SP.Utilities.Set(), topLevelSet = new SP.Utilities.Set();

            inputSet.AddArray(keys);
            for (var key in inputSet.GetCollection()) {
                for (var iterKey = unfilteredHierMgr.GetParent(key); iterKey != null; iterKey = unfilteredHierMgr.GetParent(iterKey)) {
                    if (inputSet.Contains(iterKey)) {
                        break;
                    }
                }
                if (iterKey == null) {
                    topLevelSet.Add(key);
                }
            }
            return topLevelSet;
        }
        function IsExpanded(recordKey) {
            return !collapsedSet.Contains(recordKey);
        }
        function ConvertInsAfterKeyAndOutlineLevelToParentAndPrevSibling(insertAfterKey, outlineLevel) {
            var r;
            var outlineLevelOfInsAftKey = unfilteredHierMgr.GetOutlineLevel(insertAfterKey);

            Sys.Debug.assert(outlineLevel > 0 && outlineLevel <= outlineLevelOfInsAftKey + 1);
            if (outlineLevel == outlineLevelOfInsAftKey + 1) {
                r = {
                    parentKey: insertAfterKey,
                    previousSiblingKey: null
                };
            }
            else {
                var prevSibKey = insertAfterKey;

                while (outlineLevel != outlineLevelOfInsAftKey) {
                    prevSibKey = unfilteredHierMgr.GetParent(prevSibKey);
                    outlineLevel++;
                }
                r = {
                    parentKey: unfilteredHierMgr.GetParent(prevSibKey),
                    previousSiblingKey: prevSibKey
                };
            }
            return r;
        }
        function DescendantCountCache(unfilteredHierMgr) {
            var _this = this;
            var _cache = {};

            this.Clear = function() {
                _cache = {};
            };
            this.Delete = function(recordKey) {
                delete _cache[recordKey];
            };
            this.GetCount = function(recordKey) {
                Update(recordKey);
                return _cache[recordKey] || 0;
            };
            this.AdjustCount = function(recordKey, delta) {
                if (recordKey in _cache) {
                    _cache[recordKey] += delta;
                }
            };
            function Update(key) {
                if (!(key in _cache)) {
                    var keys = unfilteredHierMgr.GetChildren(key);
                    var count = 0;

                    for (var i = 0; i < keys.length; i++) {
                        var childKey = keys[i];

                        count += (tableCache.IsKeyInView(childKey) ? 1 : 0) + _this.GetCount(childKey);
                    }
                    if (count != 0) {
                        _cache[key] = count;
                    }
                }
            }
        }
    };
    SP.JsGrid.Internal.HierarchyManager.NodeType = {
        Leaf: 0,
        Expanded: 1,
        Collapsed: 2
    };
    SP.JsGrid.NodeType = {
        Leaf: 0,
        Expanded: 1,
        Collapsed: 2
    };
    SP.JsGrid.UnfilteredHierarchyManager = function(rawData) {
        var unfilteredHierMap = {};
        var topNodeKey;
        var _this = this;
        var _queryObject;

        Init();
        this.ChangeKeys = function(oldKey, newKey) {
            if (oldKey in unfilteredHierMap) {
                unfilteredHierMap[newKey] = unfilteredHierMap[oldKey];
                delete unfilteredHierMap[oldKey];
            }
            for (var k in unfilteredHierMap) {
                for (var i = 0; i < unfilteredHierMap[k].childKeys.length; i++) {
                    if (unfilteredHierMap[k].childKeys[i] == oldKey) {
                        unfilteredHierMap[k].childKeys[i] = newKey;
                    }
                }
                if (unfilteredHierMap[k].parentKey == oldKey) {
                    unfilteredHierMap[k].parentKey = newKey;
                }
            }
        };
        this.GetHierarchyQueryObject = function() {
            if (_queryObject == null) {
                _queryObject = {
                    GetParentKey: function(recordKey) {
                        return _this.GetParent(recordKey);
                    },
                    IsParent: function(recordKey) {
                        return (_this.GetChildren(recordKey)).length > 0;
                    },
                    GetPreviousSibling: function(recordKey) {
                        return _this.GetPrevSibling(recordKey);
                    },
                    GetNextSibling: function(recordKey) {
                        return _this.GetNextSibling(recordKey);
                    },
                    GetAllFollowingSiblings: function(recordKey) {
                        var ret = [];

                        while (recordKey != null) {
                            recordKey = _this.GetNextSibling(recordKey);
                            if (recordKey != null) {
                                ret.push(recordKey);
                            }
                        }
                        return ret;
                    },
                    GetTagObject: function(recordKey) {
                        return (_this.GetUnfilteredHierarchyMap())[recordKey].tag;
                    },
                    SetTagObject: function(recordKey, obj) {
                        (_this.GetUnfilteredHierarchyMap())[recordKey].tag = obj;
                    },
                    GetKeysInOrder: function(keys) {
                        return _this.GetKeysInOrder(keys);
                    }
                };
            }
            return _queryObject;
        };
        this.GetUnfilteredHierarchyMap = function() {
            return unfilteredHierMap;
        };
        this.GetTopNodeKey = function() {
            return topNodeKey;
        };
        this.GetLastNodeKey = function() {
            var r = topNodeKey;

            while (true) {
                var curChildren = unfilteredHierMap[r].childKeys;

                if (curChildren.length > 0) {
                    r = curChildren[curChildren.length - 1];
                }
                else {
                    break;
                }
            }
            return r;
        };
        this.Hydrate = function(unfilteredMap, topKey) {
            unfilteredHierMap = unfilteredMap;
            topNodeKey = topKey;
        };
        this.IsKeyPresent = function(key) {
            return key in unfilteredHierMap;
        };
        this.GetParent = function(key) {
            Sys.Debug.assert(this.IsKeyPresent(key));
            return unfilteredHierMap[key].parentKey;
        };
        this.GetChildren = function(key) {
            Sys.Debug.assert(this.IsKeyPresent(key));
            return unfilteredHierMap[key].childKeys;
        };
        this.GetSiblingSlice = function(key, bBeforeVsAfterMe, bIncludeSelf) {
            Sys.Debug.assert(this.IsKeyPresent(key));
            var info = GetNodeInfo(key);

            return bBeforeVsAfterMe ? info.siblingKeys.slice(0, info.siblingIdx + (bIncludeSelf ? 1 : 0)) : info.siblingKeys.slice(info.siblingIdx + (bIncludeSelf ? 0 : 1));
        };
        this.GetFirstChild = function(key) {
            Sys.Debug.assert(this.IsKeyPresent(key));
            var children = this.GetChildren(key);

            return children.length ? children[0] : null;
        };
        this.GetLastChild = function(key) {
            Sys.Debug.assert(this.IsKeyPresent(key));
            var children = this.GetChildren(key);

            return children.length ? children[children.length - 1] : null;
        };
        this.GetNextSibling = function(key) {
            Sys.Debug.assert(this.IsKeyPresent(key));
            var info = GetNodeInfo(key);

            return info.siblingIdx == info.siblingKeys.length - 1 ? null : info.siblingKeys[info.siblingIdx + 1];
        };
        this.GetPrevSibling = function(key) {
            Sys.Debug.assert(this.IsKeyPresent(key));
            var info = GetNodeInfo(key);

            return info.siblingIdx == 0 ? null : info.siblingKeys[info.siblingIdx - 1];
        };
        this.GetNextNode = function(key) {
            Sys.Debug.assert(this.IsKeyPresent(key));
            for (var r = this.GetFirstChild(key); r == null && key != null; r = this.GetNextSibling(key), key = this.GetParent(key)) { }
            return r;
        };
        this.GetPrevNode = function(key) {
            Sys.Debug.assert(this.IsKeyPresent(key));
            var prevSib = this.GetPrevSibling(key);

            if (prevSib == null) {
                return this.GetParent(key);
            }
            var lastDesc = prevSib;
            var lastChild;

            while (lastChild = this.GetLastChild(lastDesc), lastChild != null) {
                lastDesc = lastChild;
            }
            return lastDesc;
        };
        this.ForEachAncestor = function(key, bIncludeSelf, fnOp) {
            if (!bIncludeSelf) {
                key = this.GetParent(key);
            }
            for (; key != null; key = this.GetParent(key)) {
                fnOp(key);
            }
        };
        this.ForEachChild = function(key, fnOp) {
            var children = this.GetChildren(key);

            for (var i = 0; i < children.length; i++) {
                fnOp(children[i]);
            }
        };
        this.GetAllNodes = function() {
            var allNodes = [];

            AppendChildNodesToArray(topNodeKey);
            return allNodes;
            function AppendChildNodesToArray(nodeKey) {
                allNodes.push(nodeKey);
                _this.ForEachChild(nodeKey, AppendChildNodesToArray);
            }
        };
        this.GetKeysInOrder = function(keys) {
            var r = keys;
            var lca;
            var maxDepthFromLCA = 0;

            if (keys.length > 1) {
                r = [];
                var lca = keys[0];

                for (var i = 1; i < keys.length; i++) {
                    FindLCA(keys[i]);
                }
                var minList = GetDescendants(lca, 0);

                minList = [lca].concat(minList);
                Sys.Debug.assert(minList.length <= SP.Internal.JS.GetAssocArraySize(unfilteredHierMap));
                var keysAsSet = (new SP.Utilities.Set()).AddArray(keys);

                for (var i = 0; i < minList.length; i++) {
                    if (keysAsSet.Contains(minList[i])) {
                        r.push(minList[i]);
                        if (r.length == keys.length) {
                            break;
                        }
                    }
                }
                Sys.Debug.assert(r.length == keys.length, "we didn't find all the kids in the lca graph");
            }
            return r;
            function GetDescendants(key, curLevel) {
                var children = _this.GetChildren(key);
                var descendants;

                if (curLevel + 1 < maxDepthFromLCA && children.length > 0) {
                    descendants = [];
                    for (var i = 0; i < children.length; i++) {
                        descendants.push(children[i]);
                        Array.prototype.splice.apply(descendants, [descendants.length, 0].concat(GetDescendants(children[i], curLevel + 1)));
                    }
                }
                return descendants || children;
            }
            function FindLCA(toFind) {
                var encounteredParents = new SP.Utilities.Set();
                var curDepth = 0;

                while (toFind != null && toFind != lca) {
                    encounteredParents.Add(toFind);
                    toFind = _this.GetParent(toFind);
                    curDepth++;
                }
                if (toFind != null) {
                    maxDepthFromLCA = Math.max(curDepth, maxDepthFromLCA);
                }
                else {
                    while (!encounteredParents.Contains(lca) && lca != null) {
                        lca = _this.GetParent(lca);
                        maxDepthFromLCA++;
                    }
                    if (lca == null) {
                        lca = topNodeKey;
                    }
                }
            }
        };
        this.GetOutlineLevel = function(key) {
            var node = unfilteredHierMap[key];

            for (var level = 0; node.parentKey != null; level++) {
                node = unfilteredHierMap[node.parentKey];
            }
            return level;
        };
        this.Insert = function(newKey, parentKey, siblingKey, bBeforeNewSibVsAfter) {
            Sys.Debug.assert(!(newKey in unfilteredHierMap) && parentKey != null);
            unfilteredHierMap[newKey] = {
                parentKey: null,
                childKeys: []
            };
            this.Move(newKey, parentKey, siblingKey, bBeforeNewSibVsAfter);
        };
        this.Delete = function(key) {
            Sys.Debug.assert((this.GetChildren(key)).length == 0);
            Orphan(key);
            delete unfilteredHierMap[key];
        };
        this.Move = function(key, newParentKey, newSiblingKey, bBeforeNewSibVsAfter) {
            Orphan(key);
            var insertPos;
            var siblingKeys;

            if (newSiblingKey == null) {
                siblingKeys = this.GetChildren(newParentKey);
                insertPos = bBeforeNewSibVsAfter ? siblingKeys.length : 0;
            }
            else {
                var info = GetNodeInfo(newSiblingKey);

                Sys.Debug.assert(newParentKey == info.parentKey);
                siblingKeys = info.siblingKeys;
                insertPos = info.siblingIdx + (bBeforeNewSibVsAfter ? 0 : 1);
            }
            siblingKeys.splice(insertPos, 0, key);
            unfilteredHierMap[key].parentKey = newParentKey;
        };
        this.GetTagObjectForRecord = function(recordKey) {
            return unfilteredHierMap[recordKey].tag;
        };
        function GetNodeInfo(key) {
            var parentKey = _this.GetParent(key);
            var siblingKeys = parentKey != null ? _this.GetChildren(parentKey) : [key];
            var siblingIdx = SP.Internal.JS.FindInArray(siblingKeys, function(item) {
                return item == key;
            });

            Sys.Debug.assert(siblingIdx != null);
            return {
                siblingKeys: siblingKeys,
                siblingIdx: siblingIdx,
                parentKey: parentKey
            };
        }
        function Orphan(key) {
            if (_this.GetParent(key) != null) {
                var info = GetNodeInfo(key);

                info.siblingKeys.splice(info.siblingIdx, 1);
            }
        }
        function Init() {
            if (rawData.length > 0) {
                topNodeKey = rawData[0].Key;
                for (var i = 0; i < rawData.length; i++) {
                    var key = rawData[i].Key;
                    var tag = rawData[i].Tag;
                    var parentIdx = rawData[i].Parent;
                    var parentKey = parentIdx != null ? rawData[parentIdx].Key : null;

                    unfilteredHierMap[key] = {
                        parentKey: parentKey,
                        childKeys: [],
                        tag: tag
                    };
                    if (parentKey != null) {
                        unfilteredHierMap[parentKey].childKeys.push(key);
                    }
                }
            }
            rawData = null;
        }
    };
    SP.JsGrid.Internal.ChangeHighlightManager = function() {
        var _cells;

        this.AddCell = function(recordKey, fieldKey) {
            var cellKey = Hash(recordKey, fieldKey);

            _cells.Add(cellKey);
        };
        this.Clear = function() {
            _cells = new SP.Utilities.Set();
        };
        this.IsCellIn = function(recordKey, fieldKey) {
            return _cells.Contains(Hash(recordKey, fieldKey));
        };
        function Hash(recordKey, fieldKey) {
            return [recordKey, fieldKey].join();
        }
        function Unhash(hash) {
            var ary = hash.split(',');

            return {
                recordKey: ary[0],
                fieldKey: ary[1]
            };
        }
        this.Clear();
    };
    SP.JsGrid.JsGridControl = function(parentNode, bShowLoadingBanner) {
        StaticInit();
        parentNode.style.position = 'relative';
        var paneMgr;
        var controller;
        var commandMgr;
        var posConverter;
        var operationalConstantsFieldKeyMap;
        var operationalUtil;
        var disableCount = 0;
        var tableCache;
        var bIsInitialized = false;
        var bViewSet = false;
        var _jsGridParams;
        var eventMgr = new SP.JsGrid.EventManager();
        var delegateMgr = new SP.JsGrid.DelegateManager();
        var intDelegateMgr = new SP.JsGrid.DelegateManager();
        var loadingBanner = new SP.LoadingBanner(parentNode, parentNode.id + '_disable_banner');
        var objBag = {};
        var _oldStyleAttachedRightClickFn;
        var TestEventType = {
            Start: 0,
            Finish: 1
        };
        var spCsrRenderCtx;
        var _this = this;

        this.parentNode = parentNode;
        parentNode.jsgrid = this;
        if (bShowLoadingBanner) {
            SetEnabledState(false);
        }
        this.IsInitialized = function() {
            return bIsInitialized;
        };
        this.ResetData = function(cache) {
            tableCache = cache;
        };
        this.Init = function(jsGridParameters) {
            var p = jsGridParameters;

            _jsGridParams = (parentNode.jsgridparams = p);
            parentNode.jsgridtableviewparams = p.tableViewParams;
            parentNode.jsgridrowviewparams = p.tableViewParams && p.tableViewParams.rowViewParams;
            FireTestEvent(TestEventType.Start);
            this.name = p.name != null ? p.name : '';
            InitOldStyleDelegates();
            tableCache = p.tableCache;
            commandMgr = p.commandMgr;
            if (commandMgr.IsUndoEnabled()) {
                commandMgr.AddPreExecuteNotifier(StopEditing);
            }
            objBag.RTL = {
                bEnabled: p.isRTL,
                left: p.isRTL ? 'right' : 'left',
                Left: p.isRTL ? 'Right' : 'Left',
                right: p.isRTL ? 'left' : 'right',
                Right: p.isRTL ? 'Left' : 'Right',
                ltr: p.isRTL ? 'rtl' : 'ltr'
            };
            SP.JsGrid.Style.SetRTL(objBag.RTL);
            intDelegateMgr.SetDelegate(SP.JsGrid.Internal.DelegateType.CallAsyncFn, CallAsyncFn);
            intDelegateMgr.SetDelegate(SP.JsGrid.Internal.DelegateType.GetLocalizedString, GetLocalizedString);
            intDelegateMgr.SetDelegate(SP.JsGrid.Internal.DelegateType.DoLargeTask, DoLargeTask);
            objBag.jsGridObj = this;
            objBag.jsGridParams = _jsGridParams;
            objBag.gridId = parentNode.id;
            objBag.eventMgr = eventMgr;
            objBag.intEventMgr = new SP.JsGrid.EventManager();
            objBag.intDelegateMgr = intDelegateMgr;
            objBag.commandMgr = p.commandMgr;
            objBag.delegateMgr = delegateMgr;
            objBag.styleMgr = p.styleManager;
            objBag.tableCache = p.tableCache;
            objBag.canUserAddColumn = p.canUserAddColumn;
            objBag.showAddColumnMenu = p.showAddColumn;
            objBag.spGrid = p.spGrid;
            objBag.spCsrRenderCtx = p.spCsrRenderCtx;
            objBag.qualifier = p.qualifier;
            objBag.errorMgr = new SP.JsGrid.Internal.ErrorManager(objBag);
            objBag.rowHeaderStateMgr = new SP.JsGrid.Internal.RowHeaderStateManager(objBag.intEventMgr);
            objBag.rowHeaderStates = new SP.JsGrid.RowHeaderStates(objBag);
            objBag.rowHeaderAutoStates = new SP.JsGrid.AutoRowHeaderStates(p.enabledRowHeaderAutoStates, objBag);
            objBag.entryRecordMgr = new SP.JsGrid.Internal.EntryRecordManager(objBag);
            objBag.provisionalRecordMgr = new SP.JsGrid.Internal.ProvisionalRecordManager(objBag);
            objBag.parentNode = parentNode;
            objBag.bUpdateCoordCache = false;
            objBag.gridControls = {};
            spCsrRenderCtx = p.spCsrRenderCtx;
            var cssForLinks = '{cursor:pointer} :link {color:' + objBag.styleMgr.gridPaneStyle.linkColor + '} :visited {color: ' + objBag.styleMgr.gridPaneStyle.visitedLinkColor + '}';

            SP.JsGrid.DisplayControl.ImageTextDisplayControl._styleForLinks = cssForLinks;
            SP.JsGrid.DisplayControl.TextDisplayControl._styleForLinks = cssForLinks;
            if (p.bNotificationsEnabled) {
                SP.JsGrid.Internal.ErrorNotificationManager.Init(objBag.gridId, objBag);
            }
            objBag.controller = (controller = new SP.JsGrid.Internal.MVCController(objBag, GetLocalizedString, p.bEnableDiffTracking));
            objBag.paneMgr = (paneMgr = new SP.JsGrid.Internal.PaneManager(parentNode.id, objBag, GetLocalizedString, parentNode, p.minHeaderHeight, p.minRowHeight, function() {
                return disableCount == 0;
            }));
            paneMgr.SetEventSinks(controller.GetViewEventSinks());
            if (jsGridParameters.tableViewParams != null) {
                SetTableView(jsGridParameters.tableViewParams);
            }
            $addHandler(window, 'unload', Dispose);
            bIsInitialized = true;
            FireTestEvent(TestEventType.Finish);
        };
        function InitOldStyleDelegates() {
            if (_jsGridParams.fnCreateNewRecords != null) {
                delegateMgr.SetDelegate(SP.JsGrid.DelegateType.CreateRecords, _jsGridParams.fnCreateNewRecords);
            }
            if (_jsGridParams.fnExpandColumnMenu != null) {
                delegateMgr.SetDelegate(SP.JsGrid.DelegateType.ExpandColumnMenu, _jsGridParams.fnExpandColumnMenu);
            }
            if (_jsGridParams.fnSort != null) {
                delegateMgr.SetDelegate(SP.JsGrid.DelegateType.Sort, _jsGridParams.fnSort);
            }
        }
        this.Cleanup = function() {
            $removeHandler(window, 'unload', Dispose);
            loadingBanner.Dispose();
            if (SP.Internal.DomElement.ElementAttachedToDom(parentNode)) {
                paneMgr.Dispose();
                parentNode.innerHTML = '';
            }
            bIsInitialized = (bViewSet = false);
        };
        function Dispose() {
            if (bIsInitialized) {
                $removeHandler(window, 'unload', Dispose);
                objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnBeforeGridDispose);
                objBag.intEventMgr.FireEvent(SP.JsGrid.Internal.EventType.OnGridDisposing);
                loadingBanner.Dispose();
                if (SP.Internal.DomElement.ElementAttachedToDom(parentNode)) {
                    paneMgr.Dispose();
                    parentNode.innerHTML = '';
                    parentNode = (parentNode.jsgrid = (parentNode.jsgridparams = (parentNode.jsgridtableviewparams = (parentNode.jsgridrowviewparams = null))));
                }
                delete _this.parentNode;
                objBag.parentNode = null;
                bIsInitialized = (bViewSet = false);
                commandMgr.RemovePreExecuteNotifier(StopEditing);
            }
        }
        this.Dispose = Dispose;
        this.NotifyDataAvailable = function() {
            controller.NotifyDataAvailable();
        };
        this.NotifySave = function() {
            controller.NotifySave();
        };
        this.NotifyHide = function() {
            controller.NotifyHide();
        };
        this.NotifyResize = function() {
            paneMgr.NotifyResize();
        };
        this.ClearTableView = function() {
            if (bViewSet) {
                controller.ClearTableView();
                bViewSet = false;
            }
        };
        this.HideInitialLoadingBanner = function() {
            if (bShowLoadingBanner) {
                SetEnabledState(true);
                bShowLoadingBanner = false;
            }
        };
        this.ShowInitialGridErrorMsg = function(errorMsg) {
            Sys.Debug.assert(!bViewSet);
            this.HideInitialLoadingBanner();
            errorBanner = new SP.ErrorBanner(parentNode, parentNode.id + '_initial_error_banner');
            errorBanner.Show(errorMsg);
        };
        this.ShowGridErrorMsg = function(errorMsg) {
            this.HideInitialLoadingBanner();
            errorBanner = new SP.ErrorBanner(parentNode, parentNode.id + '_error_banner');
            errorBanner.Show(errorMsg);
        };
        this.LaunchPrintPreview = function(additionalScriptFiles, beforeInitFnName, beforeInitFnArgsObj, title, bEnableGantt, optGanttDelegateNames, optInitTableViewParamsFnName, optInitTableViewParamsFnArgsObj, optInitGanttStylesFnName, optInitGanttStylesFnArgsObj) {
            var records = null;

            if (title == null) {
                title = 'test';
            }
            paneMgr.GetRecordMap(function(recordMap) {
                objBag.intDelegateMgr.Apply(SP.JsGrid.Internal.DelegateType.CallAsyncFn, function AsyncOp(fnAsyncOpComplete) {
                    return records = tableCache.GetRecords([{
                        pos: 0,
                        count: tableCache.GetRecordCount()
                    }], function(r) {
                        records = r;
                        fnAsyncOpComplete();
                    });
                }, function AsyncOpComplete() {
                    _jsGridParams.tableViewParams.rowViewParams.view = tableCache.GetView();
                    if (bEnableGantt) {
                        SP.JsGrid.FinishLaunchPrintPreview(records.records[0], _jsGridParams, additionalScriptFiles, beforeInitFnName, beforeInitFnArgsObj, optInitTableViewParamsFnName, optInitTableViewParamsFnArgsObj, title, bEnableGantt, optGanttDelegateNames, parentNode.clientWidth - objBag.paneMgr.GetSplitterPosition() - SP.JsGrid.Internal.SplitterWidth, objBag.paneMgr.GetGanttZoomLevel(), optInitGanttStylesFnName, optInitGanttStylesFnArgsObj);
                    }
                    else {
                        SP.JsGrid.FinishLaunchPrintPreview(records.records[0], _jsGridParams, additionalScriptFiles, beforeInitFnName, beforeInitFnArgsObj, optInitTableViewParamsFnName, optInitTableViewParamsFnArgsObj, title, bEnableGantt, null, 0, 0, null, null);
                    }
                });
            });
        };
        this.GetAllDataJson = function(fnOnFinished, optFnGetCellStyleID) {
            paneMgr.GetAllDataJson(fnOnFinished, optFnGetCellStyleID);
        };
        this.AddColumn = function(columnInfo, gridField) {
            paneMgr.AddColumn(columnInfo);
            objBag.entryRecordMgr.AddColumn(columnInfo.columnKey, gridField);
        };
        this.SetTableView = function(tableViewParams) {
            _jsGridParams.tableViewParams = (parentNode.jsgridtableviewparams = tableViewParams);
            parentNode.jsgridrowviewparams = tableViewParams.rowViewParams;
            FireTestEvent(TestEventType.Start);
            SetTableView(tableViewParams);
            FireTestEvent(TestEventType.Finish);
        };
        function SetTableView(tableViewParams) {
            if (bViewSet) {
                _this.ClearTableView();
            }
            bViewSet = true;
            _this.HideInitialLoadingBanner();
            if (delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.GetGridRowStyleId)) {
                tableViewParams.fnGetGridRowStyleId = delegateMgr.GetDelegate(SP.JsGrid.DelegateType.GetGridRowStyleId);
            }
            if (_oldStyleAttachedRightClickFn != null) {
                eventMgr.DetachEvent(SP.JsGrid.EventType.OnRightClick, _oldStyleAttachedRightClickFn);
            }
            _oldStyleAttachedRightClickFn = tableViewParams.fnOnRightClick == null ? null : function(args) {
                tableViewParams.fnOnRightClick(args.eventInfo, args.context, args.recordKey, args.fieldKey);
            };
            if (_oldStyleAttachedRightClickFn != null) {
                eventMgr.AttachEvent(SP.JsGrid.EventType.OnRightClick, _oldStyleAttachedRightClickFn);
            }
            posConverter = new SP.JsGrid.Internal.PositionConverter(tableCache, objBag);
            if (tableViewParams.operationalConstantsFieldKeyMap != null) {
                operationalConstantsFieldKeyMap = tableViewParams.operationalConstantsFieldKeyMap;
                operationalUtil = GetOperationalUtility();
            }
            Sys.Debug.assert(!tableViewParams.bNewRowEnabled || delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.CreateEntryRecord) && delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.TryInsertEntryRecord));
            Sys.Debug.assert(operationalUtil != null);
            controller.SetTableView(tableViewParams.rowViewParams, tableViewParams.columns, tableViewParams.gridFieldMap, tableViewParams.defaultEditMode, tableViewParams.bNewRowEnabled, tableViewParams.bEditingEnabled, tableViewParams.splitterPos, posConverter, operationalUtil, tableViewParams.fnGetGridRowStyleId, tableViewParams.allowedSelectionTypes, tableViewParams.bMovableColumns, tableViewParams.bResizableColumns, tableViewParams.bHidableColumns, tableViewParams.bSortableColumns, tableViewParams.bAutoFilterableColumns, tableViewParams.bRowHeadersEnabled, tableViewParams.paneLayout, tableViewParams.ganttParams, tableViewParams.pivotedGridParams, tableViewParams.bRecordIndicatorCheckboxesEnabled, tableViewParams.checkSelectionCheckboxHiddenRecordKeys, tableViewParams.checkSelectionCheckboxDisabledRecordKeys, tableViewParams.checkSelectionCheckedRecordKeys);
        }
        this.SetRowView = function(rowViewParams) {
            _jsGridParams.tableViewParams.rowViewParams = (parentNode.jsgridrowviewparams = rowViewParams);
            FireTestEvent(TestEventType.Start);
            controller.SetRowView(rowViewParams);
            FireTestEvent(TestEventType.Finish);
        };
        this.Enable = function() {
            SetEnabledState(true);
        };
        this.Disable = function(optMsg) {
            SetEnabledState(false, optMsg);
        };
        this.EnableEditing = function() {
            controller.EnableEditing();
        };
        this.DisableEditing = function() {
            controller.DisableEditing();
        };
        this.TryBeginEdit = function() {
            return controller.TryBeginEdit();
        };
        this.FinalizeEditing = function(fnContinue, fnError) {
            controller.FinalizeEditing(fnContinue, fnError);
        };
        this.ShowColumnConfigurationDialog = function() {
            paneMgr.ShowColumnConfigurationDialog();
        };
        this.GetDiffTracker = function() {
            return controller.GetDiffTracker();
        };
        this._GetPaneManager = function() {
            return objBag.paneMgr;
        };
        this.GetColumnByFieldKey = function(fieldKey, optPaneId) {
            var columnIdx = ((paneMgr.GetGridPane()).GetGridPaneConverter()).FieldKeyToColIdx(fieldKey);

            if (columnIdx == null) {
                return null;
            }
            return (paneMgr.GetColumns(optPaneId))[columnIdx];
        };
        this.Focus = function() {
            paneMgr.Focus();
        };
        this.TryCommitFirstEntryRecords = function(fnCommitComplete) {
            objBag.entryRecordMgr.TryCommitFirstEntryRecords(fnCommitComplete, true);
        };
        this.ClearUncommittedEntryRecords = function() {
            objBag.entryRecordMgr.ClearUncommittedEntryRecords();
        };
        this.ClearEntryRecord = function(recordKey) {
            objBag.entryRecordMgr.ClearEntryRecord(recordKey);
        };
        this.AnyUncomittedEntryRecords = function() {
            if (objBag != null && objBag.entryRecordMgr != null) {
                return objBag.entryRecordMgr.AnyUncomittedEntryRecords();
            }
            else {
                return false;
            }
        };
        this.AnyUncomittedProvisionalRecords = function() {
            if (objBag != null && objBag.provisionalRecordMgr != null) {
                return objBag.provisionalRecordMgr.AnyUncomittedProvisionalRecords();
            }
            else {
                return false;
            }
        };
        this.GetRecord = function(recordKey) {
            return objBag.entryRecordMgr.IsEntryRecordKey(recordKey) ? objBag.entryRecordMgr.GetEntryRecord(recordKey) : objBag.tableCache.GetCachedRecord(recordKey);
        };
        this.GetEntryRecord = function(key) {
            return objBag.entryRecordMgr.GetEntryRecord(key);
        };
        this.IsEntryRecordKey = function(recordKey) {
            return objBag.entryRecordMgr.IsEntryRecordKey(recordKey);
        };
        this.IsCellEditable = function(record, fieldKey, optPaneId) {
            return paneMgr.IsCellEditable(record, fieldKey, optPaneId);
        };
        this.AddBuiltInRowHeaderState = function(recordKey, rowHeaderStateId) {
            this.AddRowHeaderState(recordKey, objBag.rowHeaderStates[rowHeaderStateId]);
        };
        this.AddRowHeaderState = function(recordKey, rowHeaderState) {
            objBag.rowHeaderStateMgr.AddRowHeaderState(recordKey, rowHeaderState);
        };
        this.RemoveRowHeaderState = function(recordKey, rowHeaderStateId) {
            objBag.rowHeaderStateMgr.RemoveRowHeaderState(recordKey, rowHeaderStateId);
        };
        this.GetCheckSelectionManager = function() {
            return controller.GetCheckSelectionManager();
        };
        this.UpdateProperties = function(propertyUpdates, changeName, optChangeKey) {
            var r = controller.UpdateProperties(propertyUpdates, changeName, optChangeKey, null);

            Sys.Debug.assert(r != null, "can't update the NewRow programmatically");
            return r;
        };
        this.GetLastRecordKey = function() {
            return objBag.paneMgr.GetLastRecordKey();
        };
        this.InsertProvisionalRecordBefore = function(beforeRecordKey, newRecord, initialValues) {
            return objBag.provisionalRecordMgr.InsertProvisionalRecordBefore(beforeRecordKey, newRecord, initialValues);
        };
        this.InsertProvisionalRecordAfter = function(afterRecordKey, newRecord, initialValues) {
            if (afterRecordKey == null) {
                afterRecordKey = objBag.paneMgr.GetLastRecordKey();
                var unfilteredHierarchyMgr = objBag.jsGridParams.tableViewParams.rowViewParams.unfilteredHierarchyMgr;

                if (unfilteredHierarchyMgr != null) {
                    afterRecordKey = unfilteredHierarchyMgr.GetLastNodeKey();
                }
            }
            return objBag.provisionalRecordMgr.InsertProvisionalRecordAfter(afterRecordKey, newRecord, initialValues);
        };
        this.IsProvisionalRecordKey = function(recordKey) {
            return objBag.provisionalRecordMgr.IsProvisionalRecordKey(recordKey);
        };
        this.InsertRecordAfter = function(afterRecordKey, newRecord, optChangeKey) {
            return controller.InsertRecordAfter(afterRecordKey, newRecord, optChangeKey, true);
        };
        this.InsertRecordBefore = function(beforeRecordKey, newRecord, optChangeKey) {
            return controller.InsertRecordBefore(beforeRecordKey, newRecord, optChangeKey, true);
        };
        this.InsertHiddenRecord = function(recordKey, changeKey, optAfterRecordKey) {
            return controller.InsertHiddenRecord(recordKey, changeKey, optAfterRecordKey);
        };
        this.DeleteRecords = function(recordKeys, optChangeKey) {
            return controller.DeleteRecords(recordKeys, optChangeKey);
        };
        this.IndentRecords = function(recordKeys, optChangeKey) {
            return controller.AdjustRecordsIndentLevel(recordKeys, 1, optChangeKey);
        };
        this.OutdentRecords = function(recordKeys, optChangeKey) {
            return controller.AdjustRecordsIndentLevel(recordKeys, -1, optChangeKey);
        };
        this.ReorderRecords = function(beginRecordKey, endRecordKey, afterRecordKey, bSelectAfterwards) {
            return controller.ReorderRecords(beginRecordKey, endRecordKey, afterRecordKey, bSelectAfterwards);
        };
        this.GetContiguousRowSelectionWithoutEntryRecords = function() {
            var selection = CoaleseToOneSelectionIfPossible(_this.GetSelectedRowRanges());

            if (selection.length == 1) {
                return {
                    begin: selection[0].begin,
                    end: selection[0].end,
                    keys: GetKeysWithoutEntryRecords(selection[0].keys)
                };
            }
            selection = _this.GetSelectedCellRanges();
            if (selection.length == 1 && selection[0].rowRange.keys.length > 0) {
                return {
                    begin: selection[0].rowRange.begin,
                    end: selection[0].rowRange.end,
                    keys: GetKeysWithoutEntryRecords(selection[0].rowRange.keys)
                };
            }
            return null;
            function CoaleseToOneSelectionIfPossible(selection) {
                if (selection.length <= 1) {
                    return selection;
                }
                var sortedSelection = selection.slice(0);

                sortedSelection.sort(function(a, b) {
                    return a.begin < b.begin;
                });
                var ret = [sortedSelection[0]];

                for (var i = 1; i < sortedSelection.length; i++) {
                    if (ret[0].end + 1 == sortedSelection[i].begin) {
                        ret[0].end = sortedSelection[i].end;
                        ret[0].keys.push(sortedSelection[i].keys);
                    }
                    else {
                        return selection;
                    }
                }
                return ret;
            }
            function GetKeysWithoutEntryRecords(keys) {
                var ret = [];

                for (var i = 0; i < keys.length; i++) {
                    if (!_this.IsEntryRecordKey(keys[i])) {
                        ret.push(keys[i]);
                    }
                }
                return ret;
            }
            ;
        };
        this.CanMoveRecordsUpByOne = function(recordKeys) {
            if (!delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.CanReorderRecords) || !delegateMgr.Apply(SP.JsGrid.DelegateType.CanReorderRecords, recordKeys)) {
                return false;
            }
            if (delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.OnBeforeRecordReordered) && !delegateMgr.Apply(SP.JsGrid.DelegateType.OnBeforeRecordReordered, recordKeys)) {
                return false;
            }
            recordKeys = GetReorderRange(recordKeys);
            if (recordKeys.length == 0) {
                return false;
            }
            var beginViewIdx = posConverter.RecordKeyToViewIdx(recordKeys[0]);

            return beginViewIdx > 0;
        };
        this.CanMoveRecordsDownByOne = function(recordKeys) {
            if (!delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.CanReorderRecords) || !delegateMgr.Apply(SP.JsGrid.DelegateType.CanReorderRecords, recordKeys)) {
                return false;
            }
            if (delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.OnBeforeRecordReordered) && !delegateMgr.Apply(SP.JsGrid.DelegateType.OnBeforeRecordReordered, recordKeys)) {
                return false;
            }
            recordKeys = GetReorderRange(recordKeys);
            if (recordKeys.length == 0) {
                return false;
            }
            var endViewIdx = posConverter.RecordKeyToViewIdx(recordKeys[recordKeys.length - 1]);

            return endViewIdx < _this.GetViewRecordCount() - 1;
        };
        this.MoveRecordsUpByOne = function(recordKeys) {
            recordKeys = GetReorderRange(recordKeys);
            var beginViewIdx = posConverter.RecordKeyToViewIdx(recordKeys[0]);
            var newAfterKey = posConverter.ViewIdxToRecordKey(beginViewIdx - 1);

            return _this.ReorderRecords(recordKeys[0], recordKeys[recordKeys.length - 1], newAfterKey, true);
        };
        this.MoveRecordsDownByOne = function(recordKeys) {
            recordKeys = GetReorderRange(recordKeys);
            var endViewIdx = posConverter.RecordKeyToViewIdx(recordKeys[recordKeys.length - 1]);
            var newAfterKey = posConverter.ViewIdxToRecordKey(endViewIdx + 2);

            if (_this.IsEntryRecordKey(newAfterKey)) {
                newAfterKey = null;
            }
            return _this.ReorderRecords(recordKeys[0], recordKeys[recordKeys.length - 1], newAfterKey, true);
        };
        function GetReorderRange(recordKeys) {
            var hierarchyMgr = controller.GetHierarchyManager();

            if (hierarchyMgr != null) {
                var expandInfo = hierarchyMgr.ValidateAndExpandKeyList(recordKeys);

                Sys.Debug.assert(!expandInfo.bLevelZeroFound && !expandInfo.bGroupingRowFound);
                var unfiltedMgr = hierarchyMgr.GetUnfilteredHierarchyMgr();

                Sys.Debug.assert(unfiltedMgr != null);
                return unfiltedMgr.GetKeysInOrder(expandInfo.expandedKeys);
            }
            else {
                return recordKeys;
            }
        }
        this.GetNodeExpandCollapseState = function(recordKey) {
            return controller.GetNodeExpandCollapseState(recordKey);
        };
        this.ToggleExpandCollapse = function(recordKey) {
            controller.ToggleExpandCollapse(recordKey);
        };
        this.AttachEvent = function(eventType, fnOnEvent) {
            eventMgr.AttachEvent(eventType, fnOnEvent);
        };
        this.DetachEvent = function(eventType, fnOnEvent) {
            eventMgr.DetachEvent(eventType, fnOnEvent);
        };
        this.SetDelegate = function(delegateKey, fn) {
            delegateMgr.SetDelegate(delegateKey, fn);
        };
        this.GetDelegate = function(delegateKey) {
            return delegateMgr.GetDelegate(delegateKey);
        };
        this.RefreshRow = function(recordKey) {
            paneMgr.NotifyChangedRows(posConverter.RecordKeyToViewIdx(recordKey), 1);
        };
        this.RefreshAllRows = function(optTopIdx, bDontDestroySelection) {
            paneMgr.RefreshAllRows(optTopIdx, bDontDestroySelection);
        };
        this.ClearChanges = function() {
            controller.ClearChanges();
        };
        this.GetGanttZoomLevel = function() {
            return paneMgr.GetGanttZoomLevel();
        };
        this.SetGanttZoomLevel = function(level) {
            paneMgr.SetGanttZoomLevel(level);
        };
        this.ScrollGanttToDate = function(date) {
            paneMgr.ScrollGanttToDate(date);
        };
        this.ScrollCellIntoView = function(rowIdx, colIdx, optPaneId) {
            paneMgr.ScrollCellIntoView(rowIdx, colIdx, optPaneId);
        };
        this.GetTopRecordIndex = function() {
            return posConverter.GetTopViewIdx();
        };
        this.GetTopRowIndex = function(optPaneId) {
            return paneMgr.GetTopRowIndex(optPaneId);
        };
        this.GetViewRecordCount = function() {
            return posConverter.GetViewRecordCount();
        };
        this.GetViewIndexOfRecord = function(recordKey) {
            return posConverter.RecordKeyToViewIdx(recordKey);
        };
        this.GetRecordKeyByViewIndex = function(viewIdx) {
            return posConverter.ViewIdxToRecordKey(viewIdx);
        };
        this.GetLeftColumnIndex = function(optPaneId) {
            return paneMgr.GetLeftColumnIndex(optPaneId);
        };
        this.GetOutlineLevel = function(record) {
            return controller.GetOutlineLevel(record);
        };
        this.ShowColumn = function(columnKey, atIdx) {
            paneMgr.ShowColumn(columnKey, atIdx);
        };
        this.HideColumn = function(columnKey) {
            paneMgr.HideColumn(columnKey);
        };
        this.EnsurePaneWidth = function() {
            paneMgr.EnsurePaneWidth();
        };
        this.RenameColumn = function(columnKey) {
            paneMgr.RenameColumn(columnKey);
        };
        this.UpdateColumns = function(columnInfoCollection) {
            paneMgr.UpdateColumns(columnInfoCollection);
        };
        this.GetColumns = function(optPaneId) {
            return paneMgr.GetColumns(optPaneId);
        };
        this.GetSplitterPosition = function() {
            return paneMgr.GetSplitterPosition();
        };
        this.SetSplitterPosition = function(pos) {
            paneMgr.SetSplitterPosition(pos);
        };
        this.AnyErrors = function() {
            return objBag.errorMgr.AnyErrors();
        };
        this.AnyErrorsInRecord = function(recordKey) {
            return objBag.errorMgr.AnyErrorsInRow(recordKey);
        };
        this.SetCellError = function(recordKey, fieldKey, errorMessage) {
            return objBag.errorMgr.SetCellError(recordKey, fieldKey, errorMessage);
        };
        this.SetRowError = function(recordKey, errorMessage) {
            return objBag.errorMgr.SetRowError(recordKey, errorMessage);
        };
        this.ClearCellError = function(recordKey, fieldKey, id) {
            objBag.errorMgr.ClearCellError(recordKey, fieldKey, id);
        };
        this.ClearAllErrorsOnCell = function(recordKey, fieldKey) {
            objBag.errorMgr.ClearAllErrorsOnCell(recordKey, fieldKey);
        };
        this.ClearRowError = function(recordKey, id) {
            objBag.errorMgr.ClearRowError(recordKey, id);
        };
        this.ClearAllErrorsOnRow = function(recordKey) {
            return objBag.errorMgr.ClearAllErrorsOnRow(recordKey);
        };
        this.GetRowErrorMessage = function(recordKey) {
            return objBag.errorMgr.GetMessageForRow(recordKey);
        };
        this.GetCellErrorMessage = function(recordKey, fieldKey) {
            return objBag.errorMgr.GetMessageForCell(recordKey, fieldKey);
        };
        this.ScrollToAndExpandNextError = function(minId, fnFilter) {
            return objBag.paneMgr.ScrollToAndExpandNextError(minId, null, fnFilter);
        };
        this.ScrollToAndExpandNextErrorOnRecord = function(minId, recordKey, fnFilter, bDontExpand) {
            Sys.Debug.assert(recordKey != null);
            return objBag.paneMgr.ScrollToAndExpandNextError(minId, recordKey, fnFilter, bDontExpand);
        };
        this.GetFocusedItem = function() {
            return paneMgr.GetFocusedItemInfo();
        };
        this.SendKeyDownEvent = function(eventInfo) {
            return objBag.focusMgr.HandleKeyDown(eventInfo);
        };
        this.JumpToEntryRecord = function() {
            paneMgr.JumpToEntryRecord();
        };
        this.SelectRowRange = function(rowIdx1, rowIdx2, bAppend, optPaneId) {
            paneMgr.Select(rowIdx1, rowIdx2, null, null, bAppend, optPaneId);
        };
        this.SelectColumnRange = function(colIdx1, colIdx2, bAppend, optPaneId) {
            paneMgr.Select(null, null, colIdx1, colIdx2, bAppend, optPaneId);
        };
        this.SelectCellRange = function(rowIdx1, rowIdx2, colIdx1, colIdx2, bAppend, optPaneId) {
            paneMgr.Select(rowIdx1, rowIdx2, colIdx1, colIdx2, bAppend, optPaneId);
        };
        this.SelectRowRangeByKey = function(rowKey1, rowKey2, bAppend, optPaneId) {
            paneMgr.SelectByKey(rowKey1, rowKey2, null, null, bAppend, optPaneId);
        };
        this.SelectColumnRangeByKey = function(colKey1, colKey2, bAppend, optPaneId) {
            paneMgr.SelectByKey(null, null, colKey1, colKey2, bAppend, optPaneId);
        };
        this.SelectCellRangeByKey = function(recordKey1, recordKey2, colKey1, colKey2, bAppend, optPaneId) {
            paneMgr.SelectByKey(recordKey1, recordKey2, colKey1, colKey2, bAppend, optPaneId);
        };
        this.ChangeKeys = function(oldKey, newKey) {
            objBag.controller.ChangeKeys(oldKey, newKey);
        };
        this.GetSelectedRowRanges = function(optPaneId) {
            return paneMgr.GetOrderedSelections(optPaneId, SP.JsGrid.SelectionType.RowRange);
        };
        this.GetSelectedColumnRanges = function(optPaneId) {
            return paneMgr.GetOrderedSelections(optPaneId, SP.JsGrid.SelectionType.ColumnRange);
        };
        this.GetSelectedCellRanges = function(optPaneId) {
            return paneMgr.GetOrderedSelections(optPaneId, SP.JsGrid.SelectionType.CellRange);
        };
        this.GetSelectedRanges = function(optPaneId) {
            return paneMgr.GetOrderedSelections(optPaneId, null);
        };
        this.MarkPropUpdateInvalid = function(recordKey, fieldKey, changeKey, optErrorMsg) {
            return controller.MarkPropUpdateInvalid(recordKey, fieldKey, changeKey, optErrorMsg);
        };
        this.GetCurrentChangeKey = function() {
            return controller.GetCurrentChangeKey();
        };
        this.CreateAndSynchronizeToNewChangeKey = function() {
            var cmd = controller.CreateDataUpdateCmd();

            commandMgr.Execute(cmd, null, SP.JsGrid.CommandManager.CommandType.Explicit);
            return cmd.GetChangeKey();
        };
        this.CreateDataUpdateCmd = function(bUseCustomInitialUpdate) {
            return controller.CreateDataUpdateCmd(bUseCustomInitialUpdate);
        };
        this.IsChangeKeyApplied = function(changeKey) {
            return objBag.controller.IsChangeKeyApplied(changeKey);
        };
        this.GetChangeKeyForVersion = function(version) {
            return controller.GetChangeKeyForVersion(version);
        };
        this.TryReadPropForChangeKey = function(recordKey, fieldKey, changeKey) {
            return controller.TryReadPropForChangeKey(recordKey, fieldKey, changeKey);
        };
        this.GetUnfilteredHierarchyMap = function() {
            var hierarchyMgr = controller.GetHierarchyManager();

            if (hierarchyMgr != null) {
                var unfilteredHierarchyMgr = hierarchyMgr.GetUnfilteredHierarchyMgr();

                if (unfilteredHierarchyMgr != null) {
                    return unfilteredHierarchyMgr.GetUnfilteredHierarchyMap();
                }
            }
            return null;
        };
        this.GetHierarchyState = function(bDecompressGuidKeys) {
            var hierarchyMgr = controller.GetHierarchyManager();

            return hierarchyMgr && hierarchyMgr.GetState(bDecompressGuidKeys);
        };
        this.IsGroupingRecordKey = function(recordKey) {
            var hierarchyMgr = controller.GetHierarchyManager();

            return hierarchyMgr && hierarchyMgr.IsGroupingRecord(recordKey);
        };
        this.IsGroupingColumnKey = function(columnKey) {
            return columnKey == operationalUtil.GetFieldKey(SP.JsGrid.OperationalConstants.HierarchyMain);
        };
        this.GetSelectedRecordKeys = function(bDuplicatesAllowed) {
            return GetSelectedRecordKeys(bDuplicatesAllowed);
        };
        this.CutToClipboard = function() {
            var gridPane = objBag.selectionMgr.GetFocusedPane();

            if (gridPane != null) {
                objBag.cutcopypasteMgr.OnCut(gridPane);
            }
        };
        this.CopyToClipboard = function() {
            var gridPane = objBag.selectionMgr.GetFocusedPane();

            if (gridPane != null) {
                objBag.cutcopypasteMgr.OnCopy(gridPane);
            }
        };
        this.PasteFromClipboard = function() {
            var gridPane = objBag.selectionMgr.GetFocusedPane();

            if (gridPane != null) {
                objBag.cutcopypasteMgr.OnPaste(gridPane);
            }
        };
        this.TryRestoreFocusAfterInsertOrDeleteColumns = function(origFocus) {
            var gridPane = objBag.selectionMgr.GetFocusedPane();

            if (gridPane != null)
                gridPane.TryRestoreFocusAfterInsertOrDeleteColumns(origFocus);
        };
        this.GetUndoManager = function() {
            return commandMgr;
        };
        this.GetVisibleRecordCount = function() {
            return objBag.paneMgr.GetVisibleRecordCount();
        };
        this.GetRecordIndicatorCheckBoxColumnIndex = function() {
            return objBag.paneMgr.GetRecordIndicatorCheckBoxColumnIndex();
        };
        this.IsRecordVisibleInView = function(recordKey) {
            return posConverter.RecordKeyToViewIdx(recordKey) != null;
        };
        this.GetHierarchyQueryObject = function() {
            var mgr = objBag.jsGridParams.tableViewParams.rowViewParams.unfilteredHierarchyMgr;

            return mgr != null ? mgr.GetHierarchyQueryObject() : null;
        };
        function StopEditing() {
            objBag.paneMgr.StopEditing(false);
        }
        function GetSelectedRecordKeys(bDuplicatesAllowed) {
            var rowRanges = _this.GetSelectedRowRanges();
            var colRanges = _this.GetSelectedColumnRanges();
            var cellRanges = _this.GetSelectedCellRanges();
            var keyArray;

            if (colRanges.length != 0) {
                keyArray = tableCache.GetView();
            }
            else {
                if (bDuplicatesAllowed) {
                    keyArray = [];
                    for (var i = 0; i < rowRanges.length; i++) {
                        keyArray = keyArray.concat(rowRanges[i].keys);
                    }
                    for (var i = 0; i < cellRanges.length; i++) {
                        keyArray = keyArray.concat(cellRanges[i].rowRange.keys);
                    }
                }
                else {
                    var keys = new SP.Utilities.Set();

                    for (var i = 0; i < rowRanges.length; i++) {
                        keys.AddArray(rowRanges[i].keys);
                    }
                    for (var i = 0; i < cellRanges.length; i++) {
                        keys.AddArray(cellRanges[i].rowRange.keys);
                    }
                    keyArray = keys.ToArray();
                }
            }
            return keyArray;
        }
        function StaticInit() {
            if (!SP.JsGrid.JsGridControl._bStaticInit) {
                SP.JsGrid.Internal.Property = new SP.JsGrid.Internal.Property();
                SP.JsGrid.JsGridControl._bStaticInit = true;
            }
        }
        function GetOperationalUtility() {
            function GetFieldKey(gridOpConst) {
                return operationalConstantsFieldKeyMap[gridOpConst];
            }
            return {
                GetFieldKey: GetFieldKey,
                GetProp: function(record, gridOpConst) {
                    var fieldKey = GetFieldKey(gridOpConst);

                    return {
                        fieldKey: fieldKey,
                        prop: record.GetProp(fieldKey)
                    };
                },
                GetValue: function(record, gridOpConst) {
                    return record.GetDataValue(GetFieldKey(gridOpConst));
                }
            };
        }
        function CallAsyncFn(fnAsyncOp, fnAsyncOpComplete) {
            return SP.Internal.CallAsyncFn(fnAsyncOp, fnAsyncOpComplete, function PreIfAsync() {
                _this.Disable();
            }, function PostIfAsync() {
                _this.Enable();
            });
        }
        function DoLargeTask(totalWork, taskChunkSize, fnProcessChunk, fnComplete, taskPriority) {
            var completedWork = 0;

            if (totalWork > taskChunkSize) {
                _this.Disable();
                SP.JsGrid.AsynchronousTaskManager.RegisterTask(Task, taskPriority);
            }
            else {
                fnProcessChunk(0, totalWork);
                fnComplete();
            }
            function Task() {
                var chunkStoppingPoint = (Math.floor(completedWork / taskChunkSize) + 1) * taskChunkSize;

                completedWork = fnProcessChunk(completedWork, chunkStoppingPoint);
                if (completedWork < totalWork) {
                    return true;
                }
                else {
                    _this.Enable();
                    fnComplete();
                    return false;
                }
            }
        }
        function GetLocalizedString(resKey) {
            resKey = (resKey.charAt(0)).toLowerCase() + resKey.substr(1);
            var ov = _jsGridParams.tableViewParams.messageOverrides;

            return ov && ov[resKey] || SP.JsGrid.Res[resKey];
        }
        function FireTestEvent(testEventType) {
            if (parentNode.fireEvent) {
                switch (testEventType) {
                case TestEventType.Start:
                    parentNode.fireEvent('onbeforeupdate');
                    break;
                case TestEventType.Finish:
                    parentNode.fireEvent('onafterupdate');
                    break;
                }
            }
        }
        function SetEnabledState(bEnable, optMsg) {
            if (bEnable && disableCount == 1) {
                loadingBanner.Hide();
            }
            else if (!bEnable) {
                var txt = optMsg == null ? SP.JsGrid.Res.loadingMsg : optMsg;

                if (disableCount == 0) {
                    loadingBanner.Show(txt);
                }
                else {
                    loadingBanner.UpdateText(txt);
                }
            }
            disableCount -= bEnable ? 1 : -1;
            if (objBag.ariaMgr != null) {
                objBag.ariaMgr.EnableGrid(bEnable);
            }
            Sys.Debug.assert(disableCount >= 0);
        }
        this.GetSpCsrRenderCtx = function() {
            return spCsrRenderCtx;
        };
    };
    SP.JsGrid.JsGridControl.Parameters = function() {
        this.tableCache = null;
        this.name = null;
        this.bNotificationsEnabled = false;
        this.styleManager = SP.JsGrid.Style.MakeJsGridStyleManager();
        this.minHeaderHeight = 0;
        this.minRowHeight = 0;
        this.commandMgr = new SP.JsGrid.CommandManager(100);
        this.enabledRowHeaderAutoStates = (new SP.Utilities.Set()).AddArray([SP.JsGrid.RowHeaderAutoStyleId.Error]);
        this.bEnableDiffTracking = false;
        this.isRTL = SP.JsGrid.Utility.GetDocumentDirection() == "rtl";
        this.tableViewParams = new SP.JsGrid.JsGridControl.TableViewParameters();
    };
    SP.JsGrid.JsGridControl.TableViewParameters = function() {
        this.keyFieldName = null;
        this.columns = null;
        this.gridFieldMap = null;
        this.messageOverrides = null;
        this.operationalConstantsFieldKeyMap = null;
        this.defaultEditMode = SP.JsGrid.EditMode.ReadWriteDefer;
        this.allowedSelectionTypes = SP.JsGrid.SelectionTypeFlags.MultipleCellRanges | SP.JsGrid.SelectionTypeFlags.MultipleRowRanges | SP.JsGrid.SelectionTypeFlags.MultipleColRanges;
        this.bMovableColumns = true;
        this.bResizableColumns = true;
        this.bHidableColumns = true;
        this.bSortableColumns = true;
        this.bAutoFilterableColumns = true;
        this.bRowHeadersEnabled = true;
        this.bRecordIndicatorCheckboxesEnabled = false;
        this.bCreateFieldColumnEnabled = false;
        this.bFillControlEnabled = true;
        this.checkSelectionCheckboxHiddenRecordKeys = [];
        this.checkSelectionCheckboxDisabledRecordKeys = [];
        this.checkSelectionCheckedRecordKeys = [];
        this.bEditingEnabled = false;
        this.bNewRowEnabled = false;
        this.splitterPos = 400;
        this.paneLayout = SP.JsGrid.PaneLayout.GridOnly;
        this.ganttParams = null;
        this.pivotedGridParams = null;
        this.rowViewParams = new SP.JsGrid.JsGridControl.RowViewParameters();
    };
    SP.JsGrid.JsGridControl.RowViewParameters = function() {
        this.view = null;
        this.minimalInfo = null;
        this.topViewIdx = 0;
        this.hierarchyMode = SP.JsGrid.HierarchyMode.None;
        this.groupingLevel = null;
        this.groupingRecordKeyPrefix;
        this.autoFilterState = null;
        this.unfilteredHierarchyMgr = null;
        this.hierarchyDelayLoadKeys = null;
        this.hierarchyState = null;
        this.sortState = null;
        this.filterState = null;
        this.autoFilterEntries = null;
        this.filteredDescCounts = null;
    };
    SP.JsGrid.JsGridControl.PivotedGridParameters = function() {
        this.columns = null;
    };
    SP.JsGrid.JsGridControl.GanttParameters = function() {
        this.dateRange = null;
        this.ganttBarStyles = null;
        this.ganttZoomLevel = 3;
        this.fnRenderGanttRow = null;
        this.fnGetGanttBarDate = null;
        this.fnGetGanttBarStyleIds = null;
        this.fnGetPredecessors = null;
        this.workDayStart = _spRegionalSettings.workDayStart;
        this.workDayEnd = _spRegionalSettings.workDayEnd;
        this.fieldKeyRedrawFilter = null;
    };
    SP.JsGrid.Internal.GetFieldsFromUpdateArray = function(updateArgArray, jsGridObj) {
        var r = {};

        for (var i = 0; i < updateArgArray; i++) {
            if (jsGridObj.IsChangeKeyApplied(updateArgArray[i].changeKey)) {
                r[updateArgArray[i].fieldKey] = 0;
            }
        }
        return r;
    };
    SP.JsGrid.Internal.EntryRecordManager = function(objBag) {
        var _entryRecordKeyPrefix = "NewRowKey";
        var _this = this;
        var _entryRecordKeys = new SP.Utilities.Set();
        var _entryRecords = [];
        var _entryRecordUpdates = {};
        var _entryRecordKeyIdxCache = {};
        var _committedRecordKeys = new SP.Utilities.Set();
        var _lastEntryKey;
        var _bRegisteredEvent = false;
        var _bCurrentlyCommitting = false;
        var _curEntryRecordIdx = 0;
        var _bReadyToCommit = false;
        var _commitErrorId = null;
        var _bClearingUncommittedChanges = false;
        var _commitAttemptCompleteNotifiers = [];

        function GetNextEntryRecordKey() {
            return _entryRecordKeyPrefix + _curEntryRecordIdx++;
        }
        function CreateEntryRecord(bScrollIntoView, optRec) {
            var rec = optRec == null ? objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.CreateEntryRecord) : optRec;

            if (rec.recordKey == null) {
                rec.recordKey = GetNextEntryRecordKey();
            }
            Sys.Debug.assert(rec.key() == rec.recordKey);
            rec.properties[objBag.jsGridParams.tableViewParams.keyFieldName].dataValue = rec.recordKey;
            _entryRecords.push(rec);
            _entryRecordKeyIdxCache[rec.key()] = _entryRecords.length - 1;
            _entryRecordKeys.Add(rec.key());
            rec.bIsNewRow = true;
            rec.newRowNumber = _curEntryRecordIdx;
            objBag.paneMgr.NotifyCreateEntryRow(_entryRecords.length - 1, bScrollIntoView);
            objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnEntryRecordAdded, new SP.JsGrid.EventArgs.OnEntryRecordAdded(rec.key()));
            return rec;
        }
        function IsEntryRecordDirty(recordKey) {
            var changeKey = objBag.controller.GetEarliestChangeKeyForRecord(recordKey);

            return changeKey != null && objBag.controller.IsChangeKeyApplied(changeKey);
        }
        function RemoveEntryRow(index, bDoNotUpdatePane) {
            if (objBag.editUtil.IsNewRowEnabled() && !bDoNotUpdatePane) {
                objBag.paneMgr.NotifyRemoveEntryRow(index);
            }
            var record = _entryRecords[index];
            var removedKey = record.key();

            _entryRecords.splice(index, 1);
            _entryRecordKeys.Remove(removedKey);
            _entryRecordKeyIdxCache[removedKey] = null;
            for (var index = removedKey + 1; _entryRecordKeyIdxCache[index] != null; ++index) {
                _entryRecordKeyIdxCache[index] = _entryRecordKeyIdxCache[index] - 1;
            }
            delete _entryRecordUpdates[removedKey];
            objBag.controller.ClearAllPropChangesForRecord(removedKey);
            return removedKey;
        }
        function RemoveLastEntryRecord() {
            var r = null;

            if (_entryRecords.length > 1) {
                r = RemoveEntryRow(_entryRecords.length - 1);
            }
            return r;
        }
        function ClearUncommittedEntryRecords(bDoNotUpdatePane, recordKey) {
            _bClearingUncommittedChanges = true;
            objBag.paneMgr.StopEditing(true);
            objBag.paneMgr.UnbindEditing(function() {
                if (recordKey == null) {
                    while (_entryRecords.length > 0) {
                        RemoveEntryRow(0, bDoNotUpdatePane);
                    }
                }
                else {
                    for (var i = 0; i < _entryRecords.length; i++) {
                        if (_entryRecords[i].key() == recordKey) {
                            RemoveEntryRow(i, bDoNotUpdatePane);
                            break;
                        }
                    }
                }
                _bClearingUncommittedChanges = false;
            });
        }
        function CreateEntryRecordWithChangeKey(bScrollIntoView, changeKey, optRec) {
            var rec = CreateEntryRecord(bScrollIntoView, optRec);

            objBag.controller.AttachUndoActionToChangeKey(changeKey, function() {
                var removedKey = RemoveLastEntryRecord();

                Sys.Debug.assert(removedKey == null || rec.key() == removedKey, "either the record we're removing should have been committed or it should be the record we added.");
            });
        }
        function OnEntryRecordPropertyUpdated(propUpdateEventArgs) {
            if (_this.GetLastEntryKey() == propUpdateEventArgs.recordKey) {
                CreateEntryRecordWithChangeKey(false, propUpdateEventArgs.changeKey);
            }
            if (propUpdateEventArgs.validationState == SP.JsGrid.ValidationState.Valid) {
                if (_entryRecordUpdates[propUpdateEventArgs.recordKey] == null) {
                    _entryRecordUpdates[propUpdateEventArgs.recordKey] = [];
                }
                _entryRecordUpdates[propUpdateEventArgs.recordKey].push(propUpdateEventArgs);
                if (propUpdateEventArgs.recordKey == _entryRecords[0].key()) {
                    ForceReadyToCommit();
                }
            }
            var focusInfo = objBag.paneMgr.GetFocusedItemInfo();

            if (focusInfo == null || focusInfo.recordKey != propUpdateEventArgs.recordKey) {
                TryCommitFirstEntryRecord();
            }
        }
        function ForceReadyToCommit() {
            _bReadyToCommit = true;
            if (_commitErrorId != null) {
                var bDeleteSucessful = objBag.errorMgr.ClearRowError(_entryRecords[0].key(), _commitErrorId);

                Sys.Debug.assert(bDeleteSucessful);
                _commitErrorId = null;
            }
        }
        function OnRowFocusChanged(rowFocusChangeArgs) {
            if (_entryRecords.length > 0 && rowFocusChangeArgs.oldRecordKey == _entryRecords[0].key()) {
                TryCommitFirstEntryRecord();
            }
        }
        function OnRecordFailedCommit(msg, optCommitErrorId) {
            objBag.commandMgr.Unlock();
            _bCurrentlyCommitting = false;
            _bReadyToCommit = false;
            if (optCommitErrorId != null) {
                _commitErrorId = optCommitErrorId;
            }
            else {
                _commitErrorId = objBag.errorMgr.SetRowError(_entryRecords[0].key(), msg);
            }
        }
        function OnRecordSuceededCommit(optNewKey, localizedDefaults, unlocalizedDefaults) {
            objBag.commandMgr.Unlock();
            _bCurrentlyCommitting = false;
            return Commit(optNewKey, localizedDefaults, unlocalizedDefaults);
        }
        function Commit(optNewKey, localizedDefaults, unlocalizedDefaults) {
            var rec = _entryRecords[0];
            var origKey = rec.key();
            var curUpdatedFields = SP.JsGrid.Internal.GetFieldsFromUpdateArray(_entryRecordUpdates[origKey], objBag.jsGridObj);

            delete _entryRecordUpdates[origKey];
            _entryRecordKeys.Remove(origKey);
            _committedRecordKeys.Add(origKey);
            if (optNewKey != null && optNewKey != origKey) {
                objBag.controller.ChangeKeys(origKey, optNewKey);
                rec.recordKey = optNewKey;
                rec.properties[objBag.jsGridParams.tableViewParams.keyFieldName].dataValue = rec.recordKey;
            }
            Sys.Debug.assert((rec.key()).startsWith == null || !(rec.key()).startsWith(_entryRecordKeyPrefix));
            _entryRecords.shift();
            _entryRecordKeyIdxCache = {};
            delete rec.bIsNewRow;
            for (var fieldKey in localizedDefaults) {
                if (!(fieldKey in curUpdatedFields)) {
                    rec.AddFieldValue(fieldKey, {
                        hasLocalized: true,
                        localized: localizedDefaults[fieldKey]
                    });
                }
            }
            for (var fieldKey in unlocalizedDefaults) {
                if (!(fieldKey in curUpdatedFields)) {
                    rec.AddFieldValue(fieldKey, {
                        hasData: true,
                        data: unlocalizedDefaults[fieldKey]
                    });
                }
            }
            var changeKey = objBag.controller.GetEarliestChangeKeyForRecord(rec.key());

            Sys.Debug.assert(objBag.controller.IsChangeKeyApplied(changeKey));
            if (_entryRecords.length == 0) {
                CreateEntryRecordWithChangeKey(false, changeKey);
            }
            var afterRecordKey = objBag.paneMgr.GetLastRecordKey();
            var visualAfterRecordKey = null;
            var unfilteredHierarchyMgr = objBag.jsGridParams.tableViewParams.rowViewParams.unfilteredHierarchyMgr;

            if (unfilteredHierarchyMgr != null) {
                var unfilteredARKey = unfilteredHierarchyMgr.GetLastNodeKey();

                if (unfilteredARKey != afterRecordKey) {
                    visualAfterRecordKey = afterRecordKey;
                    afterRecordKey = unfilteredARKey;
                }
            }
            objBag.controller.InsertRecordAfter(afterRecordKey, rec, changeKey, false, true, visualAfterRecordKey, visualAfterRecordKey != null);
            objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnEntryRecordCommitted, new SP.JsGrid.EventArgs.OnEntryRecordCommitted(origKey, rec.key(), changeKey));
            objBag.paneMgr.NotifyChangedRowByKey(rec.key());
            TryCommitFirstEntryRecord();
            return changeKey;
            function GetUpdatedFields(updateArgArray) {
                var r = {};

                for (var i = 0; i < updateArgArray; i++) {
                    if (objBag.controller.IsChangeKeyApplied(updateArgArray[i].changeKey)) {
                        r[updateArgArray[i].fieldKey] = 0;
                    }
                }
                return r;
            }
        }
        this.TryCommitFirstEntryRecords = function(fnTryCommitComplete, bForceCommitAttempt) {
            if (fnTryCommitComplete != null) {
                _commitAttemptCompleteNotifiers.push(fnTryCommitComplete);
            }
            if (bForceCommitAttempt) {
                ForceReadyToCommit();
            }
            TryCommitFirstEntryRecord();
        };
        function TryCommitFirstEntryRecord() {
            var bTriedToSubmit = false;

            if (!_bCurrentlyCommitting && _bReadyToCommit && _entryRecords.length > 0 && _entryRecords[0].key() in _entryRecordUpdates && !_bClearingUncommittedChanges) {
                if (IsEntryRecordDirty(_entryRecords[0].key())) {
                    bTriedToSubmit = (_bCurrentlyCommitting = true);
                    objBag.commandMgr.Lock();
                    setTimeout(function() {
                        objBag.pendingChangeMgr.WaitForPendingUpdates(TrySubmit);
                    }, 0);
                }
            }
            if (!bTriedToSubmit && !_bCurrentlyCommitting) {
                TryNotifyCommitComplete();
            }
            function TrySubmit() {
                if (!objBag.errorMgr.AnyErrorsInRow(_entryRecords[0].key())) {
                    objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.TryInsertEntryRecord, _entryRecords[0], _entryRecordUpdates[_entryRecords[0].key()], OnRecordSuceededCommit, OnRecordFailedCommit);
                }
                else {
                    _bCurrentlyCommitting = false;
                    _bReadyToCommit = false;
                    objBag.commandMgr.Unlock();
                    TryNotifyCommitComplete();
                }
            }
        }
        function TryNotifyCommitComplete() {
            if (_commitAttemptCompleteNotifiers.length > 0) {
                var commitSucceeded = !_this.AnyUncomittedEntryRecords();

                while (_commitAttemptCompleteNotifiers.length > 0) {
                    _commitAttemptCompleteNotifiers.shift()(commitSucceeded);
                }
            }
        }
        this.CreateEntryRows = function(numberOfRows, bDoNotScrollIntoView, changeKey) {
            for (var i = 0; i < numberOfRows; i++) {
                CreateEntryRecordWithChangeKey(!bDoNotScrollIntoView, changeKey);
            }
        };
        this.AnyUncomittedEntryRecords = function() {
            return _entryRecords.length > 1 || _entryRecords.length == 1 && IsEntryRecordDirty(_entryRecords[0].key());
        };
        this.ClearUncommittedEntryRecords = function() {
            ClearUncommittedEntryRecords(false, null);
        };
        this.ClearEntryRecord = function(recordKey) {
            ClearUncommittedEntryRecords(false, recordKey);
        };
        this.EnsureLastEntryRowExists = function() {
            if (objBag.editUtil.IsNewRowEnabled() && _entryRecords.length == 0) {
                CreateEntryRecord(false);
                if (!_bRegisteredEvent) {
                    objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnEntryRecordPropertyChanged, OnEntryRecordPropertyUpdated);
                    objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnRowFocusChanged, OnRowFocusChanged);
                    _bRegisteredEvent = true;
                }
            }
        };
        this.AddColumn = function(columnKey, gridField) {
            if (_entryRecords.length > 0) {
                var data = {
                    isProp: true,
                    prop: SP.JsGrid.Property.MakeProperty(undefined, undefined, gridField.hasDataValue, gridField.hasLocalizedValue, gridField.GetPropType())
                };

                _entryRecords[0].AddFieldValue(columnKey, data);
            }
        };
        this.NotifyTableViewChangeCompleted = function() {
            _bReadyToCommit = false;
            this.EnsureLastEntryRowExists();
        };
        this.NotifyTableViewCleared = function() {
            if (_entryRecords.length > 0) {
                ClearUncommittedEntryRecords(true, null);
                if (_bRegisteredEvent) {
                    objBag.eventMgr.DetachEvent(SP.JsGrid.EventType.OnEntryRecordPropertyChanged, OnEntryRecordPropertyUpdated);
                    objBag.eventMgr.DetachEvent(SP.JsGrid.EventType.OnRowFocusChanged, OnRowFocusChanged);
                    _bRegisteredEvent = false;
                }
            }
        };
        this.GetEntryRecords = function() {
            return _entryRecords;
        };
        this.IsEntryRecordKey = function(key) {
            return _entryRecordKeys.Contains(key);
        };
        this.GetLastEntryKey = function() {
            Sys.Debug.assert(_entryRecords.length > 0);
            return objBag != null ? _entryRecords[_entryRecords.length - 1].key() : null;
        };
        this.GetEntryRecordIdx = function(key) {
            if (_entryRecordKeyIdxCache[key] != null) {
                return _entryRecordKeyIdxCache[key];
            }
            var r = SP.Internal.JS.FindInArray(_entryRecords, function(item) {
                return key == item.key();
            });

            Sys.Debug.assert(r != null);
            _entryRecordKeyIdxCache[key] = r;
            return r;
        };
        this.GetEntryRecord = function(key) {
            return _entryRecords[this.GetEntryRecordIdx(key)];
        };
    };
    SP.JsGrid.Internal.ProvisionalRecordManager = function(objBag) {
        var _provisionalRecordKeyPrefix = "NewInsertedKey";
        var _provisionalRecords = {};
        var _provisionalRecordUpdates = {};
        var _curProvisionalRecordIdx = 0;
        var _bRegisteredEvents = false;

        function GetNextProvisionalRecordKey() {
            return _provisionalRecordKeyPrefix + _curProvisionalRecordIdx++;
        }
        function EnsureEventHandlers() {
            if (!_bRegisteredEvents) {
                objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnPropertyChanged, OnProvisionalRecordPropertyUpdated);
                _bRegisteredEvents = true;
            }
        }
        this.AnyUncomittedProvisionalRecords = function() {
            return !SP.Internal.JS.IsAssocArrayEmpty(_provisionalRecords);
        };
        this.IsProvisionalRecordKey = function(key) {
            return key in _provisionalRecords;
        };
        this.InsertProvisionalRecordBefore = function(beforeRecordKey, newRecord, initialValues) {
            return InsertionProvisionalRecord(beforeRecordKey, newRecord, objBag.jsGridObj.InsertRecordBefore, initialValues);
        };
        this.InsertProvisionalRecordAfter = function(afterRecordKey, newRecord, initialValues) {
            return InsertionProvisionalRecord(afterRecordKey, newRecord, objBag.jsGridObj.InsertRecordAfter, initialValues);
        };
        function InsertionProvisionalRecord(adjacentRecordKey, newRecord, fnGridObjInserter, initialValues) {
            EnsureEventHandlers();
            newRecord.recordKey = GetNextProvisionalRecordKey();
            _provisionalRecords[newRecord.key()] = newRecord;
            var changeKey = fnGridObjInserter(adjacentRecordKey, newRecord, null, true);

            PopulatePropUpdates(newRecord.key(), initialValues, changeKey);
            objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.TryCreateProvisionalRecord, newRecord, _provisionalRecordUpdates[newRecord.key()], function(args) {
                OnSuccess.apply(this, [newRecord.key()].concat(args));
            }, OnFailed);
            return changeKey;
            function PopulatePropUpdates(recordKey, initialValues, changeKey) {
                _provisionalRecordUpdates[recordKey] = [];
                if (initialValues != null) {
                    for (var i = 0; i < initialValues.length; i++) {
                        _provisionalRecordUpdates[recordKey].push(new SP.JsGrid.EventArgs.PropertyChanged(recordKey, initialValues[i].fieldKey, null, new SP.JsGrid.Internal.PropertyUpdate(initialValues[i].propertyValue.hasDataValue ? initialValues[i].propertyValue.dataValue : SP.JsGrid.EmptyValue, initialValues[i].propertyValue.hasLocalizedValue ? initialValues[i].propertyValue.localizedValue : SP.JsGrid.EmptyValue), null, changeKey, SP.JsGrid.ValidationState.Pending));
                    }
                }
            }
        }
        function OnProvisionalRecordPropertyUpdated(propChangedArgs) {
            var recordKey = propChangedArgs.recordKey;

            if (_provisionalRecords[recordKey] == null) {
                return;
            }
            if (_provisionalRecordUpdates[recordKey] == null) {
                _provisionalRecordUpdates[recordKey] = [];
            }
            _provisionalRecordUpdates[recordKey].push(propChangedArgs);
            objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.TryCreateProvisionalRecord, _provisionalRecords[recordKey], _provisionalRecordUpdates[recordKey], function(args) {
                OnSuccess.apply(this, [recordKey].concat(args));
            }, OnFailed);
        }
        function OnSuccess(origKey, newRecordKey, localizedDefaults, unlocalizedDefaults) {
            var rec = _provisionalRecords[origKey];
            var curUpdatedFields = SP.JsGrid.Internal.GetFieldsFromUpdateArray(_provisionalRecordUpdates[origKey], objBag.jsGridObj);

            delete _provisionalRecords[origKey];
            delete _provisionalRecordUpdates[origKey];
            if (newRecordKey != null && newRecordKey != origKey) {
                objBag.jsGridObj.ChangeKeys(origKey, newRecordKey);
                rec.recordKey = newRecordKey;
                rec.properties["ID"].dataValue = rec.recordKey;
            }
            for (var fieldKey in localizedDefaults) {
                if (!(fieldKey in curUpdatedFields)) {
                    rec.AddFieldValue(fieldKey, {
                        hasLocalized: true,
                        localized: localizedDefaults[fieldKey]
                    });
                }
            }
            for (var fieldKey in unlocalizedDefaults) {
                if (!(fieldKey in curUpdatedFields)) {
                    rec.AddFieldValue(fieldKey, {
                        hasData: true,
                        data: unlocalizedDefaults[fieldKey]
                    });
                }
            }
            objBag.paneMgr.NotifyChangedRowByKey(rec.key());
        }
        function OnFailed() {
        }
    };
    SP.JsGrid.Internal.PaneManager = function(jsGridElementId, objBag, fnGetLocStr, parentNode, minHeaderHeight, minRowHeight, fnIsGridEnabled) {
        var CONST_minPaneWidth = SP.Internal.ScrollBar.GetMinScrollBarLength();
        var CONST_minControlWidth = CONST_minPaneWidth * 2 + SP.JsGrid.Internal.SplitterWidth + SP.Internal.ScrollBar.GetSystemScrollBarThickness();
        var CONST_minControlHeight = SP.Internal.ScrollBar.GetMinScrollBarLength() + SP.Internal.ScrollBar.GetSystemScrollBarThickness();
        var leftPaneParent, rightPaneParent, vertScrollBarContainer, borderElement, visualSelectionHtmlElements;
        var vertScrollBar;
        var rowData = [];
        var recordCount = 0;
        var headerHeight;
        var rowHeight;
        var panes, gridPane, pivotedGridPane, ganttPane, rightPane;
        var keyToViewIdxMap = {};
        var _this = this;
        var bHandlersSet = false;
        var eventSinks;
        var bNewRowEnabled;
        var lastParentSize = {
            height: parentNode.offsetHeight,
            width: parentNode.offsetWidth
        };
        var bHorizontalScrollBarVisible = true;
        var selectionMgr = objBag.selectionMgr = new SP.JsGrid.Internal.SelectionManager(function(eventArgs) {
            eventSinks.OnFocusedCellChanged != null ? eventSinks.OnFocusedCellChanged(eventArgs) : 0;
        });
        var changeHighlightMgr = new SP.JsGrid.Internal.ChangeHighlightManager();
        var editMgr = new SP.JsGrid.Internal.EditManager(objBag, function(propertyUpdates, changeName, optChangeKey, optfnOnChangeKeyAvailable) {
            eventSinks.OnPropertiesChanged(propertyUpdates, changeName, optChangeKey, optfnOnChangeKeyAvailable);
        }, GetCellValue);
        var cutcopypasteMgr = objBag.cutcopypasteMgr = new SP.JsGrid.Internal.CutCopyPasteManager(objBag, fnGetLocStr);
        var fillDownMgr = new SP.JsGrid.Internal.FillDownManager(objBag.intDelegateMgr, objBag.styleMgr);
        var cleared = true;
        var posConverter;
        var operationalUtil;
        var paneLayout;
        var splitterPos;
        var gridFieldMap;
        var mostRecentMouseDownCoords = null;
        var splitterBar = new SP.JsGrid.SplitterBar(objBag, CONST_minPaneWidth, function() {
            return _this.GetSplitterPosition();
        }, GetControlWidth, function(newPos) {
            return _this.SetSplitterPosition(newPos);
        });
        var bResizingScrollbar = false, bRefreshingAllRows = false, bDeletingOrInsertingRows = false;
        var focusMgr = objBag.focusMgr = new SP.JsGrid.Internal.FocusManager(jsGridElementId, objBag, parentNode, fnGetLocStr, fnIsGridEnabled, IsGridVisible, selectionMgr, editMgr, GetCellValue, RetryErrorRows, ScrollIntoViewVertically);
        var touchMgr;

        Init();
        this.SetEventSinks = function(pEventSinks) {
            eventSinks = pEventSinks;
        };
        this.Dispose = function() {
            if (panes != null) {
                cutcopypasteMgr.CancelMode();
                editMgr.StopEditing(true);
                editMgr.Unbind(function() {
                    UpdatePanes(0, rowData.length, 0, 0, true);
                    panes.each('Dispose');
                    vertScrollBar.Dispose();
                    $removeHandler(parentNode, 'mousedown', OnMouseDown);
                    $removeHandler(window, 'focus', OnFocus_Window);
                    $removeHandler(window, 'resize', OnResize_Window);
                    try {
                        if (typeof SP.UI.Workspace.add_resized == 'function') {
                            SP.UI.Workspace.remove_resized(HandleParentResize);
                        }
                    }
                    catch (e) { }
                    if (!objBag.spGrid)
                        SP.Internal.DomElement.RemoveMouseWheelHandler(parentNode, OnMouseWheel);
                    if (splitterBar != null) {
                        splitterBar.Dispose();
                        splitterBar = null;
                    }
                    FinalizeDispose();
                });
            }
            else {
                FinalizeDispose();
            }
            function FinalizeDispose() {
                vertScrollBarContainer = (loadingBanner = (leftPaneParent = (rightPaneParent = (parentNode = (borderElement = null)))));
                editMgr.Dispose();
                focusMgr.Dispose();
                if (touchMgr != null) {
                    touchMgr.Dispose();
                }
            }
        };
        this.ClearView = function() {
            cleared = true;
            objBag.entryRecordMgr.NotifyTableViewCleared();
            editMgr.Unbind();
            selectionMgr.Clear();
            cutcopypasteMgr.CancelMode();
            this.RefreshAllRows(0);
            if (panes != null)
                panes.each('ClearView');
        };
        this.NotifyCreateEntryRow = function(entryRowIdx, bScrollIntoView) {
            if (posConverter != null) {
                var newRowIdx = entryRowIdx + posConverter.GetViewRecordCount();
                var newRowRelIdx = posConverter.ViewIdxToRelViewIdx(newRowIdx);

                UpdateRecordCount(1);
                if (vertScrollBar.GetItemDisplayCapacity() > newRowRelIdx) {
                    UpdatePanes(0, 0, newRowRelIdx, 1, true);
                }
                else {
                    if (bScrollIntoView) {
                        ScrollIntoViewVertically(newRowIdx);
                    }
                }
            }
        };
        this.NotifyRemoveEntryRow = function(entryRowIdx) {
            if (posConverter != null) {
                this.NotifyDeleteRows(entryRowIdx + posConverter.GetViewRecordCount(), 1);
            }
        };
        this.GetLastRecordKey = function() {
            return posConverter != null ? posConverter.GetLastRecordKey() : null;
        };
        this.ChangeKeys = function(oldKey, newKey) {
            panes.each('ChangeKeys', oldKey, newKey);
            if (oldKey in keyToViewIdxMap) {
                keyToViewIdxMap[newKey] = keyToViewIdxMap[oldKey];
                delete keyToViewIdxMap[oldKey];
            }
        };
        this.GetVirtualRowCount = function() {
            return (gridPane.GetGridPaneConverter()).GetVirtualRowCount();
        };
        this.GetVisibleRecordCount = function() {
            return Math.min(recordCount - vertScrollBar.GetTopItemIdx(), vertScrollBar.GetItemDisplayCapacity());
        };
        this.GetPartialRecordMap = function(gridPaneRowRange, fnOnFinished) {
            var gridPaneConverter = gridPane.GetGridPaneConverter();
            var partialRecordMap;

            objBag.intDelegateMgr.Apply(SP.JsGrid.Internal.DelegateType.CallAsyncFn, function AsyncOp(fnAsyncOpComplete) {
                return partialRecordMap = gridPaneConverter.GetRecordsInvolved(gridPaneRowRange.begin, gridPaneRowRange.Size(), function(rm) {
                    partialRecordMap = rm;
                    fnAsyncOpComplete();
                });
            }, function AsyncOpComplete() {
                fnOnFinished(partialRecordMap);
            });
        };
        this.GetRecordMap = function(fnOnFinished) {
            var gridPaneConverter = gridPane.GetGridPaneConverter();
            var gridPaneRowRange = new SP.Utilities.Range(0, gridPaneConverter.GetVirtualRowCount() - 1);

            _this.GetPartialRecordMap(gridPaneRowRange, fnOnFinished);
        };
        this.GetGridPaneRowRange = function() {
            return new SP.Utilities.Range(0, (gridPane.GetGridPaneConverter()).GetVirtualRowCount() - 1);
        };
        this.AddColumn = function(fieldInfo) {
            var cols = gridPane.GetAllColumns();
            var idx = cols.GetColumnPosition('JSGrid_NewColumn');

            cols.InsertColumnAt(idx, fieldInfo);
        };
        this.GetAllDataJson = function(fnOnFinished, optFnGetCellStyleID) {
            var rowChunkSize = 128;

            objBag.jsGridObj.Disable();
            var gridPaneConverter = gridPane.GetGridPaneConverter();
            var gridPaneRowRange = new SP.Utilities.Range(0, gridPaneConverter.GetVirtualRowCount() - 1);
            var gridPaneColRange = new SP.Utilities.Range(0, gridPaneConverter.GetVirtualColumnCount() - 1);
            var pivotedGridPaneConverter = pivotedGridPane != null ? pivotedGridPane.GetGridPaneConverter() : null;
            var pivotedGridPaneRowMultiple = pivotedGridPane != null ? pivotedGridPaneConverter.GetRowMultiple() : 0;
            var pivotedGridPaneColRange = pivotedGridPane != null ? new SP.Utilities.Range(0, pivotedGridPaneConverter.GetVirtualColumnCount() - 1) : null;

            function ConvertColumnsToColumnNamesArray(columnInfoCollection) {
                var columns = columnInfoCollection.GetColumnArray(true);
                var r = [];

                for (var i = 0; i < columns.length; ++i) {
                    r.push((columnInfoCollection.GetColumnByKey(columns[i].columnKey)).name);
                }
                return r;
            }
            var gridData = {
                gridPaneData: null,
                gridPaneColumns: null,
                gridPaneStyleData: {
                    cellStyleData: []
                },
                pivotedGridPaneData: null,
                pivotedGridPaneColumns: null,
                pivotedGridPaneStyleData: {
                    cellStyleData: []
                }
            };
            var serializedGridPaneMatrices = [];
            var gridPaneHeight = 0;
            var gridPaneWidth = 0;
            var serializedPivotedGridPaneMatrices = [];
            var pivotedGridPaneHeight = 0;
            var pivotedGridPaneWidth = 0;
            var columns = gridPane.GetAllColumns();
            var columnArray = columns.GetColumnArray();

            gridData.gridPaneColumns = ConvertColumnsToColumnNamesArray(columns);
            if (pivotedGridPane != null) {
                gridData.pivotedGridPaneColumns = ConvertColumnsToColumnNamesArray(pivotedGridPane.GetAllColumns());
            }
            function GetDataJson(rowRange) {
                var thisRowRange = rowRange;
                var nextRowRange = null;

                if (rowRange.end - rowRange.begin + 1 > rowChunkSize) {
                    thisRowRange = new SP.Utilities.Range(rowRange.begin, rowRange.begin + rowChunkSize - 1);
                    nextRowRange = new SP.Utilities.Range(rowRange.begin + rowChunkSize, rowRange.end);
                }
                _this.GetPartialRecordMap(thisRowRange, function(recordMap) {
                    var gridPaneData = gridPane.GetData(recordMap, thisRowRange, gridPaneColRange);

                    if (optFnGetCellStyleID != null) {
                        for (var recordKey in recordMap) {
                            var rowIdx = objBag.paneMgr.RecordKeyToViewIdx(recordKey);
                            var record = recordMap[recordKey];

                            for (var colIdx = 0; colIdx < columnArray.length; ++colIdx) {
                                var columnKey = columnArray[colIdx].columnKey;
                                var styleID = optFnGetCellStyleID(record, columnKey);

                                if (styleID != null) {
                                    gridData.gridPaneStyleData.cellStyleData.push({
                                        matrixRow: rowIdx,
                                        matrixColumn: colIdx,
                                        styleText: styleID
                                    });
                                }
                            }
                        }
                    }
                    var serializedGridPaneChunkMatrix = Sys.Serialization.JavaScriptSerializer.serialize(gridPaneData.matrix);

                    serializedGridPaneMatrices.push(serializedGridPaneChunkMatrix.substr(1, serializedGridPaneChunkMatrix.length - 2));
                    gridPaneHeight += gridPaneData.height;
                    gridPaneWidth = gridPaneData.width;
                    var pivotedGridPaneData = null;

                    if (pivotedGridPane != null) {
                        var pivotedGridPaneRowRange = new SP.Utilities.Range(thisRowRange.begin * pivotedGridPaneRowMultiple, thisRowRange.end * pivotedGridPaneRowMultiple + pivotedGridPaneRowMultiple - 1);

                        pivotedGridPaneData = pivotedGridPane.GetData(recordMap, pivotedGridPaneRowRange, pivotedGridPaneColRange);
                        var serializedPivotedGridPaneChunkMatrix = Sys.Serialization.JavaScriptSerializer.serialize(pivotedGridPaneData.matrix);

                        serializedPivotedGridPaneMatrices.push(serializedPivotedGridPaneChunkMatrix.substr(1, serializedPivotedGridPaneChunkMatrix.length - 2));
                        pivotedGridPaneHeight += pivotedGridPaneData.height;
                        pivotedGridPaneWidth = pivotedGridPaneData.width;
                    }
                    if (nextRowRange != null) {
                        setTimeout(function() {
                            GetDataJson(nextRowRange);
                        }, 0);
                    }
                    else {
                        setTimeout(function() {
                            var serializedGridData = ["{", "\"gridPaneData\":{\"matrix\":", "[", serializedGridPaneMatrices.join(','), "]", ",\"height\":", gridPaneHeight, ",\"width\":", gridPaneWidth, "},", "\"gridPaneColumns\":", Sys.Serialization.JavaScriptSerializer.serialize(gridData.gridPaneColumns), ",", "\"gridPaneStyleData\":", Sys.Serialization.JavaScriptSerializer.serialize(gridData.gridPaneStyleData), ",", "\"pivotedGridPaneData\":", pivotedGridPane != null ? ["{\"matrix\":", "[", serializedPivotedGridPaneMatrices.join(','), "]", ",\"height\":", pivotedGridPaneHeight, ",\"width\":", pivotedGridPaneWidth, "}"].join('') : "null", ",", "\"pivotedGridPaneColumns\":", pivotedGridPane != null ? Sys.Serialization.JavaScriptSerializer.serialize(gridData.pivotedGridPaneColumns) : "null", ",", "\"pivotedGridPaneStyleData\":", Sys.Serialization.JavaScriptSerializer.serialize(gridData.pivotedGridPaneStyleData), ",", "\"pivotedGridPaneRowMultiple\":", pivotedGridPaneRowMultiple, "}"].join('');

                            objBag.jsGridObj.Enable();
                            setTimeout(function() {
                                fnOnFinished(serializedGridData);
                            }, 0);
                        }, 0);
                    }
                });
            }
            GetDataJson(gridPaneRowRange);
        };
        this.SetView = function(pPosConverter, pColumns, pgridFieldMap, topViewIdx, pOperationalUtil, pSplitterPos, fnGetGridRowStyleId, allowedSelectionTypes, bMovableColumns, bResizableColumns, bHidableColumns, bSortableColumns, bAutoFilterableColumns, bRowHeadersEnabled, pPaneLayout, ganttParams, pivotedGridParams, bRecordIndicatorCheckboxes, sortState) {
            lastParentSize = {
                height: parentNode.offsetHeight,
                width: parentNode.offsetWidth
            };
            if (parentNode.offsetHeight == 0 && parentNode.offsetWidth == 0) {
                lastParentSize = {
                    height: parentNode.clientHeight,
                    width: parentNode.clientWidth
                };
            }
            cleared = false;
            posConverter = pPosConverter;
            operationalUtil = pOperationalUtil;
            paneLayout = pPaneLayout;
            gridFieldMap = pgridFieldMap;
            splitterPos = pSplitterPos;
            bNewRowEnabled = objBag.editUtil.IsNewRowEnabled();
            posConverter.SetPaneMgrObj(_this);
            posConverter.SetScrollBarObj(vertScrollBar);
            selectionMgr.SetAllowedSelectionTypes(allowedSelectionTypes);
            cutcopypasteMgr.CancelMode();
            Sys.Debug.assert(paneLayout == SP.JsGrid.PaneLayout.GridOnly || paneLayout == SP.JsGrid.PaneLayout.GridAndGantt && ganttParams != null || paneLayout == SP.JsGrid.PaneLayout.GridAndPivotedGrid && pivotedGridParams != null);
            if (gridPane == null) {
                CreateBorderHtmlElements();
                CreateSelectionBorderHtmlElements();
                CreateLeftPaneHtmlElements();
                var paneSize = new PaneSize(leftPaneParent);

                gridPane = new SP.JsGrid.Internal.GridPane(leftPaneParent, objBag, ScrollIntoViewVertically, ScrollVerticallyByTouch, paneLayout == SP.JsGrid.PaneLayout.GridOnly ? OnHorizontalGridPaneScrollBarVisibilityChange : null, objBag.commandMgr, selectionMgr, changeHighlightMgr, editMgr, cutcopypasteMgr, fillDownMgr, paneSize, GetCellValue, fnGetLocStr, RetryErrorRows, visualSelectionHtmlElements);
                gridPane.paneSize = paneSize;
                panes = [gridPane];
                panes.each = ArrayEach;
                touchMgr.RegisterTouchableAction("left", {
                    element: leftPaneParent,
                    control: gridPane
                });
            }
            else {
                borderElement.style.display = 'none';
            }
            if (ganttPane != null && paneLayout != SP.JsGrid.PaneLayout.GridAndGantt || pivotedGridPane != null && paneLayout != SP.JsGrid.PaneLayout.GridAndPivotedGrid) {
                DestroyRightPaneHtmlElements();
                pivotedGridPane = (ganttPane = (rightPane = null));
                touchMgr.UnregisterTouchableAction("right");
                panes.splice(1, 1);
            }
            if (paneLayout != SP.JsGrid.PaneLayout.GridOnly && rightPane == null) {
                CreateRightPaneHtmlElements();
                var paneSize = new PaneSize(rightPaneParent);

                ganttPane = (pivotedGridPane = null);
                if (paneLayout == SP.JsGrid.PaneLayout.GridAndGantt) {
                    if (SP.JsGrid.Internal.GanttPane == null) {
                        alert('Javascript support for Gantt-drawing is not enabled.');
                    }
                    ganttPane = (rightPane = new SP.JsGrid.Internal.GanttPane(rightPaneParent, objBag, ScrollVerticallyByTouch, SP.Internal.DomElement.BrowserCanRenderVml ? new SP.JsGrid.Internal.VmlGanttDrawImpl(objBag.RTL.bEnabled) : new SP.JsGrid.Internal.SvgGanttDrawImpl(objBag.RTL.bEnabled), paneSize));
                }
                else {
                    pivotedGridPane = (rightPane = new SP.JsGrid.Internal.PivotedGridPane(rightPaneParent, objBag, ScrollIntoViewVertically, ScrollVerticallyByTouch, null, objBag.commandMgr, selectionMgr, changeHighlightMgr, editMgr, cutcopypasteMgr, fillDownMgr, paneSize, GetCellValue, fnGetLocStr, RetryErrorRows, visualSelectionHtmlElements));
                }
                rightPane.paneSize = paneSize;
                panes.push(rightPane);
                touchMgr.RegisterTouchableAction("right", {
                    element: rightPaneParent,
                    control: rightPane
                });
            }
            if (vertScrollBar == null) {
                vertScrollBar = new SP.JsGrid.Internal.ScrollBar(SP.JsGrid.Internal.ScrollBar.BarType.Vertical, vertScrollBarContainer, true, null, objBag.styleMgr.scrollBarStyle, objBag.RTL.bEnabled, objBag);
            }
            posConverter.SetScrollBarObj(vertScrollBar);
            vertScrollBar.Update({
                topItemIdx: 0,
                bScrollNotifiy: false
            });
            CoordinateHeights();
            LayoutChildElements(true);
            gridPane.SetView(pPosConverter, pOperationalUtil, AddSentinalColumns(pColumns, bRecordIndicatorCheckboxes), gridFieldMap, fnGetGridRowStyleId, bMovableColumns, bResizableColumns, bHidableColumns, bSortableColumns, bAutoFilterableColumns, bRowHeadersEnabled, sortState);
            if (ganttPane != null) {
                ganttPane.SetView(pPosConverter, pOperationalUtil, ganttParams);
            }
            if (pivotedGridPane != null) {
                pivotedGridPane.SetView(pPosConverter, pOperationalUtil, pivotedGridParams.columns, gridFieldMap, fnGetGridRowStyleId, false, false, false, false, false, false, null);
            }
            CoordinateHeights();
            panes.each('SetEventSinks', eventSinks);
            this.RefreshAllRows(topViewIdx);
            if (!bHandlersSet) {
                vertScrollBar.SetOnScroll(OnVerticalScroll);
                vertScrollBar.SetOnVisibilityChanged(OnVerticalScrollbarVisibilityChanged, true);
                $addHandler(parentNode, 'mousedown', OnMouseDown);
                $addHandler(window, 'focus', OnFocus_Window);
                $addHandler(window, 'resize', OnResize_Window);
                try {
                    if (typeof SP.UI.Workspace.add_resized == 'function') {
                        SP.UI.Workspace.add_resized(HandleParentResize);
                    }
                }
                catch (e) { }
                if (!objBag.spGrid)
                    SP.Internal.DomElement.AddMouseWheelHandler(parentNode, OnMouseWheel);
                bHandlersSet = true;
            }
            panes.each('OnResize');
            focusMgr.SetView(paneLayout, gridPane, pivotedGridPane, gridFieldMap, bMovableColumns, bResizableColumns, bHidableColumns, bSortableColumns, bAutoFilterableColumns, bRowHeadersEnabled, sortState);
            objBag.entryRecordMgr.NotifyTableViewChangeCompleted();
            borderElement.style.display = '';
        };
        this.SetFilterState = function(state) {
            gridPane.SetFilterState(state);
        };
        this.SetSortState = function(state) {
            gridPane.SetSortState(state);
        };
        this.ShowColumnConfigurationDialog = function() {
            gridPane.ShowColumnConfigurationDialog();
        };
        this.RecordKeyToViewIdx = function(recordKey) {
            return keyToViewIdxMap[recordKey];
        };
        this.RefreshAllRows = function(topViewIdx, bDontDestroySelection) {
            bRefreshingAllRows = true;
            if (posConverter != null) {
                SetRecordCount(posConverter.GetViewRecordCount(), topViewIdx);
                UpdatePanes(0, rowData.length, 0, this.GetVisibleRecordCount(), !bDontDestroySelection);
            }
            else {
                UpdatePanes(0, rowData.length, 0, rowData.length, !bDontDestroySelection);
            }
            bRefreshingAllRows = false;
        };
        this.NotifyNewRowStateChanged = function(bDoNotRefreshRows) {
            cutcopypasteMgr.CancelMode();
            var newRowWasEnabled = bNewRowEnabled;

            bNewRowEnabled = objBag.editUtil.IsNewRowEnabled();
            if (newRowWasEnabled != bNewRowEnabled) {
                objBag.entryRecordMgr.EnsureLastEntryRowExists();
                if (!bDoNotRefreshRows) {
                    this.RefreshAllRows();
                }
            }
        };
        this.NotifyChangedRowByKey = function(key) {
            if (key in keyToViewIdxMap) {
                this.NotifyChangedRows(keyToViewIdxMap[key], 1);
            }
        };
        this.NotifyChangedRows = function(viewIdx, count) {
            Sys.Debug.assert(viewIdx + count <= recordCount);
            var inf = GetClippedRangeInfo(viewIdx, count);

            if (inf.clippedCount < 1) {
                return;
            }
            UpdatePanes(inf.clippedRelViewIdx, inf.clippedCount, inf.clippedRelViewIdx, inf.clippedCount, false);
        };
        this.NotifyUpdateProperty = function(optRecordKey, fieldKey, bHighlightChange, optPropUpdate, validationState, changeKey) {
            if (optRecordKey != null) {
                panes.each('NotifyUpdateProperty', optRecordKey, fieldKey, bHighlightChange, optPropUpdate, validationState, changeKey);
            }
            else {
                for (var i = 0; i < rowData.length; i++) {
                    var record = rowData[i];

                    if (record != null) {
                        panes.each('NotifyUpdateProperty', record.recordKey, fieldKey, bHighlightChange, optPropUpdate, validationState, changeKey);
                    }
                }
            }
        };
        this.NotifyInsertRows = function(viewIdx, count, bUpdateFocusPos, optFnContinue) {
            Sys.Debug.assert(viewIdx <= recordCount && count >= 0);
            editMgr.Unbind(function() {
                bDeletingOrInsertingRows = true;
                var oldTopViewIdx = vertScrollBar.GetTopItemIdx();
                var adjustedTopViewIdx = oldTopViewIdx + (viewIdx < oldTopViewIdx ? count : 0);

                UpdateRecordCount(count, adjustedTopViewIdx);
                bDeletingOrInsertingRows = false;
                var inf = GetClippedRangeInfo(viewIdx, count);

                if (inf.clippedCount < 1) {
                    RebuildKeyToPosMap();
                    return;
                }
                var insRelViewIdx = inf.clippedRelViewIdx;
                var insertCount = inf.clippedCount;
                var dispCap = vertScrollBar.GetItemDisplayCapacity();
                var openRows = dispCap - rowData.length;
                var delCount = Math.max(insertCount - openRows, 0);
                var delRelViewIdx = rowData.length - delCount;

                UpdatePanes(delRelViewIdx, delCount, insRelViewIdx, insertCount, true);
                if (bUpdateFocusPos) {
                    _this.UpdateFocusAfterInsertOrDeleteRows(viewIdx, count - 1, true);
                }
                if (optFnContinue != null) {
                    optFnContinue();
                }
            });
        };
        this.NotifyDeleteRows = function(viewIdx, count) {
            editMgr.Unbind(function() {
                var inf = GetClippedRangeInfo(viewIdx, count);

                bDeletingOrInsertingRows = true;
                var oldTopViewIdx = vertScrollBar.GetTopItemIdx();
                var newTopViewIdx = oldTopViewIdx + Math.max(Math.min(viewIdx - oldTopViewIdx, 0), -count);

                UpdateRecordCount(-count, newTopViewIdx);
                Sys.Debug.assert(vertScrollBar.GetTopItemIdx() <= newTopViewIdx, "the scroll bar should never auto scroll down");
                var autoScrolledTopCount = Math.max(newTopViewIdx - vertScrollBar.GetTopItemIdx(), 0);

                newTopViewIdx = vertScrollBar.GetTopItemIdx();
                bDeletingOrInsertingRows = false;
                if (inf.clippedCount < 1) {
                    RebuildKeyToPosMap();
                    return;
                }
                var dispCap = vertScrollBar.GetItemDisplayCapacity();
                var bFakeRowWillExistAtBottom = newTopViewIdx + dispCap == recordCount + 1 && vertScrollBar.PartialRowPresent();
                var bFakeRowExistsAtBottom = rowData.length != dispCap;
                var delRelViewIdx = inf.clippedRelViewIdx;
                var delCount = Math.max(Math.min(delRelViewIdx + inf.clippedCount, rowData.length) - delRelViewIdx, 0);

                UpdatePanes(delRelViewIdx, delCount, 0, autoScrolledTopCount, true);
                var insertCount = Math.max(Math.min(inf.clippedCount, recordCount - rowData.length + autoScrolledTopCount), 0);
                var insertBottomCount = Math.min(recordCount - (newTopViewIdx + rowData.length), insertCount);

                Sys.Debug.assert(insertBottomCount >= 0, "Insert bottom count should not be negative.");
                UpdatePanes(0, 0, rowData.length, insertBottomCount, true);
                var insertTopCount = insertCount - insertBottomCount - autoScrolledTopCount;

                if (insertTopCount > 0 && !bFakeRowExistsAtBottom && bFakeRowWillExistAtBottom) {
                    insertTopCount--;
                }
                UpdatePanes(0, 0, 0, insertTopCount, true);
                _this.UpdateFocusAfterInsertOrDeleteRows(viewIdx, count, false);
            });
        };
        this.UpdateFocusAfterInsertOrDeleteRows = function(viewIdx, count, bInserted) {
            panes.each('UpdateFocusAfterInsertOrDeleteRows', viewIdx, count, bInserted);
        };
        this.ScrollCellIntoView = function(rowIdx, colIdx, optPaneId) {
            var pane = this.GetPane(optPaneId);

            if (rowIdx != null) {
                vertScrollBar.ScrollIntoView((pane.GetGridPaneConverter()).RowIdxToViewIdx(rowIdx));
            }
            if (colIdx != null) {
                pane.ScrollColumnIntoViewHorizontally(colIdx);
            }
        };
        this.ScrollUpByOne = function() {
            vertScrollBar.ScrollUpByOne();
        };
        this.ScrollDownByOne = function() {
            vertScrollBar.ScrollDownByOne();
        };
        this.IsCellEditable = function(record, fieldKey, optPaneId) {
            var paneConverter = (this.GetPane(optPaneId)).GetGridPaneConverter();
            var column = paneConverter.GetColumnByIdx(paneConverter.FieldKeyToColIdx(fieldKey));

            return objBag.editUtil.CanEditField(record, column, fieldKey);
        };
        this.GetGanttZoomLevel = function() {
            return ganttPane ? ganttPane.GetZoomLevel() : null;
        };
        this.SetGanttZoomLevel = function(level) {
            ganttPane ? ganttPane.SetZoomLevel(level) : null;
        };
        this.Focus = function() {
            focusMgr.Focus();
        };
        this.GetMostRecentMouseDownCoordinates = function() {
            return mostRecentMouseDownCoords;
        };
        this.StopEditing = function(bCancelEditing) {
            editMgr.StopEditing(bCancelEditing);
        };
        this.UnbindEditing = function(fnContinue) {
            editMgr.Unbind(fnContinue);
        };
        this.NotifyResize = function() {
            HandleParentResize();
        };
        this.ScrollGanttToDate = function(date) {
            if (ganttPane != null) {
                ganttPane.SetFocusDate(date);
            }
        };
        this.GetTopRowIndex = function(optPaneId) {
            return (this.GetPane(optPaneId)).BeginRowIdx();
        };
        this.GetLeftColumnIndex = function(optPaneId) {
            return (this.GetPane(optPaneId)).BeginColIdx();
        };
        this.ShowColumn = function(columnKey, atIdx) {
            gridPane.ShowColumn(columnKey, atIdx);
        };
        this.EnsurePaneWidth = function() {
            gridPane.EnsurePaneWidth();
        };
        this.HideColumn = function(columnKey) {
            gridPane.HideColumn(columnKey);
        };
        this.RenameColumn = function(columnKey) {
            gridPane.RenameColumn(columnKey);
        };
        this.DeleteColumn = function(columnKey) {
            gridPane.DeleteColumn(columnKey);
        };
        this.UpdateColumns = function(columnInfoCollection) {
            gridPane.UpdateColumns(columnInfoCollection);
        };
        this.GetColumns = function(optPaneId) {
            return FilterColumns((this.GetPane(optPaneId)).GetColumns(), [SP.JsGrid.RecordIndicatorCheckboxColumnKey, 'JSGrid_NewColumn']);
        };
        this.GetRecordIndicatorCheckBoxColumnIndex = function() {
            var pane = this.GetPane();

            return pane && SP.Internal.JS.FindInArray(pane.GetColumns(), function(col) {
                return col.columnKey == SP.JsGrid.RecordIndicatorCheckboxColumnKey;
            });
        };
        this.ScrollToAndExpandNextError = function(minId, recordKey, fnFilter, bDontExpand) {
            var nextErrorInfo = recordKey == null ? objBag.errorMgr.GetNextError(minId, fnFilter) : objBag.errorMgr.GetNextErrorForRecord(minId, recordKey, fnFilter);

            if (nextErrorInfo != null) {
                var rowIdx = posConverter.RecordKeyToViewIdx(nextErrorInfo.recordKey), colIdx;

                if (rowIdx != null) {
                    for (var i = 0; i < panes.length && colIdx == null; i++) {
                        var curPane = panes[i];

                        if (curPane.Id == SP.JsGrid.PaneId.MainGrid || curPane.Id == SP.JsGrid.PaneId.PivotedGrid) {
                            colIdx = nextErrorInfo.type == SP.JsGrid.Internal.ErrorType.Row ? 0 : (curPane.GetGridPaneConverter()).FieldKeyToColIdx(nextErrorInfo.fieldKey);
                            if (colIdx == null) {
                                var columnKey = curPane.FieldKeyToColumnKey(nextErrorInfo.fieldKey);

                                if (columnKey != null) {
                                    curPane.ShowColumn(columnKey, null);
                                    colIdx = (curPane.GetGridPaneConverter()).FieldKeyToColIdx(nextErrorInfo.fieldKey);
                                }
                            }
                        }
                    }
                    _this.ScrollCellIntoView(rowIdx, colIdx, curPane.Id);
                    if (nextErrorInfo.type == SP.JsGrid.Internal.ErrorType.Cell && colIdx != null) {
                        selectionMgr.SetFocusByKey(curPane, nextErrorInfo.recordKey, nextErrorInfo.fieldKey);
                        if (bDontExpand != true) {
                            setTimeout(function() {
                                editMgr.ExpandWidget(SP.JsGrid.ErrorWidgetId);
                            }, 0);
                        }
                    }
                    return nextErrorInfo.id;
                }
            }
            return null;
        };
        function FilterColumns(columns, unwantedColumnKeys) {
            for (var i = 0; i < unwantedColumnKeys.length; i++) {
                for (var j = 0; j < columns.length; j++) {
                    if (columns[j].columnKey == unwantedColumnKeys[i]) {
                        columns.splice(j, 1);
                        break;
                    }
                }
            }
            return columns;
        }
        this.ClearAllChangeIndications = function() {
            panes.each('NotifyChangeIndicatorsClearing');
            changeHighlightMgr.Clear();
        };
        this.GetFocusedItemInfo = function() {
            var focusPos = selectionMgr.GetFocus();

            return focusPos == null ? null : {
                recordKey: focusPos.recordKey,
                fieldKey: focusPos.fieldKey,
                paneId: focusPos.gridPane.Id
            };
        };
        this.JumpToEntryRecord = function() {
            if (bNewRowEnabled) {
                var entryRowKey = objBag.entryRecordMgr.GetLastEntryKey();
                var columnKey = (gridPane.GetColumns())[0].columnKey;

                gridPane.SelectByKey(entryRowKey, entryRowKey, columnKey, columnKey, false);
                _this.ScrollCellIntoView(posConverter.RecordKeyToViewIdx(entryRowKey), 0, gridPane.Id);
            }
        };
        this.GetSplitterPosition = function() {
            return rightPane != null ? splitterPos : 0;
        };
        this.SetSplitterPosition = function(newPos) {
            SetSplitterPositionCore(newPos);
            LayoutChildElements();
        };
        this.Select = function(rowIdx1, rowIdx2, colIdx1, colIdx2, bAppend, optPaneId) {
            (this.GetPane(optPaneId)).Select(rowIdx1, rowIdx2, colIdx1, colIdx2, bAppend);
        };
        this.SelectByKey = function(recordKey1, recordKey2, colKey1, colKey2, bAppend, optPaneId) {
            (this.GetPane(optPaneId)).SelectByKey(recordKey1, recordKey2, colKey1, colKey2, bAppend);
        };
        this.GetOrderedSelections = function(optPaneId, optSelectionTypeFilter) {
            return selectionMgr.GetOrderedSelections(this.GetPane(optPaneId), optSelectionTypeFilter);
        };
        this.NotifyCanEditUpdated = function() {
            panes.each('NotifyCanEditUpdated');
        };
        this.GetGridPane = function() {
            return gridPane;
        };
        this.GetPane = function(paneId) {
            var pane = paneId == SP.JsGrid.PaneId.MainGrid || paneId == null ? gridPane : paneId == SP.JsGrid.PaneId.PivotedGrid ? pivotedGridPane : paneId == SP.JsGrid.PaneId.Gantt ? ganttPane : null;

            Sys.Debug.assert(pane != null, "Invalid PaneId (" + paneId + ")");
            return pane;
        };
        function SetSplitterPositionCore(newPos) {
            if (rightPane != null) {
                splitterPos = Math.min(Math.max(newPos, CONST_minPaneWidth), GetControlWidth() - SP.Internal.ScrollBar.GetSystemScrollBarThickness() - (rightPane ? CONST_minPaneWidth + SP.JsGrid.Internal.SplitterWidth : 0));
            }
        }
        function OnMouseWheel(eventInfo) {
            vertScrollBar.Update({
                topItemIdx: vertScrollBar.GetTopItemIdx() + eventInfo.wheelDelta
            });
            eventInfo.stopPropagation();
            eventInfo.preventDefault();
        }
        function GetControlWidth() {
            return Math.max(lastParentSize.width - 2, CONST_minControlWidth);
        }
        function GetControlHeight() {
            return Math.max(lastParentSize.height - 2, CONST_minControlHeight);
        }
        function PaneSize(itemParent) {
            var width, leftOffset;

            this.SetValues = function(newWidth, newLeftOffset) {
                width = newWidth;
                leftOffset = newLeftOffset;
            };
            this.GetHeight = function() {
                return GetControlHeight();
            };
            this.GetWidth = function() {
                return width;
            };
            this.GetLeftOffset = function() {
                return leftOffset;
            };
            this.Dispose = function() {
                itemParent = null;
            };
        }
        function AddSentinalColumns(existingColumns, bAddRecordIndicator) {
            var columns = existingColumns;

            if (objBag.showAddColumnMenu && objBag.canUserAddColumn) {
                columns = AddCreateColumn(columns);
            }
            return TryAddRecordIndicatorCheckboxesToColumns(columns, bAddRecordIndicator);
        }
        function AddCreateColumn(columns) {
            var key = 'JSGrid_NewColumn';
            var gridField = gridFieldMap[key] = new SP.JsGrid.GridField(key, false, false, SP.JsGrid.TextDirection.Default, null, SP.JsGrid.EditMode.ReadOnly);

            gridField.SetSingleValuePropType(SP.JsGrid.Internal.Property.GetPropType('String'));
            var columnInfo = new SP.JsGrid.ColumnInfo('', null, key, SP.JsGrid.Internal.MinColumnWidth + 16);

            columnInfo.isResizable = false;
            columnInfo.isSortable = false;
            columnInfo.isHidable = false;
            columnInfo.isAutoFilterable = false;
            columnInfo.isFooter = true;
            columnInfo.name = fnGetLocStr('AddColumn');
            columnInfo.imgSrc = "/_layouts/15/images/createview.gif?rev=23";
            columnInfo.imgRawSrc = '<span class="ms-addcolumn-span"><img  class="ms-addcolumn-icon" src="' + GetThemedImageUrl("spcommon.png") + '"/></span>';
            columnInfo.bOpenMenuOnContentClick = true;
            return new SP.JsGrid.ColumnInfoCollection((columns.GetColumnArray()).concat([columnInfo]));
        }
        function TryAddRecordIndicatorCheckboxesToColumns(columns, bAdd) {
            var r = columns;

            if (bAdd) {
                var key = SP.JsGrid.RecordIndicatorCheckboxColumnKey;
                var gridField = gridFieldMap[key] = new SP.JsGrid.GridField(key, false, false, SP.JsGrid.TextDirection.Default, null, SP.JsGrid.EditMode.ReadOnly);
                var recordIndicatorPropType = SP.Internal.JS.object(SP.JsGrid.Internal.Property.GetPropType('CheckBoxBoolean'));

                recordIndicatorPropType.ID = 'RecordIndicatorCheckBoxBoolean';
                recordIndicatorPropType.GetDisplayValue = function(record, dataValue, localizedValue) {
                    return objBag.checkSelMgr.IsRecordIndicatorCheckboxChecked(record.key()) ? SP.JsGrid.Res.checkboxChecked : SP.JsGrid.Res.checkboxUnchecked;
                };
                SP.JsGrid.PropertyType.RegisterNewDerivedCustomPropType(recordIndicatorPropType, 'CheckBoxBoolean');
                gridField.SetSingleValuePropType(recordIndicatorPropType);
                var columnInfo = new SP.JsGrid.ColumnInfo('', null, key, SP.JsGrid.Internal.MinColumnWidth);

                columnInfo.isResizable = (columnInfo.isSortable = (columnInfo.isHidable = (columnInfo.isAutoFilterable = (columnInfo.isAutoFilterable = false))));
                columnInfo.fnGetDisplayControlName = function() {
                    return objBag.gridControls[SP.JsGrid.RecordIndicatorControlId].Id;
                };
                r = new SP.JsGrid.ColumnInfoCollection([columnInfo].concat(columns.GetColumnArray()));
            }
            return r;
        }
        function Init() {
        }
        function ScrollIntoViewVertically(viewIdx) {
            return vertScrollBar.ScrollIntoView(viewIdx);
        }
        function ScrollVerticallyByTouch(bUp) {
            if (bUp) {
                _this.ScrollUpByOne();
            }
            else {
                _this.ScrollDownByOne();
            }
        }
        function SetRecordCount(rc, optTopIdx) {
            recordCount = cleared ? 0 : rc + (bNewRowEnabled ? (objBag.entryRecordMgr.GetEntryRecords()).length : 0);
            vertScrollBar.Update({
                itemCount: recordCount,
                topItemIdx: optTopIdx
            });
            return recordCount;
        }
        function UpdateRecordCount(delta, optTopIdx) {
            recordCount += delta;
            vertScrollBar.Update({
                itemCount: recordCount,
                topItemIdx: optTopIdx
            });
            return recordCount;
        }
        function GetClippedRangeInfo(viewIdx, count) {
            var viewLower = viewIdx;
            var viewUpper = viewIdx + count - 1;

            viewLower = Math.max(0, Math.min(recordCount - 1, viewLower));
            viewUpper = Math.max(0, Math.min(recordCount - 1, viewUpper));
            var screenLower = posConverter.ViewIdxToRelViewIdx(viewLower);
            var screenUpper = posConverter.ViewIdxToRelViewIdx(viewUpper);

            screenLower = Math.max(screenLower, 0);
            screenUpper = Math.min(screenUpper, vertScrollBar.GetItemDisplayCapacity() - 1);
            return {
                clippedRelViewIdx: screenLower,
                clippedCount: screenUpper - screenLower + 1
            };
        }
        function CreateBorderHtmlElements() {
            if (!objBag.spGrid)
                parentNode.style.position = 'relative';
            parentNode.style.direction = objBag.RTL.ltr;
            borderElement = document.createElement('div');
            if (!objBag.spGrid)
                borderElement.style.cssText = 'overflow:hidden;top:' + borderElement.style[objBag.RTL.left] + '1px;width:' + GetControlWidth() + 'px;height:' + GetControlHeight() + 'px;border:1px solid ' + objBag.styleMgr.timescaleTierStyle.outerBorderColor + ';display:none';
            else
                borderElement.style.width = "100%";
            parentNode.appendChild(borderElement);
            touchMgr = new SP.JsGrid.Internal.GridTouchManager(borderElement);
        }
        function CreateLeftPaneHtmlElements() {
            leftPaneParent = document.createElement('div');
            leftPaneParent.id = jsGridElementId + '_leftpane';
            leftPaneParent.gridItem = true;
            if (!objBag.spGrid)
                leftPaneParent.style.cssText = 'background-color:' + objBag.styleMgr.gridPaneStyle.backgroundColor + ';overflow:hidden;width:484px;float:' + objBag.RTL.left;
            borderElement.appendChild(leftPaneParent);
            vertScrollBarContainer = document.createElement('div');
            vertScrollBarContainer.gridItem = true;
            if (objBag.spGrid)
                vertScrollBarContainer.style.cssText = 'display:none;';
            else
                vertScrollBarContainer.style.cssText = 'float:' + objBag.RTL.left + ';width:' + SP.Internal.ScrollBar.GetSystemScrollBarThickness() + 'px;overflow:hidden;';
            borderElement.appendChild(vertScrollBarContainer);
        }
        function CreateRightPaneHtmlElements() {
            if (!splitterBar.IsInited()) {
                var splitElem = splitterBar.Init(borderElement, GetControlHeight() + 2, -1);

                splitElem.gridItem = true;
                borderElement.insertBefore(splitElem, vertScrollBarContainer);
                touchMgr.RegisterTouchableAction("splitter", {
                    element: splitElem,
                    control: splitterBar
                });
                splitElem = null;
            }
            else {
                splitterBar.Show();
            }
            rightPaneParent = document.createElement('div');
            rightPaneParent.gridItem = true;
            rightPaneParent.style.cssText = 'background-color:' + objBag.styleMgr.gridPaneStyle.backgroundColor + ';overflow:hidden;float:' + objBag.RTL.left;
            rightPaneParent.id = jsGridElementId + "_rightpane";
            borderElement.insertBefore(rightPaneParent, vertScrollBarContainer);
        }
        function CreateSelectionBorderHtmlElements() {
            var selDragHandle, selFrames = {}, focusFrames = {}, copyFrames = {};
            var baseCss = 'position:absolute; visibility:hidden; top:0px; left:0px; width:0px; height:0px;';

            selDragHandle = document.createElement('div');
            selDragHandle.style.cssText = baseCss;
            selDragHandle.style.width = (selDragHandle.style.height = '5px');
            selDragHandle.style.cursor = "crosshair";
            objBag.parentNode.appendChild(selDragHandle);
            selFrames.Top = document.createElement('div');
            selFrames.Right = document.createElement('div');
            selFrames.Bottom = document.createElement('div');
            selFrames.Left = document.createElement('div');
            for (var key in selFrames) {
                var sf = selFrames[key];

                sf.style.cssText = baseCss;
                objBag.parentNode.appendChild(sf);
            }
            focusFrames.Top = document.createElement('div');
            focusFrames.Right = document.createElement('div');
            focusFrames.Bottom = document.createElement('div');
            focusFrames.Left = document.createElement('div');
            for (var key in focusFrames) {
                var ff = focusFrames[key];

                ff.style.cssText = baseCss;
                ff.style['border' + key] = SP.JsGrid.Style.MakeBorderString(1, 'solid', objBag.styleMgr.gridPaneStyle.selectionRectBorderColor);
                objBag.parentNode.appendChild(ff);
            }
            copyFrames = {
                Back: {},
                Fore: {}
            };
            copyFrames.Back.Top = document.createElement('div');
            copyFrames.Back.Right = document.createElement('div');
            copyFrames.Back.Bottom = document.createElement('div');
            copyFrames.Back.Left = document.createElement('div');
            copyFrames.Fore.Top = document.createElement('div');
            copyFrames.Fore.Right = document.createElement('div');
            copyFrames.Fore.Bottom = document.createElement('div');
            copyFrames.Fore.Left = document.createElement('div');
            for (var key in copyFrames) {
                var borderString = key == 'Back' ? SP.JsGrid.Style.MakeBorderString(2, 'solid', objBag.styleMgr.gridPaneStyle.copyRectBackBorderColor) : SP.JsGrid.Style.MakeBorderString(2, 'dashed', objBag.styleMgr.gridPaneStyle.copyRectForeBorderColor);

                for (var cfKey in copyFrames[key]) {
                    var cf = copyFrames[key][cfKey];

                    cf.style.cssText = baseCss;
                    cf.style['border' + cfKey] = borderString;
                    objBag.parentNode.appendChild(cf);
                }
            }
            visualSelectionHtmlElements = {
                selDragHandle: selDragHandle,
                selFrames: selFrames,
                focusFrames: focusFrames,
                copyFrames: copyFrames
            };
        }
        function GetEffectiveHorizontalScrollBarHeight() {
            return bHorizontalScrollBarVisible ? SP.Internal.ScrollBar.GetSystemScrollBarThickness() : 0;
        }
        function GetEffectiveVerticalScrollBarWidth() {
            return vertScrollBarContainer.style.display != 'none' ? SP.Internal.ScrollBar.GetSystemScrollBarThickness() : 0;
        }
        function LayoutChildElements(bSkipPaneResizeNotification) {
            SetSplitterPositionCore(splitterPos);
            var controlHeight = GetControlHeight();

            if (!objBag.spGrid) {
                borderElement.style.height = controlHeight + 'px';
                for (var i = 0; i < borderElement.childNodes.length; i++) {
                    if (borderElement.childNodes[i].gridItem) {
                        borderElement.childNodes[i].style.height = controlHeight + 'px';
                    }
                }
            }
            if (vertScrollBar != null) {
                vertScrollBar.Update({
                    physicalViewportSize: controlHeight - headerHeight - GetEffectiveHorizontalScrollBarHeight(),
                    scrollbarSize: controlHeight
                });
            }
            if (splitterBar.IsInited()) {
                splitterBar.SetHeight(controlHeight + 2);
            }
            var controlWidth = GetControlWidth();

            if (!objBag.spGrid)
                borderElement.style.width = controlWidth + 'px';
            if (rightPaneParent != null) {
                var leftPaneWidth = splitterPos;
                var rightPaneWidth = controlWidth - (splitterPos + SP.JsGrid.Internal.SplitterWidth + GetEffectiveVerticalScrollBarWidth());

                if (!objBag.spGrid) {
                    leftPaneParent.style.width = leftPaneWidth + 'px';
                    rightPaneParent.style.width = rightPaneWidth + 'px';
                }
                if (objBag.RTL.bEnabled) {
                    rightPane.paneSize.SetValues(rightPaneWidth, GetEffectiveVerticalScrollBarWidth());
                    gridPane.paneSize.SetValues(leftPaneWidth, controlWidth - leftPaneWidth);
                }
                else {
                    gridPane.paneSize.SetValues(leftPaneWidth, 0);
                    rightPane.paneSize.SetValues(rightPaneWidth, controlWidth - GetEffectiveVerticalScrollBarWidth() - rightPaneWidth);
                }
            }
            else {
                var leftPaneWidth = controlWidth - GetEffectiveVerticalScrollBarWidth();

                if (!objBag.spGrid)
                    leftPaneParent.style.width = leftPaneWidth + 'px';
                gridPane.paneSize.SetValues(leftPaneWidth, objBag.RTL.bEnabled ? GetEffectiveVerticalScrollBarWidth() : 0);
            }
            if (!cleared && !bSkipPaneResizeNotification) {
                panes.each('OnResize');
            }
            editMgr.NotifyMove();
        }
        function DestroyRightPaneHtmlElements() {
            splitterBar.Hide();
            (SP.Internal.DomElement.GetParentElement(rightPaneParent)).removeChild(rightPaneParent);
            rightPaneParent = null;
        }
        function OnFocus_Window(eventInfo) {
            cutcopypasteMgr.CheckClipboard();
        }
        function OnResize_Window(eventInfo) {
            HandleParentResize();
        }
        function HandleParentResize() {
            borderElement.style.display = 'none';
            if (!IsGridVisible() || parentNode.offsetHeight == lastParentSize.height && parentNode.offsetWidth == lastParentSize.width) {
                borderElement.style.display = '';
                return;
            }
            lastParentSize = {
                height: parentNode.offsetHeight,
                width: parentNode.offsetWidth
            };
            borderElement.style.display = '';
            SP.Internal.DomElement.ForceIEZoomFactorRecomputation();
            var oldVisRows = vertScrollBar.GetItemDisplayCapacity();
            var oldTopViewIdx = vertScrollBar.GetTopItemIdx();

            bResizingScrollbar = true;
            LayoutChildElements();
            var ctrlHeight = GetControlHeight();

            vertScrollBar.SetViewportSize(ctrlHeight - headerHeight - GetEffectiveHorizontalScrollBarHeight(), true, ctrlHeight - GetEffectiveHorizontalScrollBarHeight());
            bResizingScrollbar = false;
            ModifyRowsForNewViewport(oldVisRows, oldTopViewIdx);
        }
        function OnMouseDown(eventInfo) {
            mostRecentMouseDownCoords = {
                'x': eventInfo.rawEvent.clientX,
                'y': eventInfo.rawEvent.clientY
            };
            if (fnIsGridEnabled()) {
                SP.Internal.DomElement.StopEvent(eventInfo);
                _this.Focus();
            }
        }
        function CoordinateHeights() {
            var oldHeaderHeight = headerHeight;
            var oldRowHeight = rowHeight;

            headerHeight = minHeaderHeight ? minHeaderHeight : 0;
            headerHeight = Math.max(headerHeight, gridPane.GetMinHeaderHeight());
            if (rightPane) {
                headerHeight = Math.max(headerHeight, rightPane.GetMinHeaderHeight());
                rightPane.SetHeaderHeight(headerHeight);
            }
            gridPane.SetHeaderHeight(headerHeight);
            rowHeight = minRowHeight ? minRowHeight : 0;
            rowHeight = Math.max(rowHeight, gridPane.GetMinRowHeight());
            if (rightPane) {
                rowHeight = Math.max(rowHeight, rightPane.GetMinRowHeight());
                rightPane.SetRowHeight(rowHeight);
            }
            gridPane.SetRowHeight(rowHeight);
            if ((oldHeaderHeight != headerHeight || oldRowHeight != rowHeight) && vertScrollBar != null) {
                vertScrollBar.Update({
                    physicalViewportSize: GetControlHeight() - headerHeight - GetEffectiveHorizontalScrollBarHeight(),
                    scrollbarSize: GetControlHeight(),
                    itemSize: rowHeight
                });
            }
        }
        function OnVerticalScrollbarVisibilityChanged(bVisible) {
            vertScrollBarContainer.style.display = bVisible ? '' : 'none';
            LayoutChildElements();
        }
        function OnHorizontalGridPaneScrollBarVisibilityChange(bVisible) {
            bHorizontalScrollBarVisible = bVisible;
            vertScrollBar.Update({
                bOtherScrollMeets: bVisible,
                physicalViewportSize: GetControlHeight() - headerHeight - GetEffectiveHorizontalScrollBarHeight()
            });
        }
        function OnVerticalScroll(newPosInfo, originalTopPos) {
            var topRowDelta = newPosInfo.topIdx - originalTopPos;

            if (topRowDelta != 0 && !bResizingScrollbar && !bRefreshingAllRows && !bDeletingOrInsertingRows) {
                topRowDelta < 0 ? ScrollUp(newPosInfo.topIdx, -topRowDelta) : ScrollDown(newPosInfo.topIdx, topRowDelta);
            }
        }
        function ScrollDown(newTopViewIdx, amt) {
            var dispCap = vertScrollBar.GetItemDisplayCapacity();
            var bFakeRowWillExistAtBottom = newTopViewIdx + dispCap == recordCount + 1 && vertScrollBar.PartialRowPresent();
            var delAmt = Math.min(amt, dispCap);
            var insAmt = delAmt - (bFakeRowWillExistAtBottom ? 1 : 0);
            var insRelViewIdx = dispCap - delAmt;

            UpdatePanes(0, delAmt, insRelViewIdx, insAmt, false);
        }
        function ScrollUp(newTopViewIdx, amt) {
            var dispCap = vertScrollBar.GetItemDisplayCapacity();
            var bFakeRowExistsAtBottom = rowData.length != dispCap;
            var insAmt = Math.min(Math.min(amt, recordCount), dispCap);
            var delAmt = insAmt - (bFakeRowExistsAtBottom ? 1 : 0);
            var delRelViewIdx = dispCap - insAmt;

            UpdatePanes(delRelViewIdx, delAmt, 0, insAmt, false);
        }
        function ModifyRowsForNewViewport(oldVisRows, oldTopViewIdx) {
            var newVisRows = vertScrollBar.GetItemDisplayCapacity();
            var visRowDelta = newVisRows - oldVisRows;
            var newTopViewIdx = vertScrollBar.GetTopItemIdx();

            if (visRowDelta < 0) {
                var delCount = Math.max(rowData.length - newVisRows, 0);
                var delRelViewIdx = rowData.length - delCount;

                UpdatePanes(delRelViewIdx, delCount, null, 0, false);
            }
            else if (visRowDelta > 0) {
                var rowCountToAddToTop = oldTopViewIdx - newTopViewIdx;

                Sys.Debug.assert(rowCountToAddToTop >= 0);
                UpdatePanes(null, 0, 0, rowCountToAddToTop, false);
                Sys.Debug.assert(visRowDelta >= rowCountToAddToTop);
                var insCount = visRowDelta - rowCountToAddToTop;
                var insRelViewIdx = rowData.length;
                var insViewIdx = posConverter.RelViewIdxToViewIdx(insRelViewIdx);

                insCount = Math.min(insViewIdx + insCount, recordCount) - insViewIdx;
                UpdatePanes(null, 0, insRelViewIdx, insCount, false);
            }
        }
        function UpdatePanes(delPos, delCount, insPos, insCount, bCausesKeyPosMappingChange) {
            Sys.Debug.assert(delCount >= 0 && insCount >= 0);
            var bDeleting = delPos != null && delCount > 0;
            var bInserting = insPos != null && insCount > 0;

            if (bDeleting || bInserting) {
                var insElements = bInserting && insCount > 0 ? (posConverter.GetViewRecords(posConverter.RelViewIdxToViewIdx(insPos), insCount, RenderMissingRows)).records : [];

                if (bDeleting) {
                    rowData.splice(delPos, delCount);
                }
                if (bInserting) {
                    Sys.Debug.assert(rowData == null || rowData.length == 0 || insElements[0] == null || rowData[0] == null || rowData[0].recordKey != insElements[0].recordKey, "Inserting duplicate key in rowData!");
                    Array.prototype.splice.apply(rowData, [insPos, 0].concat(insElements));
                }
                if (!objBag.spGrid)
                    Sys.Debug.assert(rowData.length <= vertScrollBar.GetItemDisplayCapacity());
                RebuildKeyToPosMap();
                panes.each('SpliceRows', delPos, delCount, insPos, insElements, bCausesKeyPosMappingChange);
                editMgr.NotifyMove();
            }
        }
        function RetryErrorRows() {
            RenderMissingRows(vertScrollBar.GetTopItemIdx(), rowData.length, true);
        }
        function RenderMissingRows(requestedViewIdx, requestedCount, bRecordFetchSucceeded, optLastTopItemIdx) {
            if (SP.Internal.JS.FindKey(rowData, function(item) {
                return item == null;
            }) === undefined) {
                return;
            }
            var topItemIdx = vertScrollBar.GetTopItemIdx();
            var toRender = {};

            if (!bRecordFetchSucceeded || topItemIdx == optLastTopItemIdx) {
                var requestedRange = new SP.Utilities.Range(requestedViewIdx, requestedViewIdx + requestedCount - 1);

                for (var i = 0; i < rowData.length; i++) {
                    if (rowData[i] == null && requestedRange.Contains(topItemIdx + i)) {
                        toRender[i] = SP.JsGrid.Internal.LoadErrorState;
                    }
                }
            }
            else {
                var records = (posConverter.GetViewRecords(topItemIdx, rowData.length, function(a, b, c) {
                    RenderMissingRows(a, b, c, topItemIdx);
                })).records;

                for (var i = 0; i < rowData.length; i++) {
                    if (rowData[i] == null) {
                        toRender[i] = (rowData[i] = records[i]);
                    }
                }
                rowData = [].concat(rowData);
                RebuildKeyToPosMap();
            }
            panes.each('RenderRows', toRender);
        }
        function RebuildKeyToPosMap() {
            keyToViewIdxMap = {};
            var top = posConverter.GetTopViewIdx();

            for (var i = 0; i < rowData.length; i++) {
                if (rowData[i] != null) {
                    keyToViewIdxMap[rowData[i].key()] = i + top;
                }
            }
        }
        function ArrayEach(fnName) {
            var args = Array.prototype.slice.call(arguments, 1);

            for (var i = 0; i < this.length; ++i) {
                var fn = this[i][fnName];

                if (fn) {
                    fn.apply(this[i], args);
                }
            }
        }
        function GetCellValue(record, fieldKey, propType) {
            var value = {
                data: record.HasDataValue(fieldKey) ? record.GetDataValue(fieldKey) : SP.JsGrid.EmptyValue,
                localized: propType != null && propType.GetDisplayValue != null ? propType.GetDisplayValue(record, record.HasDataValue(fieldKey) ? record.GetDataValue(fieldKey) : null, record.HasLocalizedValue(fieldKey) ? record.GetLocalizedValue(fieldKey) : null) : record.HasLocalizedValue(fieldKey) ? record.GetLocalizedValue(fieldKey) : SP.JsGrid.EmptyValue
            };

            return value;
        }
        function IsGridVisible() {
            return parentNode.offsetHeight > 0 && parentNode.offsetWidth > 0;
        }
    };
    SP.JsGrid.Internal.PivotedGridPane = function(parentNode, objBag, fnScrollIntoViewVertically, fnScrollVerticallyByTouch, fnNotifyScrollBarVisibilityChange, commandMgr, selectionMgr, changeHighlightMgr, editMgr, cutcopypasteMgr, fillDownMgr, paneSize, fnGetCellValue, fnGetLocStr, fnRetryErrorRows, visualSelectionHtmlElements) {
        var pane = new SP.JsGrid.Internal.GridPane(parentNode, objBag, ScrollIntoViewVertically, fnScrollVerticallyByTouch, fnNotifyScrollBarVisibilityChange, commandMgr, selectionMgr, changeHighlightMgr, editMgr, cutcopypasteMgr, fillDownMgr, paneSize, fnGetCellValue, fnGetLocStr, fnRetryErrorRows, visualSelectionHtmlElements);
        var _rowMultiple = 1;

        parentNode = null;
        pane.Id = SP.JsGrid.PaneId.PivotedGrid;
        var origSetView = pane.SetView;

        pane.SetView = function(posConverter, operationalUtil, columns, gridFieldMap, fnGetGridRowStyleId, bMovableColumns, bResizableColumns, bHidableColumns, bSortableColumns, bAutoFilterableColumns, bRowHeadersEnabled, sortState) {
            origSetView.call(pane, posConverter, operationalUtil, columns, gridFieldMap, fnGetGridRowStyleId, bMovableColumns, bResizableColumns, bHidableColumns, bSortableColumns, bAutoFilterableColumns, bRowHeadersEnabled, sortState);
            _rowMultiple = (pane.GetGridPaneConverter()).GetRowMultiple();
        };
        var origSpliceRows = pane.SpliceRows;

        pane.SpliceRows = function(delRelViewIdx, delCount, insRelViewIdx, insRecords, bCausesKeyPosMappingChange) {
            var newInsRecords = [];

            for (var i = 0; i < insRecords.length; i++) {
                for (var j = 0; j < _rowMultiple; j++) {
                    newInsRecords.push(insRecords[i]);
                }
            }
            origSpliceRows.call(pane, delRelViewIdx * _rowMultiple, delCount * _rowMultiple, insRelViewIdx * _rowMultiple, newInsRecords, bCausesKeyPosMappingChange);
        };
        var origRenderRows = pane.RenderRows;

        pane.RenderRows = function(toRender) {
            var newToRender = {};

            for (var relViewIdx in toRender) {
                var ofs = +relViewIdx * _rowMultiple;

                for (var i = 0; i < _rowMultiple; i++) {
                    newToRender[ofs + i] = toRender[relViewIdx];
                }
            }
            origRenderRows.call(pane, newToRender);
        };
        var origUpdateFocusAfterInsertOrDeleteRows = pane.UpdateFocusAfterInsertOrDeleteRows;

        pane.UpdateFocusAfterInsertOrDeleteRows = function(viewIdx, count, bInserted) {
            origUpdateFocusAfterInsertOrDeleteRows.call(pane, viewIdx * _rowMultiple, count * _rowMultiple, bInserted);
        };
        var origGetMinRowHeight = pane.GetMinRowHeight;

        pane.GetMinRowHeight = function() {
            return origGetMinRowHeight.call(pane) * _rowMultiple;
        };
        var origSetRowHeight = pane.SetRowHeight;

        pane.SetRowHeight = function(newHeight) {
            Sys.Debug.assert(newHeight % _rowMultiple == 0);
            origSetRowHeight.call(pane, newHeight / _rowMultiple);
        };
        function ScrollIntoViewVertically(rowIdx) {
            fnScrollIntoViewVertically((pane.GetGridPaneConverter()).RowIdxToViewIdx(rowIdx));
        }
        this.ExecuteTouchAction = null;
        this.ShouldUpdateTouchStartPosition = null;
        this.ScrollVerticallyByTouch = fnScrollVerticallyByTouch;
        this.ScrollHorizontallyByTouch = function(bScrollLeft) {
            pane.ScrollHorizontallyByTouch(bScrollLeft);
        };
        return pane;
    };
    SP.JsGrid.Internal.PositionConverter = function(tableCache, objBag) {
        var vertScrollBar;
        var hierarchyMgr;
        var paneMgr;
        var _this = this;

        this.SetHierarchyMgrObj = function(o) {
            hierarchyMgr = o;
        };
        this.SetScrollBarObj = function(o) {
            vertScrollBar = o;
        };
        this.SetPaneMgrObj = function(o) {
            paneMgr = o;
        };
        this.GetTopViewIdx = function() {
            return vertScrollBar.GetTopItemIdx();
        };
        this.GetWholeRowDisplayCapacity = function() {
            return vertScrollBar.GetWholeItemDisplayCapacity();
        };
        this.RecordIdxToRecordKey = function(recordIdx) {
            var r;

            if (objBag.editUtil.IsNewRowEnabled() && recordIdx >= tableCache.GetRecordCount()) {
                var records = objBag.entryRecordMgr.GetEntryRecords();

                if (records.length > 0) {
                    r = records[Math.min(recordIdx - tableCache.GetRecordCount(), records.length - 1)].key();
                }
            }
            else {
                r = tableCache.RecordIdxToKey(recordIdx);
            }
            return r;
        };
        this.RecordIdxToViewIdx = function(recordIdx) {
            return hierarchyMgr ? hierarchyMgr.ConvertRecordIdxToViewIdx(recordIdx) : recordIdx;
        };
        this.ViewIdxToRecordIdx = function(viewIdx) {
            return hierarchyMgr ? hierarchyMgr.ConvertViewIdxToRecordIdx(viewIdx) : viewIdx;
        };
        this.ViewIdxToRelViewIdx = function(viewIdx) {
            return viewIdx - vertScrollBar.GetTopItemIdx();
        };
        this.RelViewIdxToViewIdx = function(relViewIdx) {
            return relViewIdx + vertScrollBar.GetTopItemIdx();
        };
        this.IsRecordOnScreen = function(recordKey) {
            return paneMgr.RecordKeyToViewIdx(recordKey) != null;
        };
        this.GetLastRecordKey = function() {
            return tableCache.RecordIdxToKey(tableCache.GetRecordCount() - 1);
        };
        this.RecordKeyToViewIdx = function(recordKey) {
            var viewIdx = paneMgr.RecordKeyToViewIdx(recordKey);

            if (viewIdx != null) {
                return viewIdx;
            }
            var recordIdx;

            if (objBag.entryRecordMgr.IsEntryRecordKey(recordKey)) {
                recordIdx = objBag.entryRecordMgr.GetEntryRecordIdx(recordKey) + this.GetViewRecordCount();
            }
            else {
                recordIdx = tableCache.KeyToRecordIdx(recordKey);
            }
            return recordIdx == null ? null : this.RecordIdxToViewIdx(recordIdx);
        };
        this.RecordKeyToRelViewIdx = function(recordKey) {
            var viewIdx = this.RecordKeyToViewIdx(recordKey);

            return viewIdx != null ? this.ViewIdxToRelViewIdx(viewIdx) : null;
        };
        this.RecordKeyToRecordIdx = function(recordKey) {
            var viewIdx = paneMgr.RecordKeyToViewIdx(recordKey);

            return viewIdx != null ? this.ViewIdxToRecordIdx(viewIdx) : tableCache.KeyToRecordIdx(recordKey);
        };
        this.ViewIdxToRecordKey = function(viewIdx) {
            return this.RecordIdxToRecordKey(this.ViewIdxToRecordIdx(viewIdx));
        };
        this.GetViewRecordCount = function() {
            return hierarchyMgr ? hierarchyMgr.GetViewRecordCount() : tableCache.GetRecordCount();
        };
        this.GetViewRecords = function(viewIdx, count, fnCallback) {
            var newRecordCount = 0;

            if (objBag.editUtil.IsNewRowEnabled()) {
                newRecordCount = Math.min(Math.max(viewIdx + count - this.GetViewRecordCount(), 0), count);
            }
            count -= newRecordCount;
            var result = count == 0 ? null : hierarchyMgr ? hierarchyMgr.GetViewRecords(viewIdx, count, PostProcess) : tableCache.GetRecords([{
                pos: viewIdx,
                count: count
            }], PostProcess);

            if (result == null) {
                result = {
                    recordSetComplete: true,
                    records: []
                };
            }
            else {
                result.records = SP.Internal.JS.Flatten2LevelArray(result.records);
            }
            if (newRecordCount > 0) {
                var newRecordIdx = Math.max(viewIdx - this.GetViewRecordCount(), 0);

                result.records = result.records.concat((objBag.entryRecordMgr.GetEntryRecords()).slice(newRecordIdx, newRecordIdx + newRecordCount));
            }
            return result;
            function PostProcess(requestedRanges, bRecordFetchSucceeded) {
                fnCallback(viewIdx, count, bRecordFetchSucceeded);
            }
        };
    };
    SP.JsGrid.PrintPreviewGrid = function() {
        var _jsGridControl;
        var _jsGridParams;
        var _groupingStyles;
        var _tableCache;
        var _recordFactory;
        var _bLimitRecordSize = false;
        var _enableGantt = false;
        var _ganttDelegateNames = null;
        var _ganttPaneWidth;
        var _ganttZoomLevel;

        this.Init = function(jsGridControl, tableViewParams, groupingStyles, blob, keyColumnName, defaultDisplayControlMap, lookupPropTypeMap, beforeInitFnName, beforeInitFnArgsObj, initTableViewParamsFnName, initTableViewParamsFnArgsObj, bEnableGantt, ganttDelegateNames, ganttPaneWidth, ganttZoomLevel, initGanttStylesFnName, initGanttStylesFnArgsObj) {
            _enableGantt = bEnableGantt;
            _ganttDelegateNames = ganttDelegateNames;
            _ganttPaneWidth = ganttPaneWidth;
            _ganttZoomLevel = ganttZoomLevel;
            _groupingStyles = groupingStyles;
            function ConvertDataToRecords(data, keys) {
                var r = new Array(keys.length);

                for (var i in keys) {
                    var rawRecInfo = data[keys[i]];
                    var record = _recordFactory.MakeRecord(rawRecInfo.data, rawRecInfo.localized, _bLimitRecordSize);

                    record.fieldRawDataMap = rawRecInfo.fieldRawDataMap;
                    record.fieldRawLocMap = rawRecInfo.fieldRawLocMap;
                    r[keys[i]] = record;
                }
                return r;
            }
            SP.JsGrid.Internal.Property.RegisterDefaultPropTypesFromDefaultDisplayControlMap(defaultDisplayControlMap, lookupPropTypeMap);
            fnInitJsGridParams = CallGlobalFunc(beforeInitFnName, [beforeInitFnArgsObj]);
            _jsGridControl = jsGridControl;
            _jsGridParams = new SP.JsGrid.JsGridControl.Parameters();
            _jsGridParams.name = String.format(SP.JsGrid.Res.printPreviewName, _jsGridControl.name);
            _jsGridParams.tableViewParams = tableViewParams;
            for (var gridFieldName in _jsGridParams.tableViewParams.gridFieldMap) {
                var gridField = _jsGridParams.tableViewParams.gridFieldMap[gridFieldName];

                if (gridField._propType != null) {
                    if (gridField._propType.ID in lookupPropTypeMap || !gridField._propType.bMultiValue) {
                        if (SP.JsGrid.Internal.Property.PropTypeExists(gridField._propType.ID)) {
                            gridField._propType = SP.JsGrid.Internal.Property.GetPropType(gridField._propType.ID);
                        }
                    }
                    else if (gridField._propType.bMultiValue) {
                        gridField._propType = new SP.JsGrid.PropertyType.MultiValuePropType(gridField._propType.singleValuePropType.ID, gridField._propType.separator, !SP.JsGrid.Internal.Property.PropTypeExists(gridField._propType.singleValuePropType.ID));
                    }
                }
            }
            if (fnInitJsGridParams != null && typeof fnInitJsGridParams == 'function') {
                fnInitJsGridParams(_jsGridParams, _jsGridControl);
            }
            CallGlobalFunc(initTableViewParamsFnName, [_jsGridParams.tableViewParams, initTableViewParamsFnArgsObj]);
            CallGlobalFunc(initGanttStylesFnName, [_jsGridParams.tableViewParams, _jsGridControl, initGanttStylesFnArgsObj]);
            _tableCache = new SP.JsGrid.TableCache(null, ConvertDataToRecords);
            LoadDataIntoTableCache(blob, tableViewParams.gridFieldMap, keyColumnName);
            _jsGridParams.tableCache = _tableCache;
            SetJsGridParameters();
            _jsGridControl.Init(_jsGridParams);
            $addHandler(window.document.body, 'mouseup', function() {
                var previousWidth = parseInt(($get("jsgrid_div_element")).clientWidth);
                var newWidth = AdjustPrintPreviewGridDivWidth(_jsGridControl.GetColumns(), _jsGridParams.tableViewParams.bRowHeadersEnabled, _enableGantt, _ganttPaneWidth);

                _jsGridControl.NotifyResize();
                if (_enableGantt) {
                    var currentSplitterPos = _jsGridControl.GetSplitterPosition();

                    _jsGridControl.SetSplitterPosition(currentSplitterPos + (newWidth - previousWidth));
                }
            });
            setTimeout(function() {
                window.print();
            }, 0);
        };
        function CallGlobalFunc(globalFnName, args) {
            if (globalFnName == null) {
                return null;
            }
            var splitName = globalFnName.split('.');
            var currentNamespace = window;

            for (var idx = 0; idx < splitName.length; ++idx) {
                if (idx == splitName.length - 1 && splitName[idx] in currentNamespace && typeof currentNamespace[splitName[idx]] == 'function') {
                    return currentNamespace[splitName[idx]].apply(null, args);
                }
                else if (splitName[idx] in currentNamespace) {
                    currentNamespace = currentNamespace[splitName[idx]];
                }
                else {
                    break;
                }
            }
            return null;
        }
        function LoadDataIntoTableCache(blob, gridFieldMap, keyColumnName) {
            _tableCache.Clear();
            _tableCache.AddRawDataToCache(SP.Internal.JS.ConvertSetKeysToArray(blob), blob);
            _recordFactory = new SP.JsGrid.RecordFactory(gridFieldMap, keyColumnName);
        }
        function SetJsGridParameters() {
            _jsGridParams.styleManager.groupingStyles = _groupingStyles;
            if (_enableGantt) {
                _jsGridParams.tableViewParams.splitterPos = parseInt(($get("jsgrid_div_element")).clientWidth, 10) - _ganttPaneWidth - SP.JsGrid.Internal.SplitterWidth;
                _jsGridParams.tableViewParams.ganttParams.ganttZoomLevel = _ganttZoomLevel;
                if (_ganttDelegateNames != null) {
                    if (_ganttDelegateNames.fnGetGanttBarDate != null && _ganttDelegateNames.fnGetGanttBarDate in window) {
                        _jsGridParams.tableViewParams.ganttParams.fnGetGanttBarDate = window[_ganttDelegateNames.fnGetGanttBarDate];
                    }
                    if (_ganttDelegateNames.fnGetGanttBarStyleIds != null && _ganttDelegateNames.fnGetGanttBarStyleIds in window) {
                        _jsGridParams.tableViewParams.ganttParams.fnGetGanttBarStyleIds = window[_ganttDelegateNames.fnGetGanttBarStyleIds];
                    }
                    if (_ganttDelegateNames.fnRenderGanttRow != null && _ganttDelegateNames.fnRenderGanttRow in window) {
                        _jsGridParams.tableViewParams.ganttParams.fnRenderGanttRow = window[_ganttDelegateNames.fnRenderGanttRow];
                    }
                    if (_ganttDelegateNames.fnGetPredecessors != null && _ganttDelegateNames.fnGetPredecessors in window) {
                        _jsGridParams.tableViewParams.ganttParams.fnGetPredecessors = window[_ganttDelegateNames.fnGetPredecessors];
                    }
                }
            }
            else {
                _jsGridParams.tableViewParams.ganttParams = null;
                _jsGridParams.tableViewParams.paneLayout = SP.JsGrid.PaneLayout.GridOnly;
            }
            _jsGridParams.tableViewParams.bMovableColumns = true;
            _jsGridParams.tableViewParams.bResizableColumns = true;
            _jsGridParams.tableViewParams.bEditingEnabled = false;
            _jsGridParams.tableViewParams.allowedSelectionTypes = 0;
            _jsGridParams.tableViewParams.bNewRowEnabled = false;
            _jsGridParams.tableViewParams.bSortableColumns = false;
            _jsGridParams.tableViewParams.bHidableColumns = false;
            _jsGridParams.tableViewParams.bAutoFilterableColumns = false;
            _jsGridParams.tableViewParams.bRecordIndicatorCheckboxesEnabled = false;
        }
    };
    SP.JsGrid.CreatePrintPreviewBlobFromRecords = function(records) {
        var blob = {};

        for (var idx = 0; idx < records.length; ++idx) {
            var record = records[idx];
            var dataMap = {};
            var localizedMap = {};

            for (var columnKey in record.properties) {
                dataMap[columnKey] = record.properties[columnKey].dataValue;
                if (record.properties[columnKey].HasLocalizedValue()) {
                    localizedMap[columnKey] = record.properties[columnKey].localizedValue;
                }
            }
            blob[record.key()] = {
                data: dataMap,
                localized: localizedMap,
                fieldRawDataMap: record.fieldRawDataMap,
                fieldRawLocMap: record.fieldRawLocMap
            };
        }
        return blob;
    };
    SP.JsGrid.JsGridControl.TableViewParameters.CreateFromSerializedClone = function(serializedClone) {
        var tableViewParams = new SP.JsGrid.JsGridControl.TableViewParameters();
        var members = SP.JsGrid.Internal.JSONParse(serializedClone);

        tableViewParams.messageOverrides = members.simpleFields.messageOverrides;
        tableViewParams.operationalConstantsFieldKeyMap = members.simpleFields.operationalConstantsFieldKeyMap;
        tableViewParams.defaultEditMode = members.simpleFields.defaultEditMode;
        tableViewParams.allowedSelectionTypes = members.simpleFields.allowedSelectionTypes;
        tableViewParams.bMovableColumns = members.simpleFields.bMovableColumns;
        tableViewParams.bResizableColumns = members.simpleFields.bResizableColumns;
        tableViewParams.bHidableColumns = members.simpleFields.bHidableColumns;
        tableViewParams.bSortableColumns = members.simpleFields.bSortableColumns;
        tableViewParams.bAutoFilterableColumns = members.simpleFields.bAutoFilterableColumns;
        tableViewParams.bRowHeadersEnabled = members.simpleFields.bRowHeadersEnabled;
        tableViewParams.bRecordIndicatorCheckboxesEnabled = members.simpleFields.bRecordIndicatorCheckboxesEnabled;
        tableViewParams.checkSelectionCheckboxHiddenRecordKeys = members.simpleFields.checkSelectionCheckboxHiddenRecordKeys;
        tableViewParams.checkSelectionCheckboxDisabledRecordKeys = members.simpleFields.checkSelectionCheckboxDisabledRecordKeys;
        tableViewParams.checkSelectionCheckedRecordKeys = members.simpleFields.checkSelectionCheckedRecordKeys;
        tableViewParams.bEditingEnabled = members.simpleFields.bEditingEnabled;
        tableViewParams.bNewRowEnabled = members.simpleFields.bNewRowEnabled;
        tableViewParams.hierarchyKey = members.simpleFields.hierarchyKey;
        tableViewParams.splitterPos = members.simpleFields.splitterPos;
        tableViewParams.paneLayout = members.simpleFields.paneLayout;
        tableViewParams.rowViewParams = members.simpleFields.rowViewParams;
        var gfMap = SP.JsGrid.Internal.JSONParse(members.gridFieldMap);

        tableViewParams.gridFieldMap = {};
        for (var key in gfMap) {
            tableViewParams.gridFieldMap[key] = SP.JsGrid.GridField.CreateFromSerializedClone(gfMap[key]);
        }
        tableViewParams.columns = SP.JsGrid.ColumnInfoCollection.CreateFromSerializedClone(members.columns);
        if (members.pivotedGridParams_columns != null) {
            tableViewParams.pivotedGridParams = new SP.JsGrid.JsGridControl.PivotedGridParameters();
            tableViewParams.pivotedGridParams.columns = SP.JsGrid.ColumnInfoCollection.CreateFromSerializedClone(members.pivotedGridParams_columns);
        }
        if (members.ganttParams != null) {
            tableViewParams.ganttParams = SP.JsGrid.JsGridControl.GanttParameters.CreateFromSerializedClone(members.ganttParams);
        }
        if (members.unfilteredHierarchyMgr != null) {
            tableViewParams.rowViewParams.unfilteredHierarchyMgr = SP.JsGrid.UnfilteredHierarchyManager.CreateFromSerializedClone(members.unfilteredHierarchyMgr);
        }
        return tableViewParams;
    };
    SP.JsGrid.UnfilteredHierarchyManager.GetSerializedClone = function(tableViewParams) {
        return Sys.Serialization.JavaScriptSerializer.serialize({
            unfilteredHierMap: tableViewParams.rowViewParams.unfilteredHierarchyMgr.GetUnfilteredHierarchyMap(),
            topNodeKey: tableViewParams.rowViewParams.unfilteredHierarchyMgr.GetTopNodeKey()
        });
    };
    SP.JsGrid.UnfilteredHierarchyManager.CreateFromSerializedClone = function(serializedClone) {
        var mgr = new SP.JsGrid.UnfilteredHierarchyManager([]);
        var members = SP.JsGrid.Internal.JSONParse(serializedClone);

        mgr.Hydrate(members.unfilteredHierMap, members.topNodeKey);
        return mgr;
    };
    SP.JsGrid.JsGridControl.TableViewParameters.GetSerializedClone = function(tableViewParams) {
        var gfMap = {};

        for (var key in tableViewParams.gridFieldMap) {
            gfMap[key] = SP.JsGrid.GridField.GetSerializedClone(tableViewParams.gridFieldMap[key]);
        }
        return Sys.Serialization.JavaScriptSerializer.serialize({
            simpleFields: {
                messageOverrides: tableViewParams.messageOverrides,
                operationalConstantsFieldKeyMap: tableViewParams.operationalConstantsFieldKeyMap,
                defaultEditMode: tableViewParams.defaultEditMode,
                allowedSelectionTypes: tableViewParams.allowedSelectionTypes,
                bMovableColumns: tableViewParams.bMovableColumns,
                bResizableColumns: tableViewParams.bResizableColumns,
                bHidableColumns: tableViewParams.bHidableColumns,
                bSortableColumns: tableViewParams.bSortableColumns,
                bAutoFilterableColumns: tableViewParams.bAutoFilterableColumns,
                bRowHeadersEnabled: tableViewParams.bRowHeadersEnabled,
                bRecordIndicatorCheckboxesEnabled: tableViewParams.bRecordIndicatorCheckboxesEnabled,
                checkSelectionCheckboxHiddenRecordKeys: tableViewParams.checkSelectionCheckboxHiddenRecordKeys,
                checkSelectionCheckboxDisabledRecordKeys: tableViewParams.checkSelectionCheckboxDisabledRecordKeys,
                checkSelectionCheckedRecordKeys: tableViewParams.checkSelectionCheckedRecordKeys,
                bEditingEnabled: tableViewParams.bEditingEnabled,
                bNewRowEnabled: tableViewParams.bNewRowEnabled,
                hierarchyKey: tableViewParams.hierarchyKey,
                splitterPos: tableViewParams.splitterPos,
                paneLayout: tableViewParams.paneLayout,
                rowViewParams: tableViewParams.rowViewParams
            },
            gridFieldMap: Sys.Serialization.JavaScriptSerializer.serialize(gfMap),
            columns: SP.JsGrid.ColumnInfoCollection.GetSerializedClone(tableViewParams.columns),
            pivotedGridParams_columns: tableViewParams.pivotedGridParams == null ? null : SP.JsGrid.ColumnInfoCollection.GetSerializedClone(tableViewParams.pivotedGridParams.columns),
            ganttParams: tableViewParams.ganttParams == null ? null : SP.JsGrid.JsGridControl.GanttParameters.GetSerializedClone(tableViewParams.ganttParams),
            unfilteredHierarchyMgr: tableViewParams.rowViewParams.unfilteredHierarchyMgr == null ? null : SP.JsGrid.UnfilteredHierarchyManager.GetSerializedClone(tableViewParams)
        });
    };
    SP.JsGrid.JsGridControl.GanttParameters.GetSerializedClone = function(ganttParams) {
        return Sys.Serialization.JavaScriptSerializer.serialize({
            dateRange: ganttParams.dateRange,
            ganttBarStyles: ganttParams.ganttBarStyles,
            ganttZoomLevel: ganttParams.ganttZoomLevel
        });
    };
    SP.JsGrid.JsGridControl.GanttParameters.CreateFromSerializedClone = function(serializedClone) {
        var ganttParams = new SP.JsGrid.JsGridControl.GanttParameters();
        var members = SP.JsGrid.Internal.JSONParse(serializedClone);

        ganttParams.dateRange = members.dateRange;
        ganttParams.ganttBarStyles = members.ganttBarStyles;
        ganttParams.ganttZoomLevel = members.ganttZoomLevel;
        return ganttParams;
    };
    SP.JsGrid.GridField.GetSerializedClone = function(gridField) {
        return Sys.Serialization.JavaScriptSerializer.serialize({
            key: gridField.key,
            hasDataValue: gridField.hasDataValue,
            hasLocalizedValue: gridField.hasLocalizedValue,
            textDirection: gridField.textDirection,
            _defaultCellStyleId: gridField._defaultCellStyleId,
            _editMode: gridField._editMode,
            _propType: gridField._propType,
            _multiValue: gridField._multiValue
        });
    };
    SP.JsGrid.GridField.CreateFromSerializedClone = function(serializedClone) {
        var gridField = new SP.JsGrid.GridField();
        var members = SP.JsGrid.Internal.JSONParse(serializedClone);

        gridField.key = members.key;
        gridField.hasDataValue = members.hasDataValue;
        gridField.hasLocalizedValue = members.hasLocalizedValue;
        gridField.textDirection = members.textDirection;
        gridField._defaultCellStyleId = members._defaultCellStyleId;
        gridField._editMode = members._editMode;
        gridField._multiValue = members._multiValue;
        gridField._propType = members._propType;
        return gridField;
    };
    SP.JsGrid.GetSerializedCloneFromColumnInfo = function(columnInfo) {
        if (columnInfo.ColumnType() == 'column') {
            return Sys.Serialization.JavaScriptSerializer.serialize({
                name: columnInfo.name,
                imgSrc: columnInfo.imgSrc,
                columnKey: columnInfo.columnKey,
                fieldKeys: columnInfo.fieldKeys,
                width: columnInfo.width,
                isVisible: columnInfo.isVisible,
                isHidable: columnInfo.isHidable,
                isResizable: columnInfo.isResizable,
                isSortable: columnInfo.isSortable,
                isAutoFilterable: columnInfo.isAutoFilterable,
                pivoted: false
            });
        }
        else if (columnInfo.ColumnType() == 'pivotedColumn') {
            return Sys.Serialization.JavaScriptSerializer.serialize({
                name: columnInfo.name,
                imgSrc: columnInfo.imgSrc,
                columnKey: columnInfo.columnKey,
                fieldKeys: columnInfo.fieldKeys,
                width: columnInfo.width,
                pivoted: true
            });
        }
    };
    SP.JsGrid.CreateColumnInfoFromSerializedClone = function(serializedClone) {
        var obj = SP.JsGrid.Internal.JSONParse(serializedClone);
        var columnInfo;

        if (obj.pivoted) {
            columnInfo = new SP.JsGrid.PivotedColumnInfo(obj.name, obj.imgSrc, obj.columnKey, obj.fieldKeys, obj.width);
        }
        else {
            columnInfo = new SP.JsGrid.ColumnInfo(obj.name, obj.imgSrc, obj.columnKey, obj.width);
            columnInfo.isVisible = obj.isVisible;
            columnInfo.isHidable = obj.isHidable;
            columnInfo.isResizable = obj.isResizable;
            columnInfo.isSortable = obj.isSortable;
            columnInfo.isAutoFilterable = obj.isAutoFilterable;
        }
        return columnInfo;
    };
    SP.JsGrid.ColumnInfoCollection.GetSerializedClone = function(columns) {
        var ciArray = [];
        var colInfoArray = columns.GetColumnArray();

        for (var idx = 0; idx < colInfoArray.length; ++idx) {
            ciArray.push(SP.JsGrid.GetSerializedCloneFromColumnInfo(colInfoArray[idx]));
        }
        return Sys.Serialization.JavaScriptSerializer.serialize(ciArray);
    };
    SP.JsGrid.ColumnInfoCollection.CreateFromSerializedClone = function(serializedClone) {
        var colInfoArray = [];
        var ciArray = SP.JsGrid.Internal.JSONParse(serializedClone);

        for (var idx = 0; idx < ciArray.length; ++idx) {
            colInfoArray.push(SP.JsGrid.CreateColumnInfoFromSerializedClone(ciArray[idx]));
        }
        return new SP.JsGrid.ColumnInfoCollection(colInfoArray);
    };
    SP.JsGrid.FinishLaunchPrintPreview = function(records, jsGridParams, additionalScriptFiles, beforeInitFnName, beforeInitFnArgsObj, initTableViewParamsFnName, initTableViewParamsFnArgsObj, title, bEnableGantt, optGanttDelegateNames, ganttPaneWidth, ganttZoomLevel, initGanttStylesFnName, initGanttStylesFnArgsObj) {
        var newWin;
        var cssLinkScripts = [];
        var AJAXScripts = [];
        var scripts = [];
        var requiredScriptFiles = ['scriptresx.ashx', 'jsgrid.js', 'sp.datetimeutil.js', 'jsgrid.gantt.js', 'init.js', 'strings.js'];
        var requiredAJAXFiles = ['scriptresource.axd', 'webresource.axd'];

        function MatchNodeWithSourceFiles(node, requiredFilesArray, htmlElementArray, attrib) {
            var nodeStr = (eval('node.' + attrib)).toLowerCase();

            if (requiredFilesArray != null) {
                for (var idx = 0; idx < requiredFilesArray.length; ++idx) {
                    var fileName = requiredFilesArray[idx].toLowerCase();

                    if (nodeStr.indexOf(fileName) != -1 || fileName.indexOf('.js') == fileName.length - 3 && nodeStr.indexOf(fileName.substr(0, fileName.length - 3) + '.debug.js') != -1) {
                        htmlElementArray.push(SP.Internal.DomElement.GetOuterHTML(node));
                        return true;
                    }
                }
            }
        }
        function CopyRequiredDOMElements(node) {
            for (var idx = 0; idx < node.childNodes.length; ++idx) {
                var childNode = node.childNodes[idx];

                if (childNode.nodeType == 1) {
                    CopyRequiredDOMElements(childNode);
                }
            }
            if (node.nodeName == 'LINK' && node.rel == "stylesheet") {
                cssLinkScripts.push(SP.Internal.DomElement.GetOuterHTML(node));
            }
            else if (node.nodeName == 'SCRIPT') {
                if (MatchNodeWithSourceFiles(node, requiredScriptFiles, scripts, 'src'))
                    return;
                if (MatchNodeWithSourceFiles(node, additionalScriptFiles, scripts, 'src'))
                    return;
                if (MatchNodeWithSourceFiles(node, requiredAJAXFiles, AJAXScripts, 'src'))
                    return;
            }
        }
        function RenderHTMLElementArray(htmlElementArray) {
            for (var idx = 0; idx < htmlElementArray.length; ++idx) {
                newWin.document.writeln(htmlElementArray[idx]);
            }
        }
        function RenderPrintPreviewDocument() {
            newWin = window.open();
            newWin.document.writeln('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"');
            newWin.document.writeln('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">');
            newWin.document.writeln('<html style="height:100%;margin:0px;">');
            newWin.document.writeln('<head>');
            newWin.document.writeln('<title>' + SP.JsGrid.Utility.HTMLEncode(title) + '</title>');
            RenderHTMLElementArray(cssLinkScripts);
            RenderHTMLElementArray(AJAXScripts);
            newWin.document.writeln('</head>');
            newWin.document.writeln('<body style="overflow:auto;height:100%;margin:0px;">');
            newWin.document.writeln('<div id="jsgrid_div_element" style="width:100%; min-height:100%;height:570px;" display="block"/>');
            newWin.document.writeln(String.format(['<script>', 'var _spRegionalSettings={0}', '</script>'].join('\n'), Sys.Serialization.JavaScriptSerializer.serialize(_spRegionalSettings)));
            RenderHTMLElementArray(scripts);
            newWin.document.writeln(String.format(['<script>', 'Sys.Application.initialize();', 'var printPreviewGrid = new SP.JsGrid.PrintPreviewGrid();', 'Sys.Application.add_init(function()', '{{', '    var jsGridDiv = $get("jsgrid_div_element");', '    jsGridDiv.style.backgroundColor = "white";', '    var defaultDisplayControlMap = SP.JsGrid.Internal.JSONParse(unescape("{0}"));', '    var lookupPropTypeMap = SP.JsGrid.Internal.JSONParse(unescape("{8}"));', '    var tableViewParams = new SP.JsGrid.JsGridControl.TableViewParameters.CreateFromSerializedClone(unescape("{1}"));', '    var dataBlob = SP.JsGrid.Internal.JSONParse(unescape("{2}"));', '    var recordCount = {3};', '    jsGridDiv.style.height = (recordCount * 22 + 50) + "px";', '    AdjustPrintPreviewGridDivWidth(tableViewParams.columns.GetColumnArray(), tableViewParams.bRowHeadersEnabled, {9}, {11});', '    var keyColumnName = unescape("{4}");', '    printPreviewGrid.Init(', '        new SP.JsGrid.JsGridControl(jsGridDiv, false),', '        tableViewParams,', '        SP.JsGrid.Internal.JSONParse(unescape("{7}")),', '        dataBlob,', '        keyColumnName,', '        defaultDisplayControlMap,', '        lookupPropTypeMap,', '        {5},', '        SP.JsGrid.Internal.JSONParse(unescape("{6}")),', '        {13},', '        SP.JsGrid.Internal.JSONParse(unescape("{14}")),', '        {9},', '        SP.JsGrid.Internal.JSONParse(unescape("{10}")),', '        {11},', '        {12},', '        {16},', '        SP.JsGrid.Internal.JSONParse(unescape("{17}"))', '    );', '}});', 'Sys.CultureInfo.CurrentCulture = (', 'function(a)', '{{', '   return new Sys.CultureInfo(a.name,a.numberFormat,a.dateTimeFormat)', '}}', ')(SP.JsGrid.Internal.JSONParse(unescape("{15}")));', '</script>', '</body>', '</html>'].join('\n'), escape(Sys.Serialization.JavaScriptSerializer.serialize(SP.JsGrid.Internal.Property.GetDefaultDisplayControlMap())), escape(SP.JsGrid.JsGridControl.TableViewParameters.GetSerializedClone(jsGridParams.tableViewParams)), escape(Sys.Serialization.JavaScriptSerializer.serialize(SP.JsGrid.CreatePrintPreviewBlobFromRecords(records))), records.length, escape(jsGridParams.tableViewParams.keyFieldName), beforeInitFnName ? ['"', beforeInitFnName, '"'].join('') : 'null', escape(Sys.Serialization.JavaScriptSerializer.serialize(beforeInitFnArgsObj)), escape(Sys.Serialization.JavaScriptSerializer.serialize(jsGridParams.styleManager.groupingStyles)), escape(Sys.Serialization.JavaScriptSerializer.serialize(SP.JsGrid.Internal.Property.GetLookupPropTypeMap())), bEnableGantt ? 'true' : 'false', escape(Sys.Serialization.JavaScriptSerializer.serialize(optGanttDelegateNames)), ganttPaneWidth, ganttZoomLevel, initTableViewParamsFnName ? ['"', initTableViewParamsFnName, '"'].join('') : 'null', escape(Sys.Serialization.JavaScriptSerializer.serialize(initTableViewParamsFnArgsObj)), escape(Sys.Serialization.JavaScriptSerializer.serialize(Sys.CultureInfo.CurrentCulture)), initGanttStylesFnName ? ['"', initGanttStylesFnName, '"'].join('') : 'null', escape(Sys.Serialization.JavaScriptSerializer.serialize(initGanttStylesFnArgsObj))));
            newWin.document.close();
        }
        CopyRequiredDOMElements(document);
        RenderPrintPreviewDocument();
    };
    if (!Type.isNamespace('SP.JsGrid.PropertyType')) {
        Type.registerNamespace('SP.JsGrid.PropertyType');
    }
    SP.JsGrid.PropertyType.String = function() {
        this.ID = 'String';
        this.BeginValidateNormalizeConvert = function(recordKey, fieldKey, newValue, bIsLocalized, fnCallback, fnError) {
            newValue = newValue != null && newValue.length == 0 ? null : newValue;
            fnCallback({
                isValid: true,
                dataValue: newValue,
                normalizedLocValue: newValue
            });
        };
        this.toString = function() {
            return this.ID;
        };
    };
    SP.JsGrid.PropertyType.LookupTable = function(items, id, bLimitToList) {
        function GetItemFromData(dataValue) {
            if (dataValue == null) {
                return null;
            }
            return SP.Internal.JS.Find(items, function(item) {
                return item.value == dataValue;
            });
        }
        function GetItemFromLocalized(newValue) {
            if (newValue == null) {
                return null;
            }
            var lowerValue = newValue.toLowerCase();

            return SP.Internal.JS.Find(items, function(item) {
                return item.localString.toLowerCase() == lowerValue;
            });
        }
        return {
            ID: id,
            BeginValidateNormalizeConvert: function(recordKey, fieldKey, newValue, bIsLocalized, fnCallback, fnError) {
                var r = {};
                var item = bIsLocalized ? GetItemFromLocalized(newValue) : GetItemFromData(newValue);

                r.isValid = item != null || !bLimitToList;
                if (item != null) {
                    r.normalizedLocValue = item.localString;
                    r.dataValue = item.value;
                }
                else {
                    r.normalizedLocValue = (r.dataValue = newValue);
                }
                fnCallback(r);
            },
            GetItems: function(fnCallback) {
                var r = [];

                for (var i = 0; i < items.length; i++) {
                    r.push(SP.JsGrid.Property.MakeProperty(items[i].value, items[i].localString, true, true, this));
                }
                fnCallback(r);
            },
            DataToLocalized: function(dataValue) {
                var r = GetItemFromData(dataValue);

                return r ? r.localString : SP.JsGrid.EmptyValue;
            },
            LocalizedToData: function(localizedValue) {
                var r = GetItemFromLocalized(localizedValue);

                return r ? r.value : SP.JsGrid.EmptyValue;
            },
            GetImageSource: function(record, dataValue) {
                var item = GetItemFromData(dataValue);

                return item != null ? item.imageUrl : null;
            },
            GetStyleId: function(dataValue) {
                var item = GetItemFromData(dataValue);

                return item != null ? item.styleId : null;
            },
            GetIsLimitedToList: function() {
                return bLimitToList;
            },
            GetSerializableLookupPropType: function() {
                return {
                    items: items,
                    id: id,
                    bLimitToList: bLimitToList
                };
            }
        };
    };
    SP.JsGrid.PropertyType.CheckBoxBoolean = function() {
        this.ID = 'CheckBoxBoolean';
        this.BeginValidateNormalizeConvert = function(recordKey, fieldKey, newValue, bIsLocalized, fnCallback, fnError) {
            if (typeof newValue == "string" || newValue.constructor == String) {
                newValue = newValue.toUpperCase();
            }
            if (!bIsLocalized && typeof newValue != "boolean") {
                newValue = newValue == "1";
            }
            newValue = bIsLocalized ? newValue != "" && newValue != SP.JsGrid.Res.checkboxUnchecked.toUpperCase() : !!newValue;
            fnCallback({
                isValid: true,
                dataValue: newValue,
                normalizedLocValue: this.DataToLocalized(newValue)
            });
        };
        this.DataToLocalized = function(dataValue) {
            if (typeof dataValue != "boolean") {
                dataValue = dataValue == "1";
            }
            return dataValue ? SP.JsGrid.Res.checkboxChecked : SP.JsGrid.Res.checkboxUnchecked;
        };
        this.GetBool = function(dataValue) {
            if (typeof dataValue != "boolean") {
                dataValue = dataValue == "1";
            }
            return dataValue == SP.JsGrid.EmptyValue ? false : !!dataValue;
        };
        this.toString = function() {
            return this.ID;
        };
    };
    SP.JsGrid.PropertyType.DropdownBoolean = function() {
        this.ID = 'DropdownBoolean';
        this.BeginValidateNormalizeConvert = function(recordKey, fieldKey, newValue, bIsLocalized, fnCallback, fnError) {
            if (typeof newValue == "string" || newValue.constructor == String) {
                newValue = newValue.toUpperCase();
            }
            if (!bIsLocalized && typeof newValue != "boolean") {
                newValue = newValue == "1";
            }
            newValue = bIsLocalized ? newValue != "" && newValue != SP.JsGrid.Res.booleanNo.toUpperCase() : !!newValue;
            fnCallback({
                isValid: true,
                dataValue: newValue,
                normalizedLocValue: this.DataToLocalized(newValue)
            });
        };
        this.DataToLocalized = function(dataValue) {
            if (typeof dataValue != "boolean") {
                dataValue = dataValue == "1";
            }
            return dataValue ? SP.JsGrid.Res.booleanYes : SP.JsGrid.Res.booleanNo;
        };
        this.GetBool = function(dataValue) {
            if (typeof dataValue != "boolean") {
                dataValue = dataValue == "1";
            }
            return dataValue == SP.JsGrid.EmptyValue ? false : !!dataValue;
        };
        this.GetItems = function(fnCallback) {
            var r = [];

            for (var i = 0; i < 2; i++) {
                var locValue = i == 1 ? SP.JsGrid.Res.booleanYes : SP.JsGrid.Res.booleanNo;

                r.push(SP.JsGrid.Property.MakeProperty(i, locValue, true, true, this));
            }
            fnCallback(r);
        };
        this.toString = function() {
            return this.ID;
        };
    };
    SP.JsGrid.PropertyType.MultiValuePropType = function(singleValuePropTypeID, separatorChar, bDelayInit, bAllowDuplicateValues) {
        var svPropType = null;

        function InitSVPropType() {
            svPropType = SP.JsGrid.Internal.Property.GetPropType(singleValuePropTypeID);
            _this.singleValuePropType = svPropType;
            _this.GetImageSource = svPropType.GetImageSource && function(record, dataValue) {
                return ForEachInArray(dataValue, function(singleDataValue) {
                    return svPropType.GetImageSource(record, singleDataValue);
                });
            };
            _this.GetItems = svPropType.GetItems;
            _this.GetUpdateTrackingMode = svPropType.GetUpdateTrackingMode;
            _this.GetUpdateSerializeMode = svPropType.GetUpdateSerializeMode;
            _this.DataToLocalized = svPropType.DataToLocalized && function(dataValue) {
                return _this.LocStrArrayToLocStr(ForEachInArray(dataValue, function(singleDataValue) {
                    return svPropType.DataToLocalized(singleDataValue);
                }));
            };
            _this.LocalizedToData = svPropType.LocalizedToData && function(localizedValue) {
                return ForEachInArray(_this.LocStrToLocStrArray(localizedValue), function(singleLocalizedValue) {
                    return svPropType.LocalizedToData(singleLocalizedValue);
                });
            };
            _this.GetDisplayValue = svPropType.GetDisplayValue && function(record, dataValue, locValue) {
                var r = [];

                if (dataValue != null && dataValue != SP.JsGrid.EmptyValue && dataValue != SP.JsGrid.InvalidValue) {
                    var lvs = _this.LocStrToLocStrArray(locValue);

                    for (var i = 0; i < dataValue.length; i++) {
                        r.push(svPropType.GetDisplayValue(record, dataValue[i], i >= lvs.length ? null : lvs[i]));
                    }
                }
                else {
                    r.push(svPropType.GetDisplayValue(record, dataValue, locValue));
                }
                return SP.Internal.JS.JoinStrings(r, separatorChar + ' ');
            };
        }
        this.ID = singleValuePropTypeID + '_MultiValue';
        this.bMultiValue = true;
        this.separator = separatorChar;
        this.singleValuePropType = svPropType;
        var _this = this;

        if (!bDelayInit) {
            InitSVPropType();
        }
        this.GetSerializableMultiValuePropType = function() {
            return {
                singleValuePropTypeID: singleValuePropTypeID,
                separatorChar: separatorChar,
                bDelayInit: bDelayInit
            };
        };
        this.InitSingleValuePropType = function() {
            InitSVPropType();
        };
        this.BeginValidateNormalizeConvert = function(recordKey, fieldKey, newValue, bIsLocalized, fnCallback, fnError) {
            if (bIsLocalized && newValue == '' || !bIsLocalized && (newValue == null || newValue.length == 0)) {
                fnCallback({
                    isValid: true,
                    dataValue: [],
                    normalizedLocValue: ''
                });
                return;
            }
            if (bIsLocalized) {
                newValue = this.LocStrToLocStrArray(newValue);
            }
            Sys.Debug.assert(newValue.constructor == Array);
            var groupedResults;
            var idx = 0;

            LoopBody();
            return;
            function LoopBody() {
                svPropType.BeginValidateNormalizeConvert(recordKey, fieldKey, newValue[idx], bIsLocalized, LoopControl, fnError);
            }
            function LoopControl(singleRet) {
                AccumulateResult(singleRet);
                idx++;
                if (idx < newValue.length) {
                    LoopBody();
                }
                else {
                    fnCallback(GetNormalizedResult());
                }
            }
            function AccumulateResult(singleRet) {
                if (idx == 0) {
                    groupedResults = {
                        isValid: singleRet.isValid,
                        dataValue: [singleRet.dataValue],
                        normalizedLocValue: [singleRet.normalizedLocValue]
                    };
                }
                else {
                    groupedResults.isValid = groupedResults.isValid && singleRet.isValid;
                    groupedResults.dataValue.push(singleRet.dataValue);
                    groupedResults.normalizedLocValue.push(singleRet.normalizedLocValue);
                }
            }
            function GetNormalizedResult() {
                if (groupedResults != null) {
                    if (groupedResults.isValid) {
                        if (!bAllowDuplicateValues) {
                            var eqFn = svPropType.IsDataEqual;
                            var results = groupedResults.dataValue;

                            for (var i = 0; i < results.length; i++) {
                                for (var j = 0; j < results.length; j++) {
                                    if (i == j)
                                        continue;
                                    if (eqFn == null ? results[i] == results[j] : eqFn(results[i], results[j])) {
                                        results.splice(j, 1);
                                    }
                                }
                            }
                        }
                        groupedResults.normalizedLocValue = _this.LocStrArrayToLocStr(groupedResults.normalizedLocValue);
                        return groupedResults;
                    }
                    else {
                        return {
                            isValid: false
                        };
                    }
                }
                return {
                    isValid: true,
                    dataValue: null,
                    normalizedLocValue: null
                };
            }
        };
        this.LocStrToLocStrArray = function(locStr) {
            if (locStr && locStr.constructor != String) {
                return [];
            }
            return SP.Internal.JS.TokenizeString(locStr, separatorChar);
        };
        this.LocStrArrayToLocStr = function(locStrArray) {
            return SP.Internal.JS.JoinStrings(locStrArray, separatorChar + ' ');
        };
        function ForEachInArray(array, fn) {
            if (array == null) {
                return null;
            }
            var r = [];

            for (var i = 0; i < array.length; i++) {
                r.push(fn(array[i]));
            }
            return r;
        }
    };
    SP.JsGrid.PropertyType.Hyperlink = function() {
        this.ID = 'Hyperlink';
        this.bHyperlink = true;
        var _serializedValueStartsEndsWith = '"';
        var _serializedValueSeparator = '", "';
        var _serializedValueSeparatorEncoded = encodeURIComponent(_serializedValueSeparator);

        this.BeginValidateNormalizeConvert = function(recordKey, fieldKey, newValue, bIsLocalized, fnCallback, fnError) {
            var dataValue = bIsLocalized ? Deserialize(newValue) : newValue;

            fnCallback({
                isValid: dataValue != null,
                dataValue: dataValue,
                normalizedLocValue: this.DataToLocalized(dataValue)
            });
        };
        this.DataToLocalized = function(dataValue) {
            return dataValue ? dataValue.display : '';
        };
        this.GetAddress = function(dataValue) {
            return dataValue ? dataValue.address : '';
        };
        this.GetCopyValue = function(record, dataValue, locValue) {
            return Serialize(dataValue);
        };
        function Serialize(dataValue) {
            if (!dataValue) {
                return null;
            }
            var address = dataValue.address.replace(_serializedValueSeparator, _serializedValueSeparatorEncoded);

            return String.format('{0}{1}{2}{3}{0}', _serializedValueStartsEndsWith, address, _serializedValueSeparator, dataValue.display);
        }
        ;
        function Deserialize(locValue) {
            if (locValue == null) {
                return null;
            }
            if (locValue.length == 0) {
                locValue = '';
            }
            var separatorPos = locValue.indexOf(_serializedValueSeparator);

            if (separatorPos < 0 || !locValue.startsWith(_serializedValueStartsEndsWith) || !locValue.endsWith(_serializedValueStartsEndsWith)) {
                return {
                    address: locValue,
                    display: locValue
                };
            }
            return {
                address: (locValue.substring(1, separatorPos)).replace(_serializedValueSeparatorEncoded, _serializedValueSeparator),
                display: locValue.substring(separatorPos + _serializedValueSeparator.length, locValue.length - 1)
            };
        }
        this.toString = function() {
            return this.ID;
        };
    };
    SP.JsGrid.PropertyType.RegisterNewLookupPropType = function(id, items, displayCtrlName, bLimitToList) {
        Sys.Debug.assert(displayCtrlName == SP.JsGrid.DisplayControl.Type.Image || displayCtrlName == SP.JsGrid.DisplayControl.Type.ImageText || displayCtrlName == SP.JsGrid.DisplayControl.Type.Text);
        var pt = new SP.JsGrid.PropertyType.LookupTable(items, id, bLimitToList);

        SP.JsGrid.Internal.Property.RegisterPropType(pt, displayCtrlName, SP.JsGrid.EditControl.Type.ComboBox, []);
    };
    SP.JsGrid.PropertyType.RegisterNewCustomPropType = function(propType, displayCtrlName, editControlName, widgetControlNames) {
        SP.JsGrid.Internal.Property.RegisterPropType(propType, displayCtrlName, editControlName, widgetControlNames);
    };
    SP.JsGrid.PropertyType.RegisterNewDerivedCustomPropType = function(propType, baseTypeName) {
        SP.JsGrid.Internal.Property.RegisterDerivedPropType(propType, baseTypeName);
    };
    if (!Type.isNamespace('SP.JsGrid.PropertyType.Utils')) {
        Type.registerNamespace('SP.JsGrid.PropertyType.Utils');
    }
    SP.JsGrid.PropertyType.Utils.RegisterDisplayControl = function(name, singleton, requiredFunctionNames) {
        SP.JsGrid.Internal.Property.RegisterDisplayControl(name, singleton, requiredFunctionNames);
    };
    SP.JsGrid.PropertyType.Utils.RegisterEditControl = function(name, factory, requiredFunctionNames) {
        SP.JsGrid.Internal.Property.RegisterEditControl(name, factory, requiredFunctionNames);
    };
    SP.JsGrid.PropertyType.Utils.RegisterWidgetControl = function(name, factory, requiredFunctionNames) {
        SP.JsGrid.Internal.Property.RegisterWidgetControl(name, factory, requiredFunctionNames);
    };
    SP.JsGrid.PropertyType.Utils.UpdateDisplayControlForPropType = function(propTypeName, displayControlName) {
        SP.JsGrid.Internal.Property.UpdateDisplayControlForPropType(propTypeName, displayControlName);
    };
    SP.JsGrid.PropertyType.Utils.UpdateEditControlForPropType = function(propTypeName, editControlName) {
        SP.JsGrid.Internal.Property.UpdateEditControlForPropType(propTypeName, editControlName);
    };
    SP.JsGrid.PropertyType.Utils.UpdateWidgetControlsForPropType = function(propTypeName, widgetControlNames) {
        SP.JsGrid.Internal.Property.UpdateWidgetControlsForPropType(propTypeName, widgetControlNames);
    };
    SP.JsGrid.PropertyType.Utils.GetPropType = function(propTypeName) {
        return SP.JsGrid.Internal.Property.GetPropType(propTypeName);
    };
    SP.JsGrid.PropertyType.Utils.GetPropTypes = function() {
        return SP.JsGrid.Internal.Property.GetPropTypes();
    };
    SP.JsGrid.Internal.Property = function() {
        var _this = this;
        var propTypeInfoTable = [[new SP.JsGrid.PropertyType.String(), SP.JsGrid.DisplayControl.Type.Text, SP.JsGrid.EditControl.Type.EditBox, []], [new SP.JsGrid.PropertyType.CheckBoxBoolean(), SP.JsGrid.DisplayControl.Type.Checkbox, SP.JsGrid.EditControl.Type.Checkbox, []], [new SP.JsGrid.PropertyType.DropdownBoolean(), SP.JsGrid.DisplayControl.Type.Text, SP.JsGrid.EditControl.Type.ComboBox, []], [new SP.JsGrid.PropertyType.Hyperlink(), SP.JsGrid.DisplayControl.Type.Text, SP.JsGrid.EditControl.Type.Hyperlink, [SP.JsGrid.WidgetControl.Type.Hyperlink]]];
        var propSingletonMap = SP.Internal.JS.ConvertTableToMap(propTypeInfoTable, '0', '1');
        var displayControlInfoTable = [[SP.JsGrid.DisplayControl.Type.Image, SP.JsGrid.DisplayControl.ImageDisplayControl, ['GetImageSource']], [SP.JsGrid.DisplayControl.Type.ImageText, SP.JsGrid.DisplayControl.ImageTextDisplayControl, ['GetImageSource']], [SP.JsGrid.DisplayControl.Type.Text, SP.JsGrid.DisplayControl.TextDisplayControl, []], [SP.JsGrid.DisplayControl.Type.Checkbox, SP.JsGrid.DisplayControl.CheckboxDisplayControl, ['GetBool']], [SP.JsGrid.DisplayControl.Type.CSR, SP.JsGrid.DisplayControl.CSRDisplayControl, []], [SP.JsGrid.DisplayControl.Type.User, SP.JsGrid.DisplayControl.UserDisplayControl, ['GetSipAddress']]];
        var displayControlsSingletonMap = SP.Internal.JS.ConvertTableToMap(displayControlInfoTable, '0', '1');
        var displayControlInterfaceMap = SP.Internal.JS.ConvertTableToMap(displayControlInfoTable, '0', '2');
        var editControlInfoTable = [[SP.JsGrid.EditControl.Type.EditBox, function(editControlGridContext, gridTextInputElement) {
            return new SP.JsGrid.EditControl.EditBoxEditControl(editControlGridContext, gridTextInputElement);
        }, []], [SP.JsGrid.EditControl.Type.ComboBox, function(editControlGridContext) {
            return new SP.JsGrid.EditControl.ComboBoxEditControl(editControlGridContext);
        }, ['GetItems']], [SP.JsGrid.EditControl.Type.Checkbox, function(editControlGridContext) {
            return new SP.JsGrid.EditControl.CheckboxEditControl(editControlGridContext);
        }, ['GetBool']], [SP.JsGrid.EditControl.Type.Hyperlink, function(editControlGridContext, gridTextInputElement) {
            return SP.JsGrid.EditControl.GetHyperlinkEditControl(editControlGridContext, gridTextInputElement);
        }, []]];
        var editControlsFactoryMap = SP.Internal.JS.ConvertTableToMap(editControlInfoTable, '0', '1');
        var editControlInterfaceMap = SP.Internal.JS.ConvertTableToMap(editControlInfoTable, '0', '2');
        var widgetControlInfoTable = [[SP.JsGrid.WidgetControl.Type.Date, function(widgetControlGridContext) {
            return new SP.JsGrid.WidgetControl.DateWidget(widgetControlGridContext);
        }, []], [SP.JsGrid.WidgetControl.Type.AddressBook, function(widgetControlGridContext) {
            return new SP.JsGrid.WidgetControl.AddressBookWidget(widgetControlGridContext);
        }, ['GetPeoplePickerUrl']], [SP.JsGrid.WidgetControl.Type.Hyperlink, function(widgetControlGridContext) {
            return new SP.JsGrid.WidgetControl.HyperlinkWidget(widgetControlGridContext);
        }, ['GetAddress']], [SP.JsGrid.ErrorWidgetId, function(widgetControlGridContext, errorMgr) {
            return new SP.JsGrid.WidgetControl.ErrorWidget(widgetControlGridContext, errorMgr);
        }, []]];
        var widgetControlsFactoryMap = SP.Internal.JS.ConvertTableToMap(widgetControlInfoTable, '0', '1');
        var widgetControlInterfaceMap = SP.Internal.JS.ConvertTableToMap(widgetControlInfoTable, '0', '2');
        var defaultControlsMap = {};
        var eligibleControlsMap = {};

        this.GetDefaultDisplayControlMap = function() {
            var map = {};

            for (var propTypeName in defaultControlsMap) {
                map[propTypeName] = defaultControlsMap[propTypeName].display.Id;
            }
            return map;
        };
        this.RegisterDefaultPropTypesFromDefaultDisplayControlMap = function(displayControlMap, lookupPropTypeMap) {
            if (lookupPropTypeMap == null) {
                lookupPropTypeMap = {};
            }
            for (var propTypeName in displayControlMap) {
                if (defaultControlsMap[propTypeName] == undefined) {
                    RegisterDefaultDisplayPropTypeInternal(propTypeName, this.GetDisplayControl(displayControlMap[propTypeName]), lookupPropTypeMap);
                }
            }
        };
        this.GetLookupPropTypeMap = function() {
            var map = {};

            for (var propTypeName in propSingletonMap) {
                if (propSingletonMap[propTypeName].GetSerializableLookupPropType != null) {
                    map[propTypeName] = propSingletonMap[propTypeName].GetSerializableLookupPropType();
                }
                else if (propSingletonMap[propTypeName].bMultiValue && propSingletonMap[propTypeName].singleValuePropType.GetSerializableLookupPropType != null) {
                    map[propTypeName] = propSingletonMap[propTypeName].GetSerializableMultiValuePropType();
                }
            }
            return map;
        };
        this.RegisterDisplayControl = function(name, singleton, requiredFunctionNames) {
            displayControlsSingletonMap[name] = singleton;
            displayControlInterfaceMap[name] = requiredFunctionNames;
            eligibleControlsMap = {};
        };
        this.RegisterEditControl = function(name, factory, requiredFunctionNames) {
            editControlsFactoryMap[name] = factory;
            editControlInterfaceMap[name] = requiredFunctionNames;
            eligibleControlsMap = {};
        };
        this.RegisterWidgetControl = function(name, factory, requiredFunctionNames) {
            widgetControlsFactoryMap[name] = factory;
            widgetControlInterfaceMap[name] = requiredFunctionNames;
            eligibleControlsMap = {};
        };
        this.GetPropType = function(propTypeName) {
            Sys.Debug.assert(propTypeName in propSingletonMap);
            return propSingletonMap[propTypeName];
        };
        this.GetPropTypes = function() {
            var propTypes = [];

            for (var propTypeName in propSingletonMap) {
                propTypes.push(propTypeName);
            }
            return propTypes;
        };
        this.PropTypeExists = function(propTypeName) {
            return propTypeName in propSingletonMap;
        };
        this.GetDisplayControl = function(displayControlName) {
            Sys.Debug.assert(displayControlName in displayControlsSingletonMap);
            return displayControlsSingletonMap[displayControlName];
        };
        this.GetEditControl = function(name, factoryArgs) {
            Sys.Debug.assert(name in editControlsFactoryMap, String.format("Edit control named {0} needs to be registered before being instatiated."));
            var factory = editControlsFactoryMap[name];

            return factory.apply(null, factoryArgs);
        };
        this.GetWidgetControl = function(name, factoryArgs) {
            Sys.Debug.assert(name in widgetControlsFactoryMap, String.format("Widget control named {0} needs to be registered before being instatiated."));
            var factory = widgetControlsFactoryMap[name];

            return factory.apply(null, factoryArgs);
        };
        this.GetUpdateTrackingMode = function(propType, gridField) {
            if (propType.GetUpdateTrackingMode != null) {
                return propType.GetUpdateTrackingMode();
            }
            Sys.Debug.assert(gridField == null || gridField.hasDataValue || gridField.hasLocalizedValue);
            return gridField != null && gridField.hasDataValue ? gridField.hasLocalizedValue ? SP.JsGrid.UpdateTrackingMode.PropBoth : SP.JsGrid.UpdateTrackingMode.PropData : SP.JsGrid.UpdateTrackingMode.PropLocalized;
        };
        this.GetUpdateSerializeMode = function(propType, gridField) {
            if (propType && propType.GetUpdateSerializeMode != null) {
                return propType.GetUpdateSerializeMode();
            }
            var serializeMode = propType != null && gridField != null ? this.GetUpdateTrackingMode(propType, gridField) : SP.JsGrid.UpdateSerializeMode.PropBoth;

            if (serializeMode == SP.JsGrid.UpdateSerializeMode.PropBoth) {
                serializeMode = SP.JsGrid.UpdateSerializeMode.PropLocalizedOnly;
            }
            return serializeMode;
        };
        function RegisterDefaultDisplayPropTypeInternal(propTypeID, defaultDisplayControl, lookupPropTypeMap) {
            if (propTypeID in lookupPropTypeMap) {
                var propTypeArgs = lookupPropTypeMap[propTypeID];

                if (propTypeArgs.singleValuePropTypeID != null) {
                    propSingletonMap[propTypeID] = new SP.JsGrid.PropertyType.MultiValuePropType(propTypeArgs.singleValuePropTypeID, propTypeArgs.separatorChar, propTypeArgs.bDelayInit);
                }
                else {
                    propSingletonMap[propTypeID] = new SP.JsGrid.PropertyType.LookupTable(propTypeArgs.items, propTypeArgs.id, propTypeArgs.bLimitToList);
                }
            }
            delete eligibleControlsMap[propTypeID];
            defaultControlsMap[propTypeID] = {
                display: defaultDisplayControl,
                editControlName: '',
                widgetControlNames: []
            };
        }
        this.RegisterPropType = function(propTypeObj, defaultDisplayControlName, defaultEditControlName, defaultWidgetControlNames) {
            defaultWidgetControlNames = defaultWidgetControlNames == null ? [] : defaultWidgetControlNames;
            RegisterPropTypeInternal(propTypeObj, this.GetDisplayControl(defaultDisplayControlName), defaultEditControlName, defaultWidgetControlNames);
        };
        this.RegisterDerivedPropType = function(propTypeObj, basePropTypeName) {
            var defs = defaultControlsMap[basePropTypeName];

            RegisterPropTypeInternal(propTypeObj, defs.display, defs.editControlName, defs.widgetControlNames);
        };
        function RegisterPropTypeInternal(propTypeObj, defaultDisplayControl, defaultEditControlName, defaultWidgetControlNames) {
            propSingletonMap[propTypeObj.ID] = propTypeObj;
            delete eligibleControlsMap[propTypeObj.ID];
            defaultControlsMap[propTypeObj.ID] = {
                display: defaultDisplayControl,
                editControlName: defaultEditControlName,
                widgetControlNames: defaultWidgetControlNames
            };
        }
        ;
        this.UpdateDisplayControlForPropType = function(propTypeID, displayControlName) {
            Sys.Debug.assert(propSingletonMap[propTypeID] != null);
            Sys.Debug.assert(defaultControlsMap[propTypeID] != null);
            defaultControlsMap[propTypeID].display = this.GetDisplayControl(displayControlName);
        };
        this.UpdateEditControlForPropType = function(propTypeID, editControlName) {
            Sys.Debug.assert(propSingletonMap[propTypeID] != null);
            Sys.Debug.assert(defaultControlsMap[propTypeID] != null);
            defaultControlsMap[propTypeID].editControlName = editControlName;
        };
        this.UpdateWidgetControlsForPropType = function(propTypeID, widgetControlNames) {
            Sys.Debug.assert(propSingletonMap[propTypeID] != null);
            Sys.Debug.assert(defaultControlsMap[propTypeID] != null);
            defaultControlsMap[propTypeID].widgetControlNames = widgetControlNames;
        };
        this.GetDisplayControlForProperty = function(propType, optControlName) {
            if (optControlName != null) {
                return this.GetDisplayControl(optControlName);
            }
            return defaultControlsMap[propType.ID].display;
        };
        this.GetEditAndWidgetControlNamesForProperty = function(record, column, fieldKey, propType) {
            var editControlName, widgetControlNames;
            var name;

            if (column.fnGetEditControlName != null && (name = column.fnGetEditControlName(record, fieldKey)) != null) {
                editControlName = name;
            }
            else {
                editControlName = defaultControlsMap[propType.ID].editControlName;
            }
            var names;

            if (column.fnGetWidgetControlNames != null && (names = column.fnGetWidgetControlNames(record, fieldKey)) != null) {
                widgetControlNames = names;
            }
            else {
                widgetControlNames = [].concat(defaultControlsMap[propType.ID].widgetControlNames);
            }
            return {
                editControlName: editControlName,
                widgetControlNames: widgetControlNames
            };
        };
        function Init() {
            for (var i in propTypeInfoTable) {
                var entry = propTypeInfoTable[i];

                _this.RegisterPropType(entry[0], entry[1], entry[2], entry[3]);
            }
            InitLocalNumericTypesForGrid();
            InitLocalDateTypeForGrid();
        }
        function JSDateTime(id, formatString) {
            this.ID = id;
            this.BeginValidateNormalizeConvert = function(recordKey, fieldKey, newValue, bIsLocalized, fnCallback) {
                var r = {};
                var dateTime = bIsLocalized ? Date.parseLocale(newValue) || Date.parseInvariant(newValue) || Date.parse(newValue) : newValue.getTime != null ? newValue : new Date(+newValue);

                dateTime = dateTime != null ? new Date(dateTime) : null;
                r.isValid = dateTime != null && !isNaN(dateTime.getTime());
                r.dataValue = r.isValid ? dateTime : null;
                r.normalizedLocValue = r.isValid ? dateTime.localeFormat(formatString) : null;
                fnCallback(r);
            };
        }
        function InitCheckBoxTypeForGrid() {
        }
        function InitLocalDateTypeForGrid() {
            _this.RegisterPropType(new JSDateTime('JSDateTime', Sys.CultureInfo.CurrentCulture.dateTimeFormat.ShortDatePattern), SP.JsGrid.DisplayControl.Type.Text, SP.JsGrid.EditControl.Type.EditBox, [SP.JsGrid.WidgetControl.Type.Date]);
        }
        function InitLocalNumericTypesForGrid() {
            var basePrototype = {
                BeginValidateNormalizeConvert: function(recordKey, fieldKey, newValue, bIsLocalized, fnCallback, fnError) {
                    var _this = this;

                    function HandleParse(toParse) {
                        toParse = _this.PreParse != null ? _this.PreParse(toParse) : toParse;
                        var r = Number.parseLocale(toParse);

                        return _this.PostParse != null ? _this.PostParse(r) : r;
                    }
                    function HandleCast(toCast) {
                        return newValue.format != null ? newValue : Number.parseInvariant(newValue + '');
                    }
                    var result = bIsLocalized ? HandleParse(newValue) : HandleCast(newValue);
                    var locValue = result.localeFormat(this.FormatString);

                    fnCallback({
                        isValid: !isNaN(result),
                        dataValue: this.ProcessData != null ? this.ProcessData(result) : result,
                        normalizedLocValue: this.ProcessLocalized != null ? this.ProcessLocalized(result, locValue) : locValue
                    });
                },
                CompareTo: function(dv1, dv2) {
                    Sys.Debug.assert(typeof dv1 == 'number' && typeof dv2 == 'number');
                    return dv1 - dv2;
                }
            };
            var typeGenerationInfo = [{
                ID: 'JSNumber',
                FormatString: 'D'
            }];

            for (var idx in typeGenerationInfo) {
                var type = SP.Internal.JS.object(typeGenerationInfo[idx]);

                type.BeginValidateNormalizeConvert = basePrototype.BeginValidateNormalizeConvert;
                type.CompareTo = basePrototype.CompareTo;
                _this.RegisterPropType(type, SP.JsGrid.DisplayControl.Type.Text, SP.JsGrid.EditControl.Type.EditBox, []);
            }
        }
        Init();
    };
    SP.JsGrid.RecordFactory = function(gridFieldMap, keyColumnName, fnGetPropType) {
        this.gridFieldMap = gridFieldMap;
        this.MakeRecord = function(dataPropMap, localizedPropMap, bKeepRawData) {
            var r = new Record();

            r.recordKey = dataPropMap[keyColumnName];
            for (var fieldKey in gridFieldMap) {
                var gf = gridFieldMap[fieldKey];
                var prop = SP.JsGrid.Property.MakePropertyFromGridField(gf, dataPropMap[fieldKey], localizedPropMap[fieldKey], fnGetPropType != null && !gf.GetIsMultiValue() ? fnGetPropType(r.recordKey, gf.key, dataPropMap) : null);

                if (prop != null) {
                    r.properties[fieldKey] = prop;
                    if (!bKeepRawData) {
                        delete dataPropMap[fieldKey];
                        delete localizedPropMap[fieldKey];
                    }
                }
            }
            r.fieldRawDataMap = dataPropMap != null ? dataPropMap : {};
            r.fieldRawLocMap = localizedPropMap != null ? localizedPropMap : {};
            return r;
        };
        var Record = function() {
            this.properties = {};
        };

        Record.prototype = {
            key: function() {
                return this.recordKey;
            },
            GetDataValue: function(fieldKey) {
                return fieldKey in this.properties ? this.properties[fieldKey].GetData() : this.fieldRawDataMap[fieldKey];
            },
            GetLocalizedValue: function(fieldKey) {
                return fieldKey in this.properties ? this.properties[fieldKey].GetLocalized() : this.fieldRawLocMap[fieldKey];
            },
            HasDataValue: function(fieldKey) {
                return fieldKey in this.properties ? this.properties[fieldKey].HasDataValue() : fieldKey in this.fieldRawDataMap;
            },
            HasLocalizedValue: function(fieldKey) {
                return fieldKey in this.properties ? this.properties[fieldKey].HasLocalizedValue() : fieldKey in this.fieldRawLocMap;
            },
            GetProp: function(fieldKey) {
                return this.properties[fieldKey];
            },
            SetProp: function(fieldKey, prop) {
                Sys.Debug.assert(fieldKey in this.properties);
                this.properties[fieldKey] = prop;
            },
            AddFieldValue: function(fieldKey, value) {
                if (value.isProp) {
                    this.properties[fieldKey] = value.prop;
                }
                else if (fieldKey in this.properties) {
                    this.properties[fieldKey].Update(value.hasData ? value.data : SP.JsGrid.EmptyValue, value.hasLocalized ? value.localized : SP.JsGrid.EmptyValue);
                }
                else {
                    if (value.hasLocalized) {
                        this.fieldRawLocMap[fieldKey] = value.localized;
                    }
                    if (value.hasData) {
                        this.fieldRawDataMap[fieldKey] = value.data;
                    }
                }
            },
            RemoveFieldValue: function(fieldKey) {
                delete this.properties[fieldKey];
                delete this.fieldRawLocMap[fieldKey];
                delete this.fieldRawDataMap[fieldKey];
            }
        };
    };
    SP.JsGrid.Property = (function() {
        PropertyBase = function(dataValue, localizedValue, propType) {
            if (propType != null) {
                this.propType = propType;
            }
            if (dataValue != null) {
                this.dataValue = dataValue;
            }
            if (localizedValue != null) {
                this.localizedValue = localizedValue;
            }
        };
        LocalizedProperty = function(localizedValue, propType) {
            this.localizedValue = localizedValue;
            if (propType != null) {
                this.propType = propType;
            }
        };
        DataProperty = function(dataValue, propType) {
            this.dataValue = dataValue;
            if (propType != null) {
                this.propType = propType;
            }
        };
        PropertyBase.prototype = {
            HasLocalizedValue: function() {
                return true;
            },
            HasDataValue: function() {
                return true;
            },
            Clone: function() {
                return SP.JsGrid.Property.MakeProperty(SP.Internal.JS.CloneObj(this.dataValue), this.localizedValue, true, true, this.propType);
            },
            Update: function(dataValue, localizedValue) {
                if (dataValue != SP.JsGrid.EmptyValue) {
                    this.dataValue = dataValue != SP.JsGrid.InvalidValue ? SP.Internal.JS.CloneObj(dataValue) : dataValue;
                }
                if (localizedValue != SP.JsGrid.EmptyValue) {
                    this.localizedValue = localizedValue;
                }
            },
            GetLocalized: function() {
                return this.localizedValue;
            },
            GetData: function() {
                return this.dataValue;
            }
        };
        DataProperty.prototype = {
            HasLocalizedValue: function() {
                return this.propType.DataToLocalized != null;
            },
            HasDataValue: function() {
                return true;
            },
            Clone: function() {
                return SP.JsGrid.Property.MakeProperty(SP.Internal.JS.CloneObj(this.dataValue), this.localizedValue, true, false, this.propType);
            },
            Update: function(dataValue, localizedValue) {
                if (dataValue != SP.JsGrid.EmptyValue) {
                    this.dataValue = dataValue != SP.JsGrid.InvalidValue ? SP.Internal.JS.CloneObj(dataValue) : dataValue;
                }
            },
            GetLocalized: function() {
                Sys.Debug.assert(this.HasLocalizedValue());
                return this.dataValue != SP.JsGrid.InvalidValue ? this.propType.DataToLocalized(this.dataValue) : '';
            },
            GetData: function() {
                return this.dataValue;
            }
        };
        LocalizedProperty.prototype = {
            HasLocalizedValue: function() {
                return true;
            },
            HasDataValue: function() {
                return this.propType.LocalizedToData != null;
            },
            Clone: function() {
                return SP.JsGrid.Property.MakeProperty(SP.Internal.JS.CloneObj(this.dataValue), this.localizedValue, false, true, this.propType);
            },
            Update: function(dataValue, localizedValue) {
                if (localizedValue != SP.JsGrid.EmptyValue) {
                    this.localizedValue = localizedValue;
                }
            },
            GetLocalized: function() {
                return this.localizedValue;
            },
            GetData: function() {
                Sys.Debug.assert(this.HasDataValue());
                return this.localizedValue != SP.JsGrid.InvalidValue ? this.propType.LocalizedToData(this.localizedValue) : null;
            }
        };
        return {
            MakeProperty: function(dataValue, localizedValue, bHasDataValue, bHasLocalizedValue, propType) {
                if (bHasDataValue && bHasLocalizedValue) {
                    return new PropertyBase(dataValue, localizedValue, propType);
                }
                if (bHasDataValue) {
                    return new DataProperty(dataValue, propType);
                }
                return new LocalizedProperty(localizedValue, propType);
            },
            MakePropertyFromGridField: function(gridField, dataValue, localizedVal, optPropType) {
                var r = null;
                var propType = optPropType != null ? optPropType : gridField.GetPropType();

                if (propType != null) {
                    r = SP.JsGrid.Property.MakeProperty(dataValue, localizedVal, gridField.hasDataValue, gridField.hasLocalizedValue, propType);
                }
                return r;
            }
        };
    })();
    SP.JsGrid.Internal.PropertyUpdate = function(data, localized) {
        this.data = data;
        this.localized = localized;
    };
    SP.JsGrid.Internal.PropertyUpdate.prototype = {
        HasDataValue: function() {
            return this.data != SP.JsGrid.EmptyValue;
        },
        HasLocalizedValue: function() {
            return this.localized != SP.JsGrid.EmptyValue;
        }
    };
    SP.JsGrid.CreateUnvalidatedPropertyUpdate = function(recordKey, fieldKey, newValue, newValueIsLocalized) {
        return new SP.JsGrid.UnvalidatedPropertyUpdate(recordKey, fieldKey, newValue, newValueIsLocalized);
    };
    SP.JsGrid.CreateValidatedPropertyUpdate = function(recordKey, fieldKey, newDataValue, newLocalizedValue) {
        return new SP.JsGrid.ValidatedPropertyUpdate(recordKey, fieldKey, newDataValue, newLocalizedValue);
    };
    SP.JsGrid.UnvalidatedPropertyUpdate = function(recordKey, fieldKey, newValue, newValueIsLocalized) {
        this.recordKey = recordKey;
        this.fieldKey = fieldKey;
        this.newValue = newValue;
        this.newValueIsLocalized = newValueIsLocalized;
    };
    SP.JsGrid.UnvalidatedPropertyUpdate.prototype = {
        validated: false
    };
    SP.JsGrid.ValidatedPropertyUpdate = function(recordKey, fieldKey, newDataValue, newLocalizedValue) {
        this.recordKey = recordKey;
        this.fieldKey = fieldKey;
        this.newDataValue = newDataValue;
        this.newLocalizedValue = newLocalizedValue;
    };
    SP.JsGrid.ValidatedPropertyUpdate.prototype = {
        validated: true
    };
    SP.JsGrid.Internal.PropertyUpdateManager = function(objBag, fnAdjustPendingUpdateCount) {
        this.ApplyPropUpdates = function(updateRequests, changeKey) {
            for (var i = 0; i < updateRequests.length; i++) {
                ApplySinglePropUpdateRequest(updateRequests[i], changeKey);
            }
        };
        function ApplySinglePropUpdateRequest(updateRequest, changeKey) {
            if (updateRequest.validated) {
                AddPropChange(new SP.JsGrid.Internal.PropertyUpdate(updateRequest.newDataValue, updateRequest.newLocalizedValue), SP.JsGrid.ValidationState.Valid);
            }
            else {
                var propType = objBag.controller.GetPropType(updateRequest.recordKey, updateRequest.fieldKey);

                Sys.Debug.assert(propType != null);
                if (updateRequest.newValueIsLocalized) {
                    updateRequest.newValue = updateRequest.newValue == null ? '' : updateRequest.newValue.replace(/^\s+|\s+$/g, '');
                }
                var bAsync = true, bPending = false;

                propType.BeginValidateNormalizeConvert(updateRequest.recordKey, updateRequest.fieldKey, updateRequest.newValue, updateRequest.newValueIsLocalized, VncComplete, VncError);
                if (bAsync) {
                    objBag.pendingChangeMgr.IncrementPendingChangeCount(changeKey);
                    bPending = true;
                    AddPropChange(updateRequest.newValueIsLocalized ? new SP.JsGrid.Internal.PropertyUpdate(SP.JsGrid.InvalidValue, updateRequest.newValue) : new SP.JsGrid.Internal.PropertyUpdate(updateRequest.newValue, SP.JsGrid.InvalidValue), SP.JsGrid.ValidationState.Pending);
                }
            }
            function VncComplete(vncResult) {
                bAsync = false;
                if (vncResult.isValid) {
                    AddPropChange(new SP.JsGrid.Internal.PropertyUpdate(vncResult.dataValue, vncResult.normalizedLocValue), SP.JsGrid.ValidationState.Valid);
                }
                else {
                    AddPropChange(updateRequest.newValueIsLocalized ? new SP.JsGrid.Internal.PropertyUpdate(SP.JsGrid.InvalidValue, updateRequest.newValue) : new SP.JsGrid.Internal.PropertyUpdate(updateRequest.newValue, SP.JsGrid.InvalidValue), SP.JsGrid.ValidationState.Invalid, vncResult.errorMsg);
                }
                if (bPending) {
                    objBag.pendingChangeMgr.DecrementPendingChangeCount(changeKey);
                }
            }
            function VncError() {
                var vncResult = {
                    isValid: false,
                    errorMsg: SP.JsGrid.Res.vncfailed
                };

                VncComplete(vncResult);
            }
            function AddPropChange(propUpdate, validationState, errorMessage) {
                if (updateRequest.fieldKey != SP.JsGrid.RecordIndicatorCheckboxColumnKey) {
                    objBag.versionMgr.AddPropChange(updateRequest.recordKey, updateRequest.fieldKey, changeKey, propUpdate, validationState, errorMessage);
                }
                else {
                    if (propUpdate.data) {
                        objBag.checkSelMgr.ExternalAPI.CheckRecord(updateRequest.recordKey);
                    }
                    else {
                        objBag.checkSelMgr.ExternalAPI.UncheckRecord(updateRequest.recordKey);
                    }
                }
            }
        }
    };
    SP.JsGrid.Internal.PendingChangesManager = function(objBag) {
        var callbackCount = 0;
        var pendingCount = 0;
        var activeChangeKeys = {};
        var pendingCallbacks = [];
        var completeCallbacks = [];
        var pendingChangeKeys = {};
        var newRowChanges = {};

        objBag.intEventMgr.AttachEvent(SP.JsGrid.Internal.EventType.OnChangeKeyCreated, NotifyKeyCreated);
        objBag.intEventMgr.AttachEvent(SP.JsGrid.Internal.EventType.OnChangeKeyInitialUpdateFinished, NotifyKeyInitiallyComplete);
        objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnEntryRecordPropertyChanged, EntryRecordPropertyChanged);
        objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnEntryRecordCommitted, EntryRecordCommitted);
        objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnVacateChange, OnVacateChange);
        function OnVacateChange(args) {
            var version = args.changeKey.GetVersionNumber();

            delete activeChangeKeys[version];
            delete pendingChangeKeys[version];
        }
        function EntryRecordPropertyChanged(propertyChangedArgs) {
            var recKey = propertyChangedArgs.recordKey;

            if (!(recKey in newRowChanges)) {
                newRowChanges[recKey] = [];
            }
            newRowChanges[recKey].push(propertyChangedArgs.changeKey);
            IncrementPendingChangeCountForChangeKey(propertyChangedArgs.changeKey);
        }
        function EntryRecordCommitted(onEntryRecordCommittedArgs) {
            var recKey = onEntryRecordCommittedArgs.originalRecordKey;

            if (recKey in newRowChanges) {
                var changeKeys = newRowChanges[recKey];

                for (var i = 0; i < changeKeys.length; i++) {
                    TryFireChangeKeyCompleteEvent(changeKeys[i]);
                }
            }
        }
        function NotifyKeyCreated(changeKeyArgs) {
            var version = changeKeyArgs.changeKey.GetVersionNumber();

            activeChangeKeys[version] = changeKeyArgs.changeKey;
            pendingChangeKeys[version] = 1;
        }
        function NotifyKeyInitiallyComplete(changeKeyArgs) {
            TryFireChangeKeyCompleteEvent(changeKeyArgs.changeKey);
        }
        function TryFireChangeKeyCompleteEvent(changeKey) {
            var version = changeKey.GetVersionNumber();

            if (--pendingChangeKeys[version] == 0) {
                delete pendingChangeKeys[version];
                callbackCount++;
                setTimeout(function() {
                    callbackCount--;
                    objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnInitialChangesForChangeKeyComplete, new SP.JsGrid.EventArgs.PendingChangeKeyInitiallyComplete(changeKey));
                    delete activeChangeKeys[version];
                    if (completeCallbacks.length != 0 && !AnyActiveChanges()) {
                        for (var i = 0; i < completeCallbacks.length; i++) {
                            completeCallbacks[i]();
                        }
                        completeCallbacks = [];
                    }
                }, 0);
            }
        }
        function AnyActiveChanges() {
            var r = false;

            for (var version in activeChangeKeys) {
                if (objBag.controller.IsChangeKeyApplied(activeChangeKeys[version])) {
                    r = true;
                    break;
                }
            }
            return r;
        }
        function IncrementPendingChangeCountForChangeKey(changeKey) {
            var version = changeKey.GetVersionNumber();

            if (version in pendingChangeKeys) {
                pendingChangeKeys[version]++;
            }
            else {
                pendingChangeKeys[version] = 1;
            }
        }
        this.WaitForPendingUpdates = function(fnCallback) {
            if (fnCallback != null) {
                if (pendingCount != 0) {
                    pendingCallbacks.push(fnCallback);
                }
                else {
                    fnCallback();
                }
            }
        };
        this.WaitForAllChangeKeysToComplete = function(fnCallback) {
            if (fnCallback != null) {
                if (callbackCount != 0 || pendingCount != 0 || AnyActiveChanges()) {
                    completeCallbacks.push(fnCallback);
                }
                else {
                    fnCallback();
                }
            }
        };
        this.IncrementPendingChangeCount = function(changeKey) {
            pendingCount++;
            IncrementPendingChangeCountForChangeKey(changeKey);
        };
        this.DecrementPendingChangeCount = function(changeKey) {
            pendingCount--;
            if (pendingCount == 0 && pendingCallbacks.length != 0) {
                for (var i = 0; i < pendingCallbacks.length; i++) {
                    pendingCallbacks[i]();
                }
                pendingCallbacks = [];
            }
            TryFireChangeKeyCompleteEvent(changeKey);
        };
    };
    SP.JsGrid.Internal.RowHeaderStateManager = function(intEventMgr) {
        var _rowHeaderStates = {};

        this.AddRowHeaderState = function(recordKey, rowHeaderState) {
            var curRowState = null;

            if (!(recordKey in _rowHeaderStates)) {
                _rowHeaderStates[recordKey] = [];
            }
            else {
                curRowState = _rowHeaderStates[recordKey][0];
            }
            var curRowStates = _rowHeaderStates[recordKey];
            var idx = SP.Internal.JS.LowerBoundCompare(curRowStates, rowHeaderState.GetPriority(), function(idx, value) {
                return value > curRowStates[idx].GetPriority();
            });

            curRowStates.splice(idx, 0, rowHeaderState);
            if (curRowState == null || curRowStates[0].GetId() != curRowState.GetId()) {
                intEventMgr.FireEvent(SP.JsGrid.Internal.EventType.OnRowHeaderStateChanged, new SP.JsGrid.Internal.EventArgs.OnRowHeaderStateChanged(recordKey, curRowStates[0]));
            }
        };
        this.RemoveRowHeaderState = function(recordKey, rowHeaderId) {
            if (recordKey in _rowHeaderStates) {
                var curRowState = _rowHeaderStates[recordKey][0];

                RemoveLastStateWithId(_rowHeaderStates[recordKey], rowHeaderId);
                if (_rowHeaderStates[recordKey].length == 0) {
                    delete _rowHeaderStates[recordKey];
                }
                if (_rowHeaderStates[recordKey] == null || curRowState.GetId() != _rowHeaderStates[recordKey][0].GetId()) {
                    intEventMgr.FireEvent(SP.JsGrid.Internal.EventType.OnRowHeaderStateChanged, new SP.JsGrid.Internal.EventArgs.OnRowHeaderStateChanged(recordKey, _rowHeaderStates[recordKey] && _rowHeaderStates[recordKey][0]));
                }
            }
        };
        this.ChangeKeys = function(oldKey, newKey) {
            if (oldKey in _rowHeaderStates) {
                _rowHeaderStates[newKey] = _rowHeaderStates[oldKey];
                delete _rowHeaderStates[oldKey];
            }
        };
        this.GetRowHeaderState = function(recordKey) {
            return recordKey in _rowHeaderStates ? _rowHeaderStates[recordKey][0] : null;
        };
        function RemoveLastStateWithId(rowStates, id) {
            for (var i = 0; i < rowStates.length; i++) {
                if (rowStates[i].GetId() == id) {
                    rowStates.splice(i, 1);
                    break;
                }
            }
        }
    };
    SP.JsGrid.RowHeaderState = function(id, img, priority, tooltip, fnOnClick) {
        this.GetId = function() {
            return id;
        };
        this.GetImg = function() {
            return img;
        };
        this.GetPriority = function() {
            return priority;
        };
        this.GetOnClick = function() {
            return fnOnClick;
        };
        this.GetTooltip = function() {
            return tooltip;
        };
        this.toString = function() {
            return id;
        };
    };
    SP.JsGrid.AutoRowHeaderStates = function(enabledRowHeaderAutoStates, objBag) {
        var autoRowStates = [[SP.JsGrid.RowHeaderAutoStyleId.Dirty, function(id) {
            objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnCellEditBegin, OnCellEditBegin);
            objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnCellEditCompleted, OnCellEditCompleted);
            objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnRowFocusChanged, OnRowFocusChanged);
            var curRecordKey;
            var curEditCount;
            var headerState = objBag.rowHeaderStates[SP.JsGrid.RowHeaderAutoStyleId.Dirty];

            function OnCellEditCompleted(args) {
                if (args.bCancelled) {
                    curEditCount--;
                }
                if (curEditCount == 0 && args.bCancelled && args.recordKey == curRecordKey) {
                    objBag.jsGridObj.RemoveRowHeaderState(curRecordKey, id);
                }
            }
            function OnCellEditBegin(args) {
                if (curEditCount == 0) {
                    curRecordKey = args.recordKey;
                    objBag.jsGridObj.AddRowHeaderState(args.recordKey, headerState);
                }
                curEditCount++;
            }
            function OnRowFocusChanged(args) {
                if (curEditCount > 0) {
                    objBag.jsGridObj.RemoveRowHeaderState(curRecordKey, id);
                }
                curEditCount = 0;
                curRecordKey = args.recordKey;
            }
        }], [SP.JsGrid.RowHeaderAutoStyleId.Error, function(id) {
            var mainDiv = document.createElement('span');

            mainDiv.id = id + 'mainDiv';
            mainDiv.style.cssText = 'display:none; font-size:10; position:absolute; background-color:#FFE0E0; border:1px solid #DD3300; padding:5px 10px; color:#333333 !important';
            document.body.appendChild(mainDiv);
            var lastExpandedId = null;
            var lastFocusedRecordKey = null;
            var rowErrorId = id + 'RowError';
            var cellErrorHeaderState = new SP.JsGrid.RowHeaderState(id, new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'jsgridcluster.png', true, 'clip16x16', 'jsgridcluster_cell-error'), SP.JsGrid.RowHeaderStatePriorities.CellError, SP.JsGrid.Res.errorHeaderStateTooltip, function(eventInfo, recordKey) {
                if (lastFocusedRecordKey != recordKey) {
                    lastExpandedId = null;
                }
                lastExpandedId = objBag.jsGridObj.ScrollToAndExpandNextErrorOnRecord(lastExpandedId, recordKey);
                lastFocusedRecordKey = recordKey;
            });
            var rowErrorHeaderState = new SP.JsGrid.RowHeaderState(rowErrorId, new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'jsgridcluster.png', true, 'clip16x16', 'jsgridcluster_cell-error'), SP.JsGrid.RowHeaderStatePriorities.RowError, SP.JsGrid.Res.rowErrorToolTip, function(eventInfo, recordKey) {
                if (mainDiv.curRecKey != recordKey) {
                    mainDiv.curRecKey = recordKey;
                    mainDiv.style.display = '';
                    SP.Internal.DomElement.SetText(mainDiv, objBag.jsGridObj.GetRowErrorMessage(recordKey));
                    var elem = GetParentTd(eventInfo.target);

                    if (elem != null) {
                        var loc = SP.Internal.DomElement.GetLocation(elem);

                        mainDiv.style.left = loc.x + 'px';
                        mainDiv.style.top = loc.y + elem.offsetHeight + 2 + 'px';
                    }
                    else {
                        Sys.Debug.assert(false);
                        mainDiv.style.left = eventInfo.clientX + 5 + 'px';
                        mainDiv.style.top = eventInfo.clientY + 5 + 'px';
                    }
                }
                else {
                    mainDiv.curRecKey = null;
                    mainDiv.style.display = 'none';
                }
                function GetParentTd(elem) {
                    while (elem != null && elem.tagName.toUpperCase() != 'TD') {
                        elem = elem.parentNode;
                    }
                    return elem;
                }
            });

            objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnCellErrorStateChanged, UpdateCellErrorState);
            objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnRowErrorStateChanged, DispatchRowError);
            objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnRowFocusChanged, OnRowFocusChanged);
            objBag.intEventMgr.AttachEvent(SP.JsGrid.Internal.EventType.OnGridDisposing, function() {
                if (mainDiv != null) {
                    mainDiv.curRecKey = null;
                    mainDiv.innerHTML = '';
                    mainDiv = null;
                }
            });
            function UpdateCellErrorState(args) {
                if (args.bAddingError && !args.bCellHadError) {
                    objBag.jsGridObj.AddRowHeaderState(args.recordKey, cellErrorHeaderState);
                }
                else if (!args.bCellCurrentlyHasError) {
                    objBag.jsGridObj.RemoveRowHeaderState(args.recordKey, id);
                }
            }
            function DispatchRowError(args) {
                if (args.bAddingError && !args.bRowHadError) {
                    objBag.jsGridObj.AddRowHeaderState(args.recordKey, rowErrorHeaderState);
                }
                else if (!args.bErrorCurrentlyInRow) {
                    objBag.jsGridObj.RemoveRowHeaderState(args.recordKey, rowErrorId);
                }
            }
            function OnRowFocusChanged(args) {
                if (args.newRecordKey != lastFocusedRecordKey) {
                    lastExpandedId = null;
                    mainDiv.curRecKey = null;
                    mainDiv.style.display = 'none';
                }
            }
        }], [SP.JsGrid.RowHeaderAutoStyleId.NewRow, function(id) {
            var lastRecordKey = null;
            var imgSrc = objBag.spGrid ? GetThemedImageUrl("spcommon.png") : SP.JsGrid.ImagesDirectory + 'jsgridcluster.png';
            var className = objBag.spGrid ? 'ms-addcolumn-icon' : 'jsgridcluster_newrowheader';
            var headerState = new SP.JsGrid.RowHeaderState(id, new SP.JsGrid.Image(imgSrc, true, 'clip16x16', className), SP.JsGrid.RowHeaderStatePriorities.NewRow, '', null);

            objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnEntryRecordAdded, function(eventArgs) {
                if (lastRecordKey != null) {
                    objBag.jsGridObj.RemoveRowHeaderState(lastRecordKey, id);
                }
                objBag.jsGridObj.AddRowHeaderState(eventArgs.recordKey, headerState);
                lastRecordKey = eventArgs.recordKey;
            });
        }]];
        var idAutoRowStateMap = SP.Internal.JS.ConvertTableToMap(autoRowStates, 0, 1);

        for (var idx in idAutoRowStateMap) {
            if (enabledRowHeaderAutoStates.Contains(idx)) {
                idAutoRowStateMap[idx] = new idAutoRowStateMap[idx](idx);
            }
        }
        autoRowStates = null;
    };
    SP.JsGrid.RowHeaderStates = function(objBag) {
        this[SP.JsGrid.RowHeaderStyleId.Transfer] = new SP.JsGrid.RowHeaderState(SP.JsGrid.RowHeaderStyleId.Transfer, new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'loadingcirclests16.gif', false, 'clip16x16', '', true), SP.JsGrid.RowHeaderStatePriorities.Transfer, SP.JsGrid.Res.transferHeaderStateTooltip, null);
        this[SP.JsGrid.RowHeaderStyleId.Conflict] = new SP.JsGrid.RowHeaderState(SP.JsGrid.RowHeaderStyleId.Conflict, new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'jsgridcluster.png', true, 'clip16x16', 'jsgridcluster_conflictheader'), SP.JsGrid.RowHeaderStatePriorities.Conflict, objBag.delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.ExpandConflictResolution) ? SP.JsGrid.Res.conflictHeaderStateClickTooltip : SP.JsGrid.Res.conflictHeaderStateTooltip, objBag.delegateMgr.DelegatePresent(SP.JsGrid.DelegateType.ExpandConflictResolution) ? function(eventInfo, recordKey) {
            objBag.delegateMgr.Apply(SP.JsGrid.DelegateType.ExpandConflictResolution, eventInfo, recordKey);
        } : null);
        this[SP.JsGrid.RowHeaderAutoStyleId.Dirty] = new SP.JsGrid.RowHeaderState(SP.JsGrid.RowHeaderAutoStyleId.Dirty, new SP.JsGrid.Image(SP.JsGrid.ImagesDirectory + 'jsgridcluster.png', true, 'clip16x16', 'jsgridcluster_editheader'), SP.JsGrid.RowHeaderStatePriorities.Dirty, SP.JsGrid.Res.editingHeaderStateTooltip, null);
    };
    SP.JsGrid.Internal.ScrollBar = function(type, parent, bOtherScrollMeets, optUpdateParams, scrollBarStyle, bRTL, objBag) {
        var _length;
        var _thickness = SP.Internal.ScrollBar.GetSystemScrollBarThickness();
        var _arrowBoxSize = _thickness - 1;
        var _renderedBar;
        var _itemSizes = [];
        var _primitiveMgr = new ScrollBarPrimitiveManager(type == SP.JsGrid.Internal.ScrollBar.BarType.Vertical);
        var _this = this;
        var _fnOnScroll;
        var _bUpdateWhileDragging;
        var _disabled = false;
        var _bIsTopIdxFixed = true;
        var _partialRowPresent = false;
        var _eventToDispose;
        var _virtualViewportSize;
        var _scrollablePixels;
        var _scrollableRows;
        var _rowsOnLastScreen;
        var _middleBoxLength = 0;
        var _middleBoxLocation = 0;
        var _fnOnVisibilityChanged;
        var _itemCount, _itemSize, _physicalViewportSize, _scrollbarSize, _topItemIdx = 0, _bOtherScrollMeets = bOtherScrollMeets;

        function Init() {
            if (optUpdateParams != null) {
                _this.Update(optUpdateParams);
            }
        }
        function UpdateScrollBar(bUpdateScrollSize) {
            var updatedSize = false;

            if (_itemCount != null && _itemSize != null && _physicalViewportSize != null && _scrollbarSize != null) {
                var meetingScrollbarSize = _bOtherScrollMeets ? _thickness : 0;

                _length = Math.max(_scrollbarSize - meetingScrollbarSize, SP.Internal.ScrollBar.GetMinScrollBarLength() + meetingScrollbarSize);
                if (_renderedBar == null) {
                    bUpdateScrollSize = true;
                    CreateBarHTML();
                    parent.appendChild(_renderedBar);
                    parent.style.position = 'relative';
                }
                if (bUpdateScrollSize) {
                    updatedSize = true;
                    UpdateScrollbarSize();
                    UpdateViewVirtualViewportSize();
                    ComputeScrollSize();
                }
            }
            return updatedSize;
        }
        function UpdateScrollbarSize() {
            _primitiveMgr.SetLength('outerContainer', _length + (_bOtherScrollMeets ? _thickness : 0));
            _primitiveMgr.SetLength('innerContainer', _length - 4);
        }
        function ComputeValidTopItemIdx(idx) {
            return Math.max(0, Math.min(idx, _scrollableRows != null ? _scrollableRows : 0));
        }
        function ComputeValidTopItemIdxFromBottomIdx(idx) {
            var clippedIdx = Math.max(Math.min(idx, _itemCount - 1), 0);

            return clippedIdx - (ComputeNumberOfRowsOnPage(null, clippedIdx)).count;
        }
        function ScrollToIdx(newTopIdx, posInfo, bForce, bSkipNotify) {
            var origTI = _topItemIdx;

            if (_topItemIdx != newTopIdx || bForce) {
                _topItemIdx = newTopIdx;
                ComputeScrollPosition(_topItemIdx);
                if (_fnOnScroll != null && (origTI != _topItemIdx || bForce) && !bSkipNotify) {
                    _fnOnScroll(posInfo, origTI);
                }
                return true;
            }
            return false;
        }
        function ScrollToBottomIdx(newBottomIdx, bForce, bSkipNotify) {
            _bIsTopIdxFixed = false;
            var topIdx = ComputeValidTopItemIdxFromBottomIdx(newBottomIdx);

            return ScrollToIdx(topIdx, new SP.JsGrid.Internal.ScrollBar.PosInfo(topIdx, newBottomIdx, SP.JsGrid.Internal.ScrollBar.UserSetType.Bottom), bForce, bSkipNotify);
        }
        function ScrollToTopIdx(newTopIdx, bForce, bSkipNotify) {
            _bIsTopIdxFixed = true;
            var topIdx = ComputeValidTopItemIdx(newTopIdx);

            return ScrollToIdx(topIdx, new SP.JsGrid.Internal.ScrollBar.PosInfo(topIdx, ComputeNumberOfRowsOnPage(topIdx), SP.JsGrid.Internal.ScrollBar.UserSetType.Top), bForce, bSkipNotify);
        }
        function UpdateMiddleBoxLength(length) {
            if (length == -1) {
                if (!_disabled) {
                    if (_fnOnVisibilityChanged != null) {
                        _fnOnVisibilityChanged(false);
                    }
                    _primitiveMgr.UpdateDisplay('bgMiddleBox', false);
                    _primitiveMgr.UpdateDisplay('middleBoxDiv', false);
                    _middleBoxLength = 0;
                    _middleBoxLocation = 0;
                    ScrollToTopIdx(0);
                    _disabled = true;
                }
            }
            else if (length <= 4) {
                Sys.Debug.assert(false);
            }
            else {
                if (_disabled) {
                    if (_fnOnVisibilityChanged != null) {
                        _fnOnVisibilityChanged(true);
                    }
                    _disabled = false;
                }
                _middleBoxLength = length;
                _primitiveMgr.UpdateDisplay('bgMiddleBox', true);
                _primitiveMgr.UpdateDisplay('middleBoxDiv', true);
                _primitiveMgr.UpdateMiddleScroll('middleBoxDiv', length);
                _primitiveMgr.UpdateBGDiv('bgMiddleBox', length);
            }
        }
        function ComputeRemainingSpace() {
            return Math.max(0, GetTotalScrollableDistance() - _middleBoxLocation - _middleBoxLength);
        }
        function GetTotalScrollableDistance() {
            return _length - 2 * _arrowBoxSize - 4;
        }
        function UpdateViewVirtualViewportSize() {
            _virtualViewportSize = 0;
            for (var i = 0; i < _itemSizes.length; i++) {
                _virtualViewportSize += Math.max(Math.min(_physicalViewportSize, _itemSizes[i].size), 0);
            }
            _virtualViewportSize += Math.max(_itemCount - _itemSizes.length, 0) * _itemSize;
        }
        function ComputeNumberOfRowsOnPage(topIdx, bottomIdx) {
            var idx = topIdx != null ? topIdx : bottomIdx;
            var bSearchUp = topIdx == null;
            var len = 0;
            var expIdx = _itemSizes.length != 0 ? SP.Internal.JS.UpperBound(_itemSizes, idx, 'pos') - 1 : -1;
            var expItem;

            while (len < _physicalViewportSize && idx >= 0 && idx < _itemCount) {
                if (expItem == null && expIdx != -1 && expIdx < _itemSizes.length) {
                    expItem = _itemSizes[expIdx];
                }
                len += expItem != null && idx == expItem.pos ? expItem.size : _itemSize;
                if (expItem != null && idx == expItem.pos) {
                    expIdx += bSearchUp ? -1 : 1;
                    expItem = null;
                }
                idx += bSearchUp ? -1 : 1;
            }
            var bPartial = len != _physicalViewportSize;

            return {
                count: Math.max(Math.abs((topIdx != null ? topIdx : bottomIdx) - idx) - (bPartial ? 1 : 0), 0),
                partial: bPartial
            };
        }
        function ComputeNumberOfRowsOnLastPage() {
            var r = ComputeNumberOfRowsOnPage(null, _itemCount - 1);

            _partialRowPresent = r.partial;
            return Math.max(r.count, 1);
        }
        function GetPartialItemDisplayCapacity() {
            if (objBag.spGrid)
                return _itemCount;
            return Math.ceil(_physicalViewportSize / _itemSize);
        }
        function GetWholeItemDisplayCapacity() {
            if (objBag.spGrid)
                return _itemCount;
            return Math.floor(_physicalViewportSize / _itemSize);
        }
        function ComputeBottomIdx() {
            return (ComputeNumberOfRowsOnPage(_topItemIdx)).count;
        }
        function ComputeScrollSize() {
            if (_physicalViewportSize < _virtualViewportSize) {
                var totalScrollableDistance = GetTotalScrollableDistance();

                _scrollablePixels = totalScrollableDistance - Math.max(Math.ceil(_physicalViewportSize / _virtualViewportSize * totalScrollableDistance), SP.Internal.ScrollBar.GetMinBoxLength());
                UpdateMiddleBoxLength(totalScrollableDistance - _scrollablePixels);
                UpdateNumberOfRowsToScrollOver();
            }
            else {
                UpdateMiddleBoxLength(-1);
                UpdateNumberOfRowsToScrollOver(0);
            }
        }
        function TopIndexToPixelOffset(topIdx) {
            if (bRTL && type == SP.JsGrid.Internal.ScrollBar.BarType.Horizontal) {
                topIdx = _scrollableRows - topIdx;
            }
            return Math.floor(_scrollablePixels / _scrollableRows * topIdx);
        }
        function PixelOffsetToTopIndex(pixelOffset) {
            if (bRTL && type == SP.JsGrid.Internal.ScrollBar.BarType.Horizontal) {
                pixelOffset = _scrollablePixels - pixelOffset;
            }
            return _scrollablePixels > 0 ? ComputeValidTopItemIdx(Math.round(pixelOffset / (_scrollablePixels / _scrollableRows))) : 0;
        }
        function ComputeScrollPosition(topIdx) {
            _middleBoxLocation = _scrollableRows > 0 ? TopIndexToPixelOffset(topIdx) : 0;
            _primitiveMgr.UpdateBGDiv('bgAboveBox', _middleBoxLocation + 1);
            _primitiveMgr.SetTop('middleBoxDiv', _middleBoxLocation + _arrowBoxSize);
            _primitiveMgr.UpdateBGDiv('bgBelowBox', ComputeRemainingSpace() + 1);
        }
        function UpdateNumberOfRowsToScrollOver(length) {
            _scrollableRows = length == null ? _itemCount - ComputeNumberOfRowsOnLastPage() : length;
        }
        function TimeBasedScroller(elemId, fnScrollOneUnit, bCheckCoordsAfterScroll, initalEventInfo) {
            var timeOut, callCount = 0, lastEventInfo = initalEventInfo, _this = this;

            function SetTimeOutFn() {
                timeOut = setTimeout(ScrollOne, 250 - 200 * Math.min(1, callCount++ / 4));
            }
            function ScrollOne() {
                fnScrollOneUnit();
                SetTimeOutFn();
                if (bCheckCoordsAfterScroll && lastEventInfo != null) {
                    _this.MouseMove(lastEventInfo);
                }
            }
            this.MouseMove = function(eventInfo) {
                var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);
                var isIn = SP.Internal.DomElement.PointInDomElem(mouseLoc.x, mouseLoc.y, _primitiveMgr.GetDomElem(elemId));

                if (isIn && timeOut == null) {
                    SetTimeOutFn();
                }
                else if (!isIn && timeOut != null) {
                    window.clearTimeout(timeOut);
                    timeOut = null;
                }
                lastEventInfo = eventInfo;
            };
            this.MouseUp = function() {
                window.clearTimeout(timeOut);
            };
            ScrollOne();
        }
        function HookupEvents() {
            var bActive = false;

            $addHandler(_renderedBar, 'mousedown', HandleMouseDown);
            $addHandler(document.body, 'mousemove', DetermineScrollbarActivationState);
            var _clickableItems = {
                scrollUpArrowDiv: null,
                middleBoxDiv: null,
                scrollDownArrowDiv: null,
                bgBelowBox: null,
                bgAboveBox: null
            };
            var lastTopIdx;

            function ActivateScrollBar(mouseLoc) {
                if (!_disabled) {
                    bActive = true;
                    _primitiveMgr.ActivateArrowDiv('scrollUpArrowDiv', 'upArrowDiv', true, mouseLoc);
                    _primitiveMgr.ActivateArrowDiv('scrollDownArrowDiv', 'downArrowDiv', false, mouseLoc);
                    _primitiveMgr.ActivateDiv('middleBoxDiv', mouseLoc);
                }
            }
            function DeactivateScrollBar() {
                if (bActive) {
                    bActive = false;
                    _primitiveMgr.DeactivateArrowDiv('scrollUpArrowDiv', 'upArrowDiv', true);
                    _primitiveMgr.DeactivateArrowDiv('scrollDownArrowDiv', 'downArrowDiv', false);
                    _primitiveMgr.DeactivateDiv('middleBoxDiv');
                }
            }
            function DetermineScrollbarActivationState(eventInfo) {
                if (!SP.Internal.DomElement.ElementAttachedToDom(_renderedBar)) {
                    return;
                }
                var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);

                if (!SP.Internal.DomElement.PointInDomElem(mouseLoc.x, mouseLoc.y, _renderedBar)) {
                    DeactivateScrollBar();
                }
                else {
                    bActive = false;
                    ActivateScrollBar(mouseLoc);
                }
            }
            function HandleMouseDown(eventInfo) {
                if (_disabled)
                    return;
                var timeBasedScroller;

                if (eventInfo.target != null) {
                    var ancestor = SP.Internal.DomElement.FindFirstAncestorWithAnyPropertyValue(eventInfo.target, 'elemid', _clickableItems);

                    if (ancestor != null) {
                        var elemId = SP.Internal.DomElement.GetCustomAttribute(ancestor.elem, 'elemid');

                        if (elemId == 'middleBoxDiv') {
                            var lastTopIdx = _topItemIdx;

                            _primitiveMgr.MarkMouseDown('middleBoxDiv');
                            _primitiveMgr.ActivateDiv('middleBoxDiv');
                            var topIdxPixelOffset = TopIndexToPixelOffset(_topItemIdx);

                            SP.Internal.DomElement.SetCapture(eventInfo.target, function(eI) {
                                var coord = type == SP.JsGrid.Internal.ScrollBar.BarType.Vertical ? 'clientY' : 'clientX';
                                var newTopIdx = PixelOffsetToTopIndex(topIdxPixelOffset + eI[coord] - eventInfo[coord]);

                                if (lastTopIdx != newTopIdx) {
                                    ComputeScrollPosition(newTopIdx);
                                    lastTopIdx = newTopIdx;
                                    if (_bUpdateWhileDragging) {
                                        ScrollToTopIdx(newTopIdx);
                                    }
                                }
                            }, function(eI) {
                                ScrollToTopIdx(lastTopIdx);
                                _primitiveMgr.RemoveMouseDown('middleBoxDiv');
                                DetermineScrollbarActivationState(eI);
                            });
                        }
                        else if (elemId == 'scrollUpArrowDiv' || elemId == 'scrollDownArrowDiv') {
                            _primitiveMgr.MarkMouseDown(elemId);
                            var bIsUpper = elemId == 'scrollUpArrowDiv';

                            _primitiveMgr.ActivateArrowDiv(elemId, bIsUpper ? 'upArrowDiv' : 'downArrowDiv', bIsUpper, true);
                            var bScrollUp = elemId == 'scrollUpArrowDiv';

                            bScrollUp = bRTL && type == SP.JsGrid.Internal.ScrollBar.BarType.Horizontal ? !bScrollUp : bScrollUp;
                            timeBasedScroller = new TimeBasedScroller(elemId, function() {
                                ScrollToTopIdx(_topItemIdx + (bScrollUp ? -1 : 1));
                            });
                            SP.Internal.DomElement.SetCapture(eventInfo.target, timeBasedScroller.MouseMove, function(eventInfo) {
                                timeBasedScroller.MouseUp();
                                _primitiveMgr.RemoveMouseDown(elemId);
                                DetermineScrollbarActivationState(eventInfo);
                            });
                        }
                        else {
                            var bScrollUp = elemId == 'bgAboveBox';

                            bScrollUp = bRTL && type == SP.JsGrid.Internal.ScrollBar.BarType.Horizontal ? !bScrollUp : bScrollUp;
                            _primitiveMgr.HighlightBGDiv(elemId);
                            timeBasedScroller = new TimeBasedScroller(elemId, bScrollUp ? function() {
                                ScrollToBottomIdx(_topItemIdx - ((ComputeNumberOfRowsOnPage(_topItemIdx)).count == 0 ? 1 : 0));
                            } : function() {
                                ScrollToTopIdx(_topItemIdx + Math.max((ComputeNumberOfRowsOnPage(_topItemIdx)).count, 1));
                            }, true, eventInfo);
                            SP.Internal.DomElement.SetCapture(eventInfo.target, timeBasedScroller.MouseMove, function(eventInfo) {
                                _primitiveMgr.RestoreBGDiv(elemId);
                                timeBasedScroller.MouseUp();
                                DetermineScrollbarActivationState(eventInfo);
                            });
                        }
                    }
                }
            }
            return DetermineScrollbarActivationState;
        }
        this.Dispose = function() {
            if (_renderedBar)
                $clearHandlers(_renderedBar);
            if (_eventToDispose)
                $removeHandler(document.body, 'mousemove', _eventToDispose);
            _primitiveMgr.Dispose();
            _renderedBar = null;
            parent = null;
        };
        this.SetOnVisibilityChanged = function(fnOnVisibilityChanged, bCurrentlyVisible) {
            _fnOnVisibilityChanged = fnOnVisibilityChanged;
            if (_fnOnVisibilityChanged != null && bCurrentlyVisible != !_disabled) {
                _fnOnVisibilityChanged(!_disabled);
            }
        };
        this.Update = function(updateScrollParams) {
            var bScrolled = false;
            var bUserWantsToChangeSize = updateScrollParams.itemCount != null && updateScrollParams.itemCount != _itemCount || updateScrollParams.itemSize != null && updateScrollParams.itemSize != _itemSize || updateScrollParams.physicalViewportSize != null && updateScrollParams.physicalViewportSize != _physicalViewportSize || updateScrollParams.scrollbarSize != null && updateScrollParams.scrollbarSize != _scrollbarSize || updateScrollParams.bClearItemSizes && _itemSizes.length != 0 || updateScrollParams.bOtherScrollMeets != null && updateScrollParams.bOtherScrollMeets != _bOtherScrollMeets || updateScrollParams.itemSizes != null;

            _itemCount = updateScrollParams.itemCount == null ? _itemCount : updateScrollParams.itemCount;
            _itemSize = updateScrollParams.itemSize == null ? _itemSize : updateScrollParams.itemSize;
            _bOtherScrollMeets = updateScrollParams.bOtherScrollMeets == null ? _bOtherScrollMeets : updateScrollParams.bOtherScrollMeets;
            if (objBag.spGrid)
                return false;
            if (updateScrollParams.bClearItemSizes) {
                _itemSizes = [];
            }
            _itemSizes = updateScrollParams.itemSizes == null ? _itemSizes : NormalizeItemSizes(updateScrollParams.itemSizes, updateScrollParams.bMergeItemSizes);
            _physicalViewportSize = updateScrollParams.physicalViewportSize == null ? _physicalViewportSize : updateScrollParams.physicalViewportSize;
            _scrollbarSize = updateScrollParams.scrollbarSize == null ? _scrollbarSize : updateScrollParams.scrollbarSize;
            var bScrollbarActuallyChangedSize = UpdateScrollBar(bUserWantsToChangeSize);

            if (updateScrollParams.topItemIdx != null || bScrollbarActuallyChangedSize) {
                bScrolled = ScrollToTopIdx(updateScrollParams.topItemIdx == null ? _topItemIdx : updateScrollParams.topItemIdx, bScrollbarActuallyChangedSize, updateScrollParams.bScrollNotifiy == false);
            }
            _bUpdateWhileDragging = updateScrollParams.bUpdateWhileDragging == null ? _bUpdateWhileDragging : updateScrollParams.bUpdateWhileDragging;
            return bScrolled;
        };
        this.GetItemDisplayCapacity = function() {
            if (!objBag.spGrid)
                Sys.Debug.assert(_itemSize != null && _physicalViewportSize != null);
            return GetPartialItemDisplayCapacity();
        };
        this.GetWholeItemDisplayCapacity = function() {
            if (!objBag.spGrid)
                Sys.Debug.assert(_itemSize != null && _physicalViewportSize != null);
            return GetWholeItemDisplayCapacity();
        };
        this.GetTopItemIdx = function() {
            return _topItemIdx;
        };
        this.Refresh = function() {
            ComputeScrollPosition(_topItemIdx);
        };
        this.ScrollIntoView = function(idx) {
            idx = Math.max(0, Math.min(_itemCount - 1, idx));
            var displayInfo = this.GetItemDisplayInfo(idx);

            if (displayInfo == SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.Before) {
                ScrollToTopIdx(idx);
                return true;
            }
            else if (displayInfo == SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.After || displayInfo == SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.Partial) {
                ScrollToTopIdx(idx + 1 - GetWholeItemDisplayCapacity());
                return true;
            }
            return false;
        };
        this.ScrollUpByOne = function() {
            this.Update({
                topItemIdx: _topItemIdx - 1
            });
        };
        this.ScrollDownByOne = function() {
            this.Update({
                topItemIdx: _topItemIdx + 1
            });
        };
        this.PartialRowPresent = function() {
            return _partialRowPresent;
        };
        this.GetVisibleItemCount = function() {
        };
        this.SetOnScroll = function(fnOnScroll) {
            _fnOnScroll = fnOnScroll;
        };
        this.SetViewportSize = function() {
        };
        this.GetItemDisplayInfo = function(idx) {
            var wholeDisplayCap = GetWholeItemDisplayCapacity();
            var partialDisplayCap = GetPartialItemDisplayCapacity();

            if (wholeDisplayCap != partialDisplayCap)
                return idx < _topItemIdx ? SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.Before : idx > _topItemIdx + partialDisplayCap - 1 ? SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.After : idx == _topItemIdx + partialDisplayCap - 1 ? SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.Partial : SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.InView;
            else
                return idx < _topItemIdx ? SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.Before : idx > _topItemIdx + partialDisplayCap - 1 ? SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.After : SP.JsGrid.Internal.ScrollBar.RowDisplayInfo.InView;
        };
        function NormalizeItemSizes(newItemSizes, bMergeItemSizes) {
            if (!bMergeItemSizes) {
                _itemSizes = [];
            }
            for (var pos in newItemSizes) {
                var intPos = parseInt(pos, 10);
                var intItem = parseInt(newItemSizes[pos], 10);

                if (!isNaN(intPos) && !isNaN(intItem)) {
                    var idx = SP.Internal.JS.LowerBound(_itemSizes, intPos, 'pos');

                    if (idx < 0 || idx >= _itemSizes.length || _itemSizes[idx].pos != intPos) {
                        _itemSizes.splice(idx, 0, {
                            pos: intPos,
                            size: intItem
                        });
                    }
                    else {
                        _itemSizes[idx].size = intItem;
                    }
                }
            }
            return _itemSizes;
        }
        function CreateBarHTML() {
            var html = ['<div elemid="innerContainer" class="inner-scroll-bar" style="' + _primitiveMgr.GetLengthAndThicknessCssString(_length - 4, _thickness - 4) + ';">'];

            html.push(_primitiveMgr.GenerateBGDivHTML(_arrowBoxSize - 1, 'upArrowDiv', true));
            html.push(_primitiveMgr.GenerateBGDivHTML(1 + Math.max(_middleBoxLocation, 0), 'bgAboveBox'));
            html.push(_primitiveMgr.GenerateBGDivHTML(Math.max(_middleBoxLocation, 0), 'bgMiddleBox', false));
            html.push(_primitiveMgr.GenerateBGDivHTML(ComputeRemainingSpace() + 1, 'bgBelowBox'));
            html.push(_primitiveMgr.GenerateBGDivHTML(_arrowBoxSize - 1, 'downArrowDiv', true));
            _renderedBar = document.createElement('div');
            _renderedBar.innerHTML = html.join('');
            _renderedBar.elemid = 'outerContainer';
            _renderedBar.className = 'outer-scroll-bar';
            var bVert = type == SP.JsGrid.Internal.ScrollBar.BarType.Vertical;

            _renderedBar.style.cssText = (bVert ? 'float:right' : '') + _primitiveMgr.GetLengthAndThicknessCssString(_length, _thickness);
            _primitiveMgr.RegisterPrimitives([_renderedBar].concat(SP.Internal.DomElement.FindChildrenWithProperty(_renderedBar, 'elemid')));
            _primitiveMgr.AppendItem('upArrowDiv', _primitiveMgr.GenerateArrowDiv('scrollUpArrowDiv', -2, true));
            _primitiveMgr.AppendItem('bgMiddleBox', _primitiveMgr.GenerateMiddleScroll('middleBoxDiv'));
            _primitiveMgr.AppendItem('downArrowDiv', _primitiveMgr.GenerateArrowDiv('scrollDownArrowDiv', 0, false));
            _eventToDispose = HookupEvents();
        }
        function ScrollBarPrimitiveManager(bIsVert) {
            var _activeColors = {
                outerBorder: {
                    mouseDown: '#737A83',
                    mouseOver: '#8A8D91',
                    mouseOut: '#B7BABE'
                },
                innerBorder: {
                    mouseDown: '#C3C6CA',
                    mouseOver: '#DADBDD',
                    mouseOut: '#F0F1F4'
                },
                shade: {
                    mouseDown: '#969BA2',
                    mouseOver: '#CACCD0',
                    mouseOut: '#E8EBEE'
                },
                main: {
                    mouseDown: '#868C93',
                    mouseOver: '#B3B6BB',
                    mouseOut: '#DFE3E8'
                }
            };
            var _renderedItemDivs = {};
            var _thicknessCssString = bIsVert ? 'width' : 'height';
            var _lengthCssString = bIsVert ? 'height' : 'width';
            var _cssNamePreFix = bIsVert ? 'vert-' : 'horiz-';
            var _upSideCssName = bIsVert ? 'top' : 'left';
            var _leftSideCssName = bIsVert ? 'left' : 'top';
            var _arrowDivClass = bIsVert ? 'clip9x6' : 'clip6x9';
            var _upArrowInactiveImgClass = 'jsgridcluster_scrollbar-mouseout-' + (bIsVert ? 'uparrow' : 'leftarrow');
            var _downArrowInactiveImgClass = 'jsgridcluster_scrollbar-mouseout-' + (bIsVert ? 'downarrow' : 'rightarrow');
            var _upArrowActiveImgClass = 'jsgridcluster_scrollbar-mousein-' + (bIsVert ? 'uparrow' : 'leftarrow');
            var _downArrowActiveImgClass = 'jsgridcluster_scrollbar-mousein-' + (bIsVert ? 'downarrow' : 'rightarrow');
            var _highLightBgSrc = bIsVert ? 'scrollbar-highlight-vert.png' : 'scrollbar-highlight-horiz.png';

            this.Dispose = function() {
                _renderedItemDivs = null;
            };
            this.GetThicknessCssString = function(thickness) {
                return _thicknessCssString + ':' + thickness + 'px;';
            };
            this.GetLengthCssString = function(len) {
                return _lengthCssString + ':' + len + 'px;';
            };
            this.GetLengthAndThicknessCssString = function(len, thickness) {
                return this.GetLengthCssString(len) + this.GetThicknessCssString(thickness);
            };
            this.GetCssName = function(str, bIncludeGeneric) {
                return _cssNamePreFix + str + (bIncludeGeneric ? ' ' + str : '');
            };
            this.RegisterPrimitives = function(elements) {
                for (var i = 0; i < elements.length; i++) {
                    var elemId = SP.Internal.DomElement.GetCustomAttribute(elements[i], 'elemid');

                    if (elemId != null) {
                        _renderedItemDivs[elemId] = elements[i];
                    }
                }
            };
            this.GetLocation = function(elemId) {
                return SP.Internal.DomElement.GetLocation(_renderedItemDivs[elemId]);
            };
            this.GetHeight = function(elemId) {
                return _renderedItemDivs[elemId].offsetHeight;
            };
            this.GetWidth = function(elemId) {
                return _renderedItemDivs[elemId].offsetWidth;
            };
            this.GetDomElem = function(elemId) {
                return _renderedItemDivs[elemId];
            };
            this.AppendItem = function(elemId, newElem) {
                _renderedItemDivs[elemId].appendChild(newElem);
                this.RegisterPrimitives(SP.Internal.DomElement.FindChildrenWithProperty(_renderedItemDivs[elemId], 'id'));
            };
            this.GenerateBGDivHTML = function(length, optBaseElemId, optbPosRelative) {
                var thicknessParam = (_thickness - 4) / 2;

                return ['<div class="' + this.GetCssName('scroll-bar-bg-block') + '" style="' + (optbPosRelative ? 'position:relative;' : '') + this.GetLengthCssString(length) + '" ' + GetOptionalElemString('elemid', optBaseElemId) + '>', '<div class="' + this.GetCssName('scroll-bar-background-shade', true) + '" style="' + this.GetLengthAndThicknessCssString(length, Math.ceil(thicknessParam)) + '" ' + GetOptionalElemString('elemid', optBaseElemId, '_shade') + '></div>', '<div class="' + this.GetCssName('scroll-bar-background-main', true) + '" style="' + this.GetLengthAndThicknessCssString(length, Math.floor(thicknessParam)) + '" ' + GetOptionalElemString('elemid', optBaseElemId, '_main') + '></div></div>'].join('');
            };
            function GetOptionalElemString(tag, elem, optPostFix) {
                return elem == null ? '' : tag + '="' + elem + (optPostFix == null ? '' : optPostFix) + '"';
            }
            this.GenerateMiddleScroll = function(elemId) {
                var r = document.createElement('div');
                var thicknessParam1 = (_thickness - 6) / 2;
                var thicknessParam2 = (_thickness - 6 - 5) / 2;

                r.innerHTML = ['<div style="position:relative;', this.GetThicknessCssString(_thickness - 6), ';margin-top:1px;margin-left:1px;">', '<div elemid="', elemId, '_shade" class="', this.GetCssName('scroll-bar-inner-box-shade', true), '" style="', this.GetThicknessCssString(Math.floor(thicknessParam1)), ';"></div>', '<div elemid="', elemId, '_main" class="', this.GetCssName('scroll-bar-inner-box-main', true), '" style="', this.GetThicknessCssString(Math.ceil(thicknessParam1)), ';"></div>', '<div elemid="', elemId, '_gripTop" class="', this.GetCssName('scroll-bar-grip', true), '" style="', _leftSideCssName, ':', Math.round(thicknessParam2), 'px"></div>', '<div elemid="', elemId, '_gripMiddle" class="', this.GetCssName('scroll-bar-grip', true), '" style="', _leftSideCssName, ':', Math.round(thicknessParam2), 'px;"></div>', '<div elemid="', elemId, '_gripBottom" class="', this.GetCssName('scroll-bar-grip', true), '" style="', _leftSideCssName, ':', Math.round(thicknessParam2), 'px"></div></div>'].join('');
                r.elemid = elemId;
                r.className = this.GetCssName('scroll-bar-outer-box', true);
                r.style.cssText = this.GetThicknessCssString(_thickness - 4);
                return r;
            };
            this.GenerateArrowDiv = function(elemId, containterOffset, bTop) {
                var r = document.createElement('div');
                var imgMarginTop = (_thickness - 4 - (bIsVert ? 6 : 9)) / 2;
                var imgMarginLeft = (_thickness - 4 - (bIsVert ? 9 : 6)) / 2;

                r.innerHTML = ['<div elemid="' + elemId + '_inner" class="scroll-bar-inner-arrow-cell" style="' + this.GetLengthAndThicknessCssString(_thickness - 4, _thickness - 4) + '">', '<div class="' + _arrowDivClass + '" style="margin-top:' + (!bIsVert ? Math.round(imgMarginTop) : bTop ? Math.floor(imgMarginTop) : Math.ceil(imgMarginTop)) + 'px;margin-left:' + (bIsVert ? Math.round(imgMarginLeft) : bTop ? Math.floor(imgMarginLeft) : Math.ceil(imgMarginLeft)) + 'px;">' + '<img elemid="' + elemId + '_img" src="' + SP.JsGrid.ImagesDirectory + 'jsgridcluster.png" class="' + this.GetCssName('scroll-bar-arrow') + ' ' + (bTop ? _upArrowInactiveImgClass : _downArrowInactiveImgClass) + '"/>', '</div>', '</div>'].join('');
                r.elemid = elemId;
                r.className = this.GetCssName('scroll-bar-arrow-cell', true);
                r.style.cssText = (bIsVert ? 'top:' : 'left:') + containterOffset + 'px;' + this.GetLengthAndThicknessCssString(_thickness - 2, _thickness - 2);
                return r;
            };
            this.UpdateBGDiv = function(elemId, newLength) {
                _renderedItemDivs[elemId].style[_lengthCssString] = newLength + 'px';
                _renderedItemDivs[elemId + "_shade"].style[_lengthCssString] = newLength + 'px';
                _renderedItemDivs[elemId + "_main"].style[_lengthCssString] = newLength + 'px';
            };
            this.UpdateMiddleScroll = function(elemId, newLength) {
                _renderedItemDivs[elemId].style[_lengthCssString] = newLength - 2 + 'px';
                var innerLen = newLength - 4;

                _renderedItemDivs[elemId + "_main"].style[_lengthCssString] = innerLen + 'px';
                _renderedItemDivs[elemId + "_shade"].style[_lengthCssString] = innerLen + 'px';
                var boxPos = Math.round(Math.max(innerLen - 8, 0) / 2);

                _renderedItemDivs[elemId + "_gripTop"].style[_upSideCssName] = boxPos + 'px';
                _renderedItemDivs[elemId + "_gripMiddle"].style[_upSideCssName] = boxPos + 3 + 'px';
                _renderedItemDivs[elemId + "_gripBottom"].style[_upSideCssName] = boxPos + 6 + 'px';
            };
            this.UpdateDisplay = function(elemId, bShow) {
                _renderedItemDivs[elemId].style.display = bShow ? 'block' : 'none';
            };
            this.ActivateArrowDiv = function(elemId, bgElemId, bTop, mouseLoc) {
                _renderedItemDivs[elemId + '_img'].className = this.GetCssName('scroll-bar-arrow') + ' ' + (bTop ? _upArrowActiveImgClass : _downArrowActiveImgClass);
                this.ActivateDiv(elemId, mouseLoc, bgElemId);
            };
            this.DeactivateArrowDiv = function(elemId, bgElemId, bTop) {
                _renderedItemDivs[elemId + '_img'].className = this.GetCssName('scroll-bar-arrow') + ' ' + (bTop ? _upArrowInactiveImgClass : _downArrowInactiveImgClass);
                this.DeactivateDiv(elemId, bgElemId);
            };
            this.MarkMouseDown = function(elemId, optBgElemId) {
                _renderedItemDivs[elemId].curStateName = 'mouseDownPending';
            };
            this.RemoveMouseDown = function(elemId, mouseLoc, optBgElemId) {
                _renderedItemDivs[elemId].curStateName = '';
            };
            this.ActivateDiv = function(elemId, mouseLoc, optBgElemId) {
                var mainDiv = _renderedItemDivs[elemId];

                if (mainDiv.curStateName == 'mouseDown') {
                    return;
                }
                var curStateName = mainDiv.curStateName == 'mouseDownPending' ? 'mouseDown' : SP.Internal.DomElement.PointInDomElem(mouseLoc.x, mouseLoc.y, mainDiv) ? 'mouseOver' : 'mouseOut';

                if (mainDiv.curStateName != curStateName) {
                    mainDiv.style.borderColor = _activeColors['outerBorder'][curStateName];
                    if (elemId + '_inner' in _renderedItemDivs) {
                        _renderedItemDivs[elemId + '_inner'].style.borderColor = _activeColors['innerBorder'][curStateName];
                    }
                    else {
                        _renderedItemDivs[elemId].style.backgroundColor = _activeColors['innerBorder'][curStateName];
                    }
                    _renderedItemDivs[(optBgElemId != null ? optBgElemId : elemId) + '_shade'].style.backgroundColor = _activeColors['shade'][curStateName];
                    _renderedItemDivs[(optBgElemId != null ? optBgElemId : elemId) + '_main'].style.backgroundColor = _activeColors['main'][curStateName];
                    mainDiv.curStateName = curStateName;
                }
            };
            this.DeactivateDiv = function(elemId, optBgElemId) {
                _renderedItemDivs[elemId].curStateName = '';
                _renderedItemDivs[elemId].style.borderColor = '';
                if (elemId + '_inner' in _renderedItemDivs) {
                    _renderedItemDivs[elemId + '_inner'].style.borderColor = '';
                }
                else {
                    _renderedItemDivs[elemId].style.backgroundColor = '';
                }
                _renderedItemDivs[(optBgElemId != null ? optBgElemId : elemId) + '_shade'].style.backgroundColor = '';
                _renderedItemDivs[(optBgElemId != null ? optBgElemId : elemId) + '_main'].style.backgroundColor = '';
            };
            this.HighlightBGDiv = function(elemId) {
                _renderedItemDivs[elemId + '_main'].style.backgroundColor = '#DEDFE2';
                _renderedItemDivs[elemId + '_shade'].style.backgroundColor = '#DEDFE2';
            };
            this.RestoreBGDiv = function(elemId) {
                _renderedItemDivs[elemId + '_shade'].style.backgroundColor = '';
                _renderedItemDivs[elemId + '_main'].style.backgroundColor = '';
            };
            this.SetTop = function(elemId, newTop) {
                _renderedItemDivs[elemId].style[_upSideCssName] = newTop + 'px';
            };
            this.SetLength = function(elemId, length) {
                _renderedItemDivs[elemId].style[_lengthCssString] = length + 'px';
            };
        }
        Init();
    };
    SP.JsGrid.Internal.ScrollBar.PosInfo = function(topIdx, bottomIdx, userSetType) {
        this.topIdx = topIdx;
        this.bottomIdx = bottomIdx;
        this.userSetType = userSetType;
    };
    SP.JsGrid.Internal.ScrollBar.UserSetType = {
        Bottom: 0,
        Top: 1
    };
    SP.JsGrid.Internal.ScrollBar.UpdateParams = function() {
        this.itemCount;
        this.itemSize;
        this.itemSizes = {};
        this.physicalViewportSize;
        this.scrollbarSize;
        this.topItemIdx;
        this.bClearItemSizes = false;
        this.bMergeItemSizes = false;
        this.bUpdateWhileDragging = false;
    };
    SP.JsGrid.Internal.ScrollBar.BarType = {
        Horizontal: 0,
        Vertical: 1
    };
    SP.JsGrid.Internal.ScrollBar.RowDisplayInfo = {
        Before: -1,
        InView: 0,
        Partial: 1,
        After: 2
    };
    if (!Type.isNamespace('SP.Internal.ScrollBar')) {
        Type.registerNamespace('SP.Internal.ScrollBar');
    }
    SP.Internal.ScrollBar.GetSystemScrollBarThickness = function() {
        var d = document.createElement('div');
        var d2 = document.createElement('div');

        d.style.cssText = 'overflow-x:scroll;position:absolute;visibility:hidden';
        d2.style.cssText = 'height:50px;width:50px';
        d.appendChild(d2);
        document.body.appendChild(d);
        var height = Math.max(d.offsetHeight - 50, 13);

        document.body.removeChild(d);
        SP.Internal.ScrollBar.GetSystemScrollBarThickness = function() {
            return height;
        };
        return height;
    };
    SP.Internal.ScrollBar.GetMinBoxLength = function() {
        return 12;
    };
    SP.Internal.ScrollBar.GetMinScrollBarLength = function() {
        return 2 * SP.Internal.ScrollBar.GetSystemScrollBarThickness() + SP.Internal.ScrollBar.GetMinBoxLength() + 8 + 2;
    };
    SP.JsGrid.Internal.SelectionManager = function(fnOnFocusedCellChanged) {
        var _selectedRowRanges;
        var _selectedColRanges;
        var _selectedCellRanges;
        var _allowedSelectionTypes;
        var _lastSelEndpt1, _lastSelEndpt2;
        var _lastSelectionType;
        var _curFocus;
        var _updatingReturnOld, _updatingReturnNew;
        var _this = this;
        var _orderedSelections;
        var SelectionType = SP.JsGrid.SelectionType;
        var SelectOp = SP.JsGrid.Internal.SelectionManager.SelectOp;

        this.SetAllowedSelectionTypes = function(allowedSelectionTypes) {
            _allowedSelectionTypes = allowedSelectionTypes;
        };
        this.GetLastSelectionEndpoints = function() {
            return {
                rowIdx1: _lastSelEndpt1.rowIdx,
                colIdx1: _lastSelEndpt1.colIdx,
                rowIdx2: _lastSelEndpt2.rowIdx,
                colIdx2: _lastSelEndpt2.colIdx
            };
        };
        this.GetLastSelectionRangeNormalized = function() {
            return _lastSelectionType == SelectionType.None ? null : {
                rowRange: new SP.Utilities.Range(_lastSelectionType != SelectionType.ColumnRange ? Math.min(_lastSelEndpt1.rowIdx, _lastSelEndpt2.rowIdx) : 0, _lastSelectionType != SelectionType.ColumnRange ? Math.max(_lastSelEndpt1.rowIdx, _lastSelEndpt2.rowIdx) : (_curFocus.gridPane.GetGridPaneConverter()).GetVirtualRowCount() - 1),
                colRange: new SP.Utilities.Range(_lastSelectionType != SelectionType.RowRange ? Math.min(_lastSelEndpt1.colIdx, _lastSelEndpt2.colIdx) : 0, _lastSelectionType != SelectionType.RowRange ? Math.max(_lastSelEndpt1.colIdx, _lastSelEndpt2.colIdx) : (_curFocus.gridPane.GetGridPaneConverter()).GetVirtualColumnCount() - 1)
            };
        };
        this.GetFocus = function() {
            return GetFocusForPaneInternal(null);
        };
        this.GetFocusForPane = function(gridPane) {
            return GetFocusForPaneInternal(gridPane);
        };
        this.GetFocusedPane = function() {
            return _curFocus.gridPane;
        };
        this.SetFocusByKey = function(gridPane, recordKey, fieldKey) {
            var ind = (gridPane.GetGridPaneConverter()).KeyToIdx(recordKey, fieldKey);

            if (ind != null) {
                this.SetFocusByPos(gridPane, ind.rowIdx, ind.colIdx);
            }
        };
        this.SetFocusByPos = function(gridPane, rowIdx, colIdx) {
            this.SelectRange(gridPane, rowIdx, rowIdx, colIdx, colIdx, SelectOp.Set, true, false);
        };
        this.IsCellSelected = function(gridPane, rowIdx, colIdx) {
            if (gridPane != _curFocus.gridPane) {
                return false;
            }
            for (var i = 0; i < _selectedRowRanges.length; i++) {
                if (_selectedRowRanges[i].Contains(rowIdx)) {
                    return true;
                }
            }
            for (i = 0; i < _selectedColRanges.length; i++) {
                if (_selectedColRanges[i].Contains(colIdx)) {
                    return true;
                }
            }
            for (i = 0; i < _selectedCellRanges.length; i++) {
                if (_selectedCellRanges[i].rowRange.Contains(rowIdx) && _selectedCellRanges[i].colRange.Contains(colIdx)) {
                    return true;
                }
            }
            return false;
        };
        this.IsRowSelected = function(gridPane, rowIdx) {
            if (gridPane != _curFocus.gridPane) {
                return false;
            }
            for (var i = 0; i < _selectedRowRanges.length; i++) {
                if (_selectedRowRanges[i].Contains(rowIdx)) {
                    return true;
                }
            }
            return false;
        };
        this.IsOneCellSelected = function(range) {
            return range != null && range.rowRange.begin == range.rowRange.end && range.colRange.begin == range.colRange.end;
        };
        this.GetComponentsWithin = function(gridPane, rowRange, colRange) {
            if (gridPane != _curFocus.gridPane) {
                return new SP.Utilities.Set();
            }
            var _cells = {};

            function AppendIntersection(rowRange, colRange) {
                if (!rowRange.IsEmpty() && !colRange.IsEmpty()) {
                    for (var r = rowRange.begin; r <= rowRange.end; r++) {
                        for (var c = colRange.begin; c <= colRange.end; c++) {
                            _cells[SP.JsGrid.Internal.MakeCellKey(r, c)] = 1;
                        }
                    }
                }
            }
            for (var i = 0; i < _selectedRowRanges.length; i++) {
                AppendIntersection(_selectedRowRanges[i].Intersect(rowRange), colRange);
            }
            for (i = 0; i < _selectedColRanges.length; i++) {
                AppendIntersection(rowRange, _selectedColRanges[i].Intersect(colRange));
            }
            for (i = 0; i < _selectedCellRanges.length; i++) {
                AppendIntersection(_selectedCellRanges[i].rowRange.Intersect(rowRange), _selectedCellRanges[i].colRange.Intersect(colRange));
            }
            return new SP.Utilities.Set(_cells);
        };
        this.SelectRange = function(gridPane, rowIdx1, rowIdx2, colIdx1, colIdx2, selectOp, bScrollFocusRectIntoView, bPreserveFocusRect) {
            function FilterSelectionType() {
                var allowedRows = _allowedSelectionTypes & SP.JsGrid.SelectionTypeFlags._RowMask;
                var allowedCols = _allowedSelectionTypes & SP.JsGrid.SelectionTypeFlags._ColMask;
                var allowedCells = _allowedSelectionTypes & SP.JsGrid.SelectionTypeFlags._CellMask;

                do {
                    var bLoopAgain = false;

                    switch (ComputeSelectionType(rowIdx1, rowIdx2, colIdx1, colIdx2)) {
                    case SelectionType.RowRange:
                        switch (allowedRows) {
                        case SP.JsGrid.SelectionTypeFlags.SingleRow:
                            rowIdx2 = rowIdx1;
                        case SP.JsGrid.SelectionTypeFlags.SingleRowRange:
                            selectOp = selectOp == SelectOp.Append ? SelectOp.Set : selectOp;
                            break;
                        case SP.JsGrid.SelectionTypeFlags.NoRows:
                            return false;
                        default:
                            break;
                        }
                        break;
                    case SelectionType.ColumnRange:
                        switch (allowedCols) {
                        case SP.JsGrid.SelectionTypeFlags.SingleCol:
                            colIdx2 = colIdx1;
                        case SP.JsGrid.SelectionTypeFlags.SingleColRange:
                            selectOp = selectOp == SelectOp.Append ? SelectOp.Set : selectOp;
                            break;
                        case SP.JsGrid.SelectionTypeFlags.NoCols:
                            return false;
                        default:
                            break;
                        }
                        break;
                    case SelectionType.CellRange:
                        switch (allowedCells) {
                        case SP.JsGrid.SelectionTypeFlags.SingleCell:
                            rowIdx2 = rowIdx1;
                            colIdx2 = colIdx1;
                        case SP.JsGrid.SelectionTypeFlags.SingleCellRange:
                            selectOp = selectOp == SelectOp.Append ? SelectOp.Set : selectOp;
                            break;
                        case SP.JsGrid.SelectionTypeFlags.NoCells:
                            if (allowedRows != SP.JsGrid.SelectionTypeFlags.NoRows) {
                                colIdx1 = (colIdx2 = null);
                                bLoopAgain = true;
                            }
                            else if (allowedCols != SP.JsGrid.SelectionTypeFlags.NoCols) {
                                rowIdx1 = (rowIdx2 = null);
                                bLoopAgain = true;
                            }
                            else {
                                return false;
                            }
                        default:
                            break;
                        }
                        break;
                    }
                } while (bLoopAgain);
                return true;
            }
            function PromoteRangeType() {
                if (ComputeSelectionType(rowIdx1, rowIdx2, colIdx1, colIdx2) == SelectionType.CellRange) {
                    if (Math.abs(colIdx1 - colIdx2) + 1 == (gridPane.GetGridPaneConverter()).GetVirtualColumnCount()) {
                        colIdx1 = (colIdx2 = null);
                    }
                    else if (Math.abs(rowIdx1 - rowIdx2) + 1 == (gridPane.GetGridPaneConverter()).GetVirtualRowCount()) {
                        rowIdx1 = (rowIdx2 = null);
                    }
                }
            }
            function UpdateFocus(oldFocus, selType) {
                if (gridPane != _curFocus.gridPane) {
                    selectOp = SelectOp.Set;
                    _curFocus.gridPane = gridPane;
                }
                if (bPreserveFocusRect) {
                    var ind = (gridPane.GetGridPaneConverter()).KeyToIdx(oldFocus.recordKey, oldFocus.fieldKey);

                    _curFocus.rowIdx = ind.rowIdx;
                    _curFocus.colIdx = ind.colIdx;
                }
                else {
                    if (focusPosToSet != null) {
                        _curFocus.rowIdx = focusPosToSet.rowIdx;
                        _curFocus.colIdx = focusPosToSet.colIdx;
                    }
                    else {
                        _curFocus.rowIdx = selType == SelectionType.ColumnRange ? gridPane.BeginRowIdx() : rowIdx1;
                        _curFocus.colIdx = selType == SelectionType.RowRange ? gridPane.BeginColIdx() : colIdx1;
                    }
                }
            }
            function UpdateSelection(selType) {
                Sys.Debug.assert(selType != SelectionType.None);
                var rowRange = selType == SelectionType.ColumnRange ? null : (new SP.Utilities.Range(rowIdx1, rowIdx2)).Normalize();
                var colRange = selType == SelectionType.RowRange ? null : (new SP.Utilities.Range(colIdx1, colIdx2)).Normalize();

                if (selectOp == SelectOp.Set) {
                    _selectedRowRanges = [];
                    _selectedColRanges = [];
                    _selectedCellRanges = [];
                    _orderedSelections = [];
                }
                else if (selectOp == SelectOp.ReplaceLast) {
                    if (_lastSelectionType == SelectionType.RowRange) {
                        _selectedRowRanges.pop();
                    }
                    else if (_lastSelectionType == SelectionType.ColumnRange) {
                        _selectedColRanges.pop();
                    }
                    else if (_lastSelectionType == SelectionType.CellRange) {
                        _selectedCellRanges.pop();
                    }
                    _orderedSelections.pop();
                }
                var range;

                if (selType == SelectionType.RowRange) {
                    range = rowRange;
                    _selectedRowRanges.push(range);
                }
                else if (selType == SelectionType.ColumnRange) {
                    range = colRange;
                    _selectedColRanges.push(range);
                }
                else if (selType == SelectionType.CellRange) {
                    range = {
                        rowRange: rowRange,
                        colRange: colRange
                    };
                    _selectedCellRanges.push(range);
                }
                _orderedSelections.push({
                    type: selType,
                    range: range
                });
                _lastSelectionType = selType;
            }
            var allowSelectionChange = true;

            (gridPane.GetDelegateMgr()).Apply(SP.JsGrid.DelegateType.AllowSelectionChange, function(allow) {
                allowSelectionChange = allow;
            });
            if (!allowSelectionChange) {
                return false;
            }
            var focusPosToSet;
            var isSetFocusOperation = rowIdx1 != null && rowIdx1 == rowIdx2 && colIdx1 != null && colIdx1 == colIdx2 && bScrollFocusRectIntoView && selectOp == SelectOp.Set;

            if (isSetFocusOperation) {
                focusPosToSet = {
                    rowIdx: rowIdx1,
                    colIdx: colIdx1
                };
            }
            if (!FilterSelectionType()) {
                return false;
            }
            PromoteRangeType();
            _lastSelEndpt1 = {
                rowIdx: rowIdx1,
                colIdx: colIdx1
            };
            _lastSelEndpt2 = {
                rowIdx: rowIdx2,
                colIdx: colIdx2
            };
            FirePreChangeNotifications(_curFocus.gridPane, gridPane);
            var oldFocus = _this.GetFocus();
            var selType = ComputeSelectionType(rowIdx1, rowIdx2, colIdx1, colIdx2);

            UpdateFocus(oldFocus, selType);
            UpdateSelection(selType);
            FirePostChangeNotifications(oldFocus, bScrollFocusRectIntoView);
            return true;
        };
        this.GetRowRanges = function(gridPane) {
            return gridPane == _curFocus.gridPane ? _selectedRowRanges : [];
        };
        this.GetColumnRanges = function(gridPane) {
            return gridPane == _curFocus.gridPane ? _selectedColRanges : [];
        };
        this.GetCellRanges = function(gridPane) {
            return gridPane == _curFocus.gridPane ? _selectedCellRanges : [];
        };
        this.Clear = function(bDontNotify) {
            var oldFocus;

            if (!bDontNotify) {
                FirePreChangeNotifications(_curFocus.gridPane, null);
                oldFocus = _this.GetFocus();
            }
            _selectedRowRanges = [];
            _selectedColRanges = [];
            _selectedCellRanges = [];
            _orderedSelections = [];
            _curFocus = {};
            _lastSelEndpt1 = (_lastSelEndpt2 = null);
            _lastSelectionType = SelectionType.None;
            if (!bDontNotify) {
                FirePostChangeNotifications(oldFocus, false);
            }
        };
        this.GetLastSelectionType = function() {
            return _lastSelectionType;
        };
        this.GetOrderedSelections = function(gridPane, optSelectionTypeFilter) {
            function BuildRangeAndKeysFromRowRange(range) {
                var r = new Array(range.Size());

                for (var i = range.begin; i <= range.end; i++) {
                    r[i - range.begin] = paneConverter.RowIdxToRecordKey(i);
                }
                return {
                    begin: range.begin,
                    end: range.end,
                    keys: r
                };
            }
            function BuildRangeAndKeysFromColumnRange(range) {
                var r = new Array(range.Size());

                for (var i = range.begin; i <= range.end; i++) {
                    r[i - range.begin] = paneConverter.ColIdxToColKey(i);
                }
                return {
                    begin: range.begin,
                    end: range.end,
                    keys: r
                };
            }
            var r = [];

            if (gridPane == _curFocus.gridPane) {
                var paneConverter = gridPane.GetGridPaneConverter();

                for (var i = 0; i < _orderedSelections.length; i++) {
                    var type = _orderedSelections[i].type;
                    var range = _orderedSelections[i].range;

                    if (optSelectionTypeFilter == null || optSelectionTypeFilter == type) {
                        switch (type) {
                        case SelectionType.RowRange:
                            r.push(BuildRangeAndKeysFromRowRange(range));
                            break;
                        case SelectionType.ColumnRange:
                            r.push(BuildRangeAndKeysFromColumnRange(range));
                            break;
                        case SelectionType.CellRange:
                            r.push({
                                rowRange: BuildRangeAndKeysFromRowRange(range.rowRange),
                                colRange: BuildRangeAndKeysFromColumnRange(range.colRange)
                            });
                            break;
                        }
                    }
                }
            }
            return r;
        };
        function FirePreChangeNotifications(oldGridPane, newGridPane) {
            _updatingReturnOld = oldGridPane != null ? oldGridPane.NotifySelectionUpdating() : null;
            _updatingReturnNew = newGridPane != null ? newGridPane != oldGridPane ? newGridPane.NotifySelectionUpdating() : _updatingReturnOld : null;
        }
        function FirePostChangeNotifications(oldFocus, bScrollFocusRectIntoView) {
            var newFocus = _this.GetFocus();

            if (oldFocus != null) {
                oldFocus.gridPane.NotifySelectionUpdated(_updatingReturnOld, bScrollFocusRectIntoView);
            }
            if (newFocus != null && (oldFocus == null || newFocus.gridPane != oldFocus.gridPane)) {
                newFocus.gridPane.NotifySelectionUpdated(_updatingReturnNew, bScrollFocusRectIntoView);
            }
            if (oldFocus == null && newFocus != null || oldFocus != null && newFocus == null || oldFocus != null && newFocus != null && (oldFocus.recordKey != newFocus.recordKey || oldFocus.fieldKey != newFocus.fieldKey)) {
                fnOnFocusedCellChanged(new SP.JsGrid.EventArgs.CellFocusChanged(newFocus && newFocus.recordKey, newFocus && newFocus.fieldKey, oldFocus && oldFocus.recordKey, oldFocus && oldFocus.fieldKey));
            }
        }
        function ComputeSelectionType(rowIdx1, rowIdx2, colIdx1, colIdx2) {
            return rowIdx1 == null || rowIdx2 == null ? SelectionType.ColumnRange : colIdx1 == null || colIdx2 == null ? SelectionType.RowRange : SelectionType.CellRange;
        }
        function GetFocusForPaneInternal(optGridPane) {
            if (_curFocus.gridPane == null || optGridPane != null && _curFocus.gridPane != optGridPane || _curFocus.colIdx >= (_curFocus.gridPane.GetGridPaneConverter()).GetVirtualColumnCount()) {
                return null;
            }
            var keys = (_curFocus.gridPane.GetGridPaneConverter()).IdxToKey(_curFocus.rowIdx, _curFocus.colIdx);

            if (keys.recordKey == null || keys.fieldKey == null || keys.columnKey == null) {
                return null;
            }
            return {
                rowIdx: _curFocus.rowIdx,
                colIdx: _curFocus.colIdx,
                recordKey: keys.recordKey,
                fieldKey: keys.fieldKey,
                columnKey: keys.columnKey,
                gridPane: _curFocus.gridPane
            };
        }
        this.Clear(true);
    };
    SP.JsGrid.Internal.SelectionManager.SelectOp = {
        Set: 0,
        Append: 1,
        ReplaceLast: 2
    };
    SP.Utilities.Set = function(items) {
        this.collection = items != null ? items : {};
    };
    SP.Utilities.Set.prototype = {
        IsEmpty: function() {
            for (var i in this.collection) {
                return false;
            }
            return true;
        },
        First: function() {
            for (var i in this.collection) {
                return i;
            }
            Sys.Debug.assert(false, "Should not call First on empty Set");
            return null;
        },
        GetCollection: function() {
            return this.collection;
        },
        ToArray: function() {
            return SP.Internal.JS.ConvertSetKeysToArray(this.collection);
        },
        AddArray: function(itemArray) {
            for (var i = 0; i < itemArray.length; i++) {
                this.collection[itemArray[i]] = 1;
            }
            return this;
        },
        Add: function(item) {
            this.collection[item] = 1;
            return item;
        },
        Remove: function(item) {
            var r = this.collection[item];

            delete this.collection[item];
            return r;
        },
        Clear: function() {
            this.collection = {};
            return this;
        },
        Contains: function(item) {
            return item in this.collection;
        },
        Clone: function() {
            var r = {};

            for (var i in this.collection) {
                r[i] = 1;
            }
            return new SP.Utilities.Set(r);
        },
        SymmetricDifference: function(otherSet) {
            var r = {};

            for (var i in this.collection) {
                if (!(i in otherSet.collection)) {
                    r[i] = 1;
                }
            }
            for (i in otherSet.collection) {
                if (!(i in this.collection)) {
                    r[i] = 1;
                }
            }
            return new SP.Utilities.Set(r);
        },
        Difference: function(otherSet) {
            var r = {};

            for (var i in this.collection) {
                if (!(i in otherSet.collection)) {
                    r[i] = 1;
                }
            }
            return new SP.Utilities.Set(r);
        },
        Union: function(otherSet) {
            var r = this.Clone();

            for (var i in otherSet.collection) {
                r.collection[i] = 1;
            }
            return r;
        },
        UnionWith: function(otherSet) {
            for (var i in otherSet.collection) {
                this.collection[i] = 1;
            }
        },
        Intersection: function(otherSet) {
            var r = {};

            for (var i in this.collection) {
                if (i in otherSet.collection) {
                    r[i] = 1;
                }
            }
            return new SP.Utilities.Set(r);
        }
    };
    SP.Utilities.KeyMap = function() {
        this.dictionary = {};
        this.valueKeyMap = {};
    };
    SP.Utilities.KeyMap.prototype = {
        Add: function(key, value) {
            this.dictionary[key] = value;
            this.valueKeyMap[value] = key;
        },
        RemoveKey: function(key) {
            delete this.valueKeyMap[this.dictionary[key]];
            delete this.dictionary[key];
        },
        RemoveValue: function(value) {
            delete this.dictionary[this.valueKeyMap[value]];
            delete this.valueKeyMap[value];
        },
        GetValue: function(key) {
            return this.dictionary[key];
        },
        GetKey: function(value) {
            return this.valueKeyMap[value];
        },
        GetDictionary: function() {
            return this.dictionary;
        },
        Clear: function() {
            this.dictionary = {};
            this.valueKeyMap = {};
        },
        ContainsKey: function(key) {
            return key in this.dictionary;
        },
        ContainsValue: function(value) {
            return value in this.valueKeyMap;
        }
    };
    SP.Utilities.Range = function(begin, end) {
        if (begin == null || end == null) {
            this.Clear();
        }
        else {
            this.begin = begin;
            this.end = end;
        }
    };
    SP.Utilities.Range.prototype = {
        Normalize: function() {
            var b = Math.min(this.begin, this.end);
            var e = Math.max(this.begin, this.end);

            this.begin = b;
            this.end = e;
            return this;
        },
        Contains: function(value) {
            return value >= this.begin && value <= this.end;
        },
        IsEmpty: function() {
            return this.begin > this.end;
        },
        Clear: function() {
            this.begin = 0;
            this.end = -1;
        },
        Size: function() {
            return Math.max(0, this.end - this.begin + 1);
        },
        Overlaps: function(otherRange) {
            return this.end >= otherRange.begin && otherRange.end >= this.begin;
        },
        Intersect: function(otherRange) {
            return new SP.Utilities.Range(Math.max(this.begin, otherRange.begin), Math.min(this.end, otherRange.end));
        }
    };
    if (!Type.isNamespace('SP.JsGrid')) {
        Type.registerNamespace('SP.JsGrid');
    }
    SP.JsGrid.SplitterBar = function(objBag, minWidth, fnGetLeftWidth, fnGetTotalWidth, fnSetLeftWidth) {
        var UserState = {
            None: 0,
            Hover: 1,
            Drag: 2
        };
        var _splitter, _ghostSplitter;
        var _splitterStyles = objBag.styleMgr.splitterStyleCollection;
        var _fnSetWidth;
        var _curState = UserState.None;
        var _fnDispose;
        var _splitterHTML = ["<div splitId='innerContainer' style='position:absolute;top:1px;left:1px;width:2px;border:1px solid;'></div>", "<div splitId='outerHandle' style='position:absolute;left:0px;height:43px;width:4px;border:1px solid;'>", "<div splitId='innerHandle' style='height:41px;width:2px;position:relative;border:1px solid;'>", "<div splitId='bitTop' style='position:absolute;top:17px;left:0px;height:1px;width:2px;border-top:1px solid;'></div>", "<div splitId='bitMiddle' style='position:absolute;top:20px;left:0px;height:1px;width:2px;border-top:1px solid;'></div>", "<div splitId='bitBottom' style='position:absolute;top:23px;left:0px;height:1px;width:2px;border-top:1px solid;'></div></div></div>"].join('');

        function CreateSplitter() {
            var r;

            r = document.createElement('div');
            r.innerHTML = _splitterHTML;
            r.splitId = 'outerContainer';
            r.style.cssText = 'width:6px;float:' + objBag.RTL.left + ';position:relative;cursor:col-resize;';
            r.childObjects = SP.Internal.DomElement.GetChildrenWithCustomAttribute(r, 'splitId');
            return r;
        }
        function SetHeight(childObjects, height) {
            childObjects.outerContainer.style.height = height + 'px';
            childObjects.innerContainer.style.height = Math.max(height - 4, 0) + 'px';
            childObjects.outerHandle.style.top = Math.round((height - 45) / 2) + 'px';
        }
        function ApplyStyleToChildren(childObjects, splitterStyle, handleStyle) {
            childObjects.outerContainer.style.backgroundColor = splitterStyle.outerBorderColor;
            childObjects.innerContainer.style.borderColor = splitterStyle.innerBorderColor;
            childObjects.innerContainer.style.borderLeftColor = splitterStyle.leftInnerBorderColor;
            childObjects.innerContainer.style.backgroundColor = splitterStyle.backgroundColor;
            childObjects.outerHandle.style.borderColor = handleStyle.outerBorderColor;
            childObjects.innerHandle.style.borderColor = handleStyle.innerBorderColor;
            childObjects.innerHandle.style.borderLeftColor = handleStyle.leftInnerBorderColor;
            childObjects.innerHandle.style.backgroundColor = handleStyle.backgroundColor;
            childObjects.bitTop.style.borderTopColor = handleStyle.gripUpperColor;
            childObjects.bitTop.style.backgroundColor = handleStyle.gripLowerColor;
            childObjects.bitMiddle.style.borderTopColor = handleStyle.gripUpperColor;
            childObjects.bitMiddle.style.backgroundColor = handleStyle.gripLowerColor;
            childObjects.bitBottom.style.borderTopColor = handleStyle.gripUpperColor;
            childObjects.bitBottom.style.backgroundColor = handleStyle.gripLowerColor;
        }
        function SetUpSplitterMouseHandlers() {
            var mouseDownX;

            $addHandler(document.body, 'mousemove', OnMouseover);
            $addHandler(_splitter, 'mousedown', OnMousedown);
            function GetMouseX(eventInfo) {
                var pos = {
                    x: eventInfo.screenX,
                    y: eventInfo.screenY
                };

                if (isNaN(pos.x)) {
                    pos = {
                        x: eventInfo.rawEvent.pageX,
                        y: eventInfo.rawEvent.pageY
                    };
                }
                return (SP.Internal.DomElement.AdjustCoordsForIEZoom(pos)).x;
            }
            function OnMouseover(eventInfo) {
                if (_curState != UserState.Drag) {
                    if (!SP.Internal.DomElement.ElementAttachedToDom(_splitter)) {
                        return;
                    }
                    var mouseLoc = SP.Internal.DomElement.GetEventLocation(eventInfo);

                    if (SP.Internal.DomElement.PointInDomElem(mouseLoc.x, mouseLoc.y, _splitter)) {
                        if (_curState == UserState.None) {
                            ApplyStyleToChildren(_splitter.childObjects, _splitterStyles.hover, _splitterStyles.hoverHandle);
                            _curState = UserState.Hover;
                        }
                    }
                    else if (_curState == UserState.Hover) {
                        ApplyStyleToChildren(_splitter.childObjects, _splitterStyles.normal, _splitterStyles.normalHandle);
                        _curState = UserState.None;
                    }
                }
            }
            function OnMousedown(eventInfo) {
                if (eventInfo.button == Sys.UI.MouseButton.leftButton) {
                    SP.Internal.DomElement.SetCapture(_splitter, OnCapturedMousemove, OnCapturedMouseup);
                    eventInfo.preventDefault();
                    mouseDownX = GetMouseX(eventInfo);
                    OnBeginSplitterDrag();
                }
            }
            function OnCapturedMousemove(eventInfo) {
                OnDuringSplitterDrag(GetMouseX(eventInfo) - mouseDownX);
            }
            function OnCapturedMouseup(eventInfo) {
                mouseDownX = null;
                OnEndSplitterDrag();
                OnMouseover(eventInfo);
            }
            return function() {
                $removeHandler(document.body, 'mousemove', OnMouseover);
                $removeHandler(_splitter, 'mousedown', OnMousedown);
            };
        }
        var _endingSplitterWidth = -1;

        function OnBeginSplitterDrag() {
            _ghostSplitter.style.left = '-2000px';
            _ghostSplitter.style.display = 'block';
            _curState = UserState.Drag;
            ApplyStyleToChildren(_splitter.childObjects, _splitterStyles.drag, _splitterStyles.dragHandle);
            SP.Internal.DomElement.SetOpacity(_splitter, .4);
        }
        function OnDuringSplitterDrag(moveDeltaX) {
            _endingSplitterWidth = GetNewWidth(moveDeltaX);
            _ghostSplitter.style.left = (objBag.RTL.bEnabled ? fnGetTotalWidth() - _splitter.offsetWidth - _endingSplitterWidth : _endingSplitterWidth + 1) + 'px';
        }
        function OnEndSplitterDrag() {
            _ghostSplitter.style.display = 'none';
            if (_endingSplitterWidth > 0) {
                fnSetLeftWidth(_endingSplitterWidth);
                _endingSplitterWidth = -1;
            }
            _curState = UserState.None;
            SP.Internal.DomElement.RemoveOpacity(_splitter);
        }
        function GetNewWidth(moveDeltaX) {
            moveDeltaX = moveDeltaX * (objBag.RTL.bEnabled ? -1 : 1);
            var w = fnGetLeftWidth() + moveDeltaX;

            w = Math.max(w, minWidth);
            w = Math.min(w, fnGetTotalWidth() - SP.Internal.ScrollBar.GetSystemScrollBarThickness() - _splitter.offsetWidth - minWidth);
            return w;
        }
        this.Init = function(parent, height, topAdjustment) {
            _splitter = CreateSplitter();
            _splitter.style.marginTop = topAdjustment + 'px';
            _fnDispose = SetUpSplitterMouseHandlers();
            _ghostSplitter = CreateSplitter();
            _ghostSplitter.style.display = 'none';
            _ghostSplitter.style.position = 'absolute';
            _ghostSplitter.style.top = topAdjustment + 1 + 'px';
            _ghostSplitter.style.zIndex = "1";
            this.SetHeight(height);
            ApplyStyleToChildren(_splitter.childObjects, _splitterStyles.normal, _splitterStyles.normalHandle);
            ApplyStyleToChildren(_ghostSplitter.childObjects, _splitterStyles.drag, _splitterStyles.dragHandle);
            parent.appendChild(_ghostSplitter);
            return _splitter;
        };
        this.Hide = function() {
            _splitter.style.display = 'none';
        };
        this.Show = function() {
            _splitter.style.display = 'block';
        };
        this.IsInited = function() {
            return _splitter != null;
        };
        this.Dispose = function() {
            if (_fnDispose != null) {
                _fnDispose();
            }
            if (_splitter != null) {
                _splitter = (_splitter.childObjects = null);
            }
            if (_ghostSplitter != null) {
                _ghostSplitter = (_ghostSplitter.childObjects = null);
            }
        };
        this.SetHeight = function(height) {
            SetHeight(_splitter.childObjects, height);
            SetHeight(_ghostSplitter.childObjects, height);
        };
        this.ExecuteTouchAction = function(eventInfo, pos, moveDelta) {
            var touchTypes;

            EnsureScriptFunc("XUI.js", "XUI.Touch.Type", function() {
                touchTypes = XUI.Touch.NormalizedType;
            });
            switch (eventInfo.type) {
            case touchTypes.touchstart:
                OnBeginSplitterDrag();
                break;
            case touchTypes.touchmove:
                eventInfo.preventDefault();
                OnDuringSplitterDrag(moveDelta.x);
                break;
            case touchTypes.touchoend:
                OnEndSplitterDrag();
                break;
            }
        };
        this.ShouldUpdateTouchStartPosition = function(moveDelta) {
            return false;
        };
    };
    SP.JsGrid.StaticDataSource = function(optSerializedJsGridData, optFnGetPropType) {
        var _this = this;
        var deserializer;
        var bLimitRecordSize = false;

        this.tableCache;
        this.styleMgr;
        this.recordFactory;
        this.bHollowOutBlobs;
        this.AddSerializedData = function(serializedJsGridData) {
            var deserializer2 = new SP.JsGrid.Deserializer(serializedJsGridData, SP.JsGrid.DeserializationMode.Full);

            _this.tableCache.SetConvertAllBlobsToRecords(true);
            _this.tableCache.AddRawViewToCache(SP.Internal.JS.ConvertSetKeysToArray(deserializer2.data), deserializer2.data, serializedJsGridData.ViewInfo);
        };
        this.LoadSerializedData = function(serializedJsGridData) {
            deserializer = new SP.JsGrid.Deserializer(serializedJsGridData, SP.JsGrid.DeserializationMode.Full);
            var recCount = deserializer.view.length;
            var bConvertAllRecords = recCount < 750;
            var maxRecordCount = !bConvertAllRecords && recCount > 300 ? 300 : null;

            bLimitRecordSize = maxRecordCount != null;
            _this.tableCache.Clear();
            _this.tableCache.SetMaxRecordCount(maxRecordCount);
            _this.tableCache.SetConvertAllBlobsToRecords(bConvertAllRecords);
            _this.tableCache.SetKeepDataInBlobCache(!bLimitRecordSize);
            _this.tableCache.AddRawDataToCache(SP.Internal.JS.ConvertSetKeysToArray(deserializer.data), deserializer.data);
            _this.recordFactory = new SP.JsGrid.RecordFactory(deserializer.gridFieldMap, deserializer.keyColumnName, optFnGetPropType);
            deserializer.InitCellStyles(_this.styleMgr);
        };
        this.InitJsGridParams = function(optGridParams) {
            var r = deserializer.InitJsGridParams(optGridParams);

            r.tableCache = this.tableCache;
            r.styleManager = this.styleMgr;
            return r;
        };
        this.InitJsGridTableViewParams = function(optTableViewParams) {
            return deserializer.InitJsGridTableViewParams(optTableViewParams);
        };
        this.InitJsGridRowViewParams = function(optRowViewParams) {
            return deserializer.InitJsGridRowViewParams(optRowViewParams);
        };
        this.GetAdditionalParams = function() {
            return deserializer.additionalParams;
        };
        this.HasColumnName = function(columnName) {
            return this.recordFactory.gridFieldMap[columnName] != null;
        };
        this.AddColumn = function(gridField, values) {
            this.recordFactory.gridFieldMap[gridField.key] = gridField;
            var data = {};

            for (var idx in values) {
                var prop = this.recordFactory.MakePropForRecord(gridField, values[idx].data, values[idx].localized);

                if (prop != null) {
                    data[idx] = {
                        isProp: true,
                        prop: prop
                    };
                }
                else {
                    data[idx] = {
                        hasLocalized: gridField.hasLocalizedValue,
                        hasData: gridField.hasDataValue,
                        data: values[idx].data,
                        localized: values[idx].localized
                    };
                }
            }
            this.tableCache.AddColumn(gridField.key, data);
        };
        this.RemoveColumn = function(fieldKey) {
            delete this.recordFactory.gridFieldMap[fieldKey];
            this.tableCache.RemoveColumn(fieldKey);
        };
        function ConvertDataToRecords(data, keys) {
            var r = new Array(keys.length);
            var bKeepRawData = _this.bHollowOutBlobs != null ? !_this.bHollowOutBlobs : !bLimitRecordSize;

            for (var i in keys) {
                var rawRecInfo = data[keys[i]];

                r[keys[i]] = _this.recordFactory.MakeRecord(rawRecInfo.data, rawRecInfo.localized, bKeepRawData);
            }
            return r;
        }
        function Init() {
            _this.tableCache = new SP.JsGrid.TableCache(null, ConvertDataToRecords);
            _this.styleMgr = SP.JsGrid.Style.MakeJsGridStyleManager();
            if (optSerializedJsGridData != null) {
                _this.LoadSerializedData(optSerializedJsGridData);
                optSerializedJsGridData = null;
            }
        }
        Init();
    };
    SP.JsGrid.Style = (function() {
        var testElement, unstyledTestElement;
        var headerStyleType = {
            Normal: 0,
            PartSelected: 1,
            AllSelected: 2,
            NormalHover: 3,
            PartSelectedHover: 4,
            AllSelectedHover: 5
        };
        var styleType = {
            Splitter: {
                outerBorderColor: {
                    jsId: 'borderTopColor'
                },
                leftInnerBorderColor: {
                    jsId: 'borderLeftColor'
                },
                innerBorderColor: {
                    jsId: 'borderBottomColor'
                },
                backgroundColor: {}
            },
            SplitterHandle: {
                outerBorderColor: {
                    jsId: 'borderTopColor'
                },
                leftInnerBorderColor: {
                    jsId: 'borderLeftColor'
                },
                innerBorderColor: {
                    jsId: 'borderBottomColor'
                },
                backgroundColor: {},
                gripUpperColor: {
                    jsId: 'color'
                },
                gripLowerColor: {
                    jsId: 'borderRightColor'
                }
            },
            GridPane: {
                verticalBorderColor: {
                    jsId: 'borderRightColor'
                },
                verticalBorderStyle: {
                    jsId: 'borderRightStyle'
                },
                horizontalBorderColor: {
                    jsId: 'borderBottomColor'
                },
                horizontalBorderStyle: {
                    jsId: 'borderBottomStyle'
                },
                backgroundColor: {
                    jsId: 'backgroundColor'
                },
                columnDropIndicatorColor: {
                    jsId: 'borderLeftColor'
                },
                rowDropIndicatorColor: {
                    jsId: 'borderLeftColor'
                },
                linkColor: {
                    classId: 'link',
                    jsId: 'color'
                },
                visitedLinkColor: {
                    classId: 'link',
                    jsId: 'backgroundColor'
                },
                copyRectForeBorderColor: {
                    classId: 'selection',
                    jsId: 'borderLeftColor'
                },
                copyRectBackBorderColor: {
                    classId: 'selection',
                    jsId: 'borderRightColor'
                },
                focusRectBorderColor: {
                    classId: 'selection',
                    jsId: 'borderTopColor'
                },
                selectionRectBorderColor: {
                    classId: 'selection',
                    jsId: 'borderBottomColor'
                },
                selectedCellBgColor: {
                    jsId: 'color',
                    classId: 'selection',
                    fromCss: CreateAlphaColorFromCssValue
                },
                readonlySelectionRectBorderColor: {
                    classId: 'readOnlySelection',
                    jsId: 'borderBottomColor'
                },
                changeHighlightCellBgColor: {
                    classId: 'edit',
                    jsId: 'backgroundColor',
                    fromCss: CreateAlphaColorFromCssValue
                },
                fillRectBorderColor: {
                    classId: 'edit',
                    jsId: 'borderLeftColor'
                },
                errorRectBorderColor: {
                    classId: 'edit',
                    jsId: 'borderTopColor'
                }
            },
            Header: {
                font: {
                    jsId: 'fontFamily'
                },
                fontSize: {},
                fontWeight: {},
                textColor: {
                    jsId: 'color'
                },
                backgroundColor: {},
                outerBorderColor: {
                    jsId: 'borderBottomColor'
                },
                innerBorderColor: {
                    jsId: 'borderRightColor'
                },
                eyeBrowBorderColor: {
                    jsId: 'borderTopColor'
                },
                eyeBrowColor: {
                    jsId: 'borderLeftColor'
                },
                menuColor: {
                    classId: 'elementColor',
                    jsId: 'backgroundColor'
                },
                menuBorderColor: {
                    classId: 'elementColor',
                    jsId: 'borderLeftColor'
                },
                resizeColor: {
                    classId: 'elementColor',
                    jsId: 'borderBottomcolor'
                },
                resizeBorderColor: {
                    classId: 'elementColor',
                    jsId: 'borderRightColor'
                },
                menuHoverColor: {
                    classId: 'elementHoverColor',
                    jsId: 'backgroundColor'
                },
                menuHoverBorderColor: {
                    classId: 'elementHoverColor',
                    jsId: 'borderLeftColor'
                },
                resizeHoverColor: {
                    classId: 'elementHoverColor',
                    jsId: 'borderTopColor'
                },
                resizeHoverBorderColor: {
                    classId: 'elementHoverColor',
                    jsId: 'borderRightColor'
                },
                eyeBrowHoverColor: {
                    classId: 'elementHoverColor',
                    jsId: 'borderTopColor'
                },
                eyeBrowHoverBorderColor: {
                    classId: 'elementHoverColor',
                    jsId: 'borderBottomColor'
                },
                elementClickColor: {
                    classId: 'elementClickColor',
                    jsId: 'backgroundColor'
                },
                elementClickBorderColor: {
                    classId: 'elementClickColor',
                    jsId: 'borderLeftColor'
                }
            },
            RowHeaderStyle: {
                backgroundColor: {},
                outerBorderColor: {
                    jsId: 'borderBottomColor'
                },
                innerBorderColor: {
                    jsId: 'borderRightColor'
                }
            },
            TimescaleTier: {
                font: {
                    jsId: 'fontFamily'
                },
                fontSize: {},
                fontWeight: {},
                textColor: {
                    jsId: 'color'
                },
                backgroundColor: {},
                verticalBorderColor: {
                    jsId: 'borderRightColor'
                },
                verticalBorderStyle: {
                    jsId: 'borderRightStyle'
                },
                horizontalBorderColor: {
                    jsId: 'borderBottomColor'
                },
                horizontalBorderStyle: {
                    jsId: 'borderBottomStyle'
                },
                outerBorderColor: {
                    jsId: 'borderLeftColor'
                },
                todayLineColor: {
                    jsId: 'borderTopColor'
                }
            },
            Cell: {
                font: {
                    jsId: 'fontFamily'
                },
                fontSize: {},
                fontWeight: {},
                fontStyle: {},
                textColor: {
                    jsId: 'color'
                },
                backgroundColor: {},
                textAlign: {}
            },
            Widget: {
                backgroundColor: {
                    jsId: 'backgroundColor'
                },
                borderColor: {
                    jsId: 'borderColor'
                }
            }
        };

        for (var type in styleType) {
            for (var styleName in styleType[type]) {
                var style = styleType[type][styleName];
                var jsId = style.jsId == null ? styleName : style.jsId;

                if (jsId != '' && (style.cssId == null || style.cssId == '')) {
                    style.cssId = SP.Internal.DomElement.DashNameFromCamelName(jsId);
                    style.jsId = jsId;
                }
            }
        }
        $addHandler(window, 'unload', Dispose);
        function Dispose() {
            $removeHandler(window, 'unload', Dispose);
            testElement = (unstyledTestElement = null);
        }
        function CreateAlphaColorFromCssValue(cssValue) {
            var r = SP.JsGrid.Internal.Color.HexStringToColor(cssValue);

            if (r != null) {
                r = new SP.JsGrid.Internal.Color.MakeAlphaColor(.2, r.r, r.g, r.b);
            }
            return r;
        }
        function CreateStyleObject(styleDefaultObject) {
            var r = {};

            for (var idx in styleDefaultObject) {
                r[idx] = null;
            }
            return r;
        }
        function CreateReadOnlyCellStyle() {
            return {
                textColor: null
            };
        }
        function MakeHeaderStyleCollection() {
            function MakeHeaderStyle(type) {
                var r = CreateStyleObject(styleType.Header);

                r.type = type;
                return r;
            }
            var r = {
                normal: MakeHeaderStyle(headerStyleType.Normal),
                normalHover: MakeHeaderStyle(headerStyleType.NormalHover),
                partSelected: MakeHeaderStyle(headerStyleType.PartSelected),
                partSelectedHover: MakeHeaderStyle(headerStyleType.PartSelectedHover),
                allSelected: MakeHeaderStyle(headerStyleType.AllSelected),
                allSelectedHover: MakeHeaderStyle(headerStyleType.AllSelectedHover)
            };

            return r;
        }
        function MakeSplitterStyleCollection() {
            var r = {
                normal: CreateStyleObject(styleType.Splitter),
                normalHandle: CreateStyleObject(styleType.SplitterHandle),
                hover: CreateStyleObject(styleType.Splitter),
                hoverHandle: CreateStyleObject(styleType.SplitterHandle),
                drag: CreateStyleObject(styleType.Splitter),
                dragHandle: CreateStyleObject(styleType.SplitterHandle)
            };

            return r;
        }
        function LoadNameClassInfoFromStyle(styleType) {
            var r = {};

            for (var idx in styleType) {
                var rIdx = styleType[idx].classId == null ? 'base' : styleType[idx].classId;

                if (!(rIdx in r)) {
                    r[rIdx] = {};
                }
                r[rIdx][idx] = styleType[idx];
            }
            return r;
        }
        function LoadCollectionCss(styleObject, classNameInfo, cssNameCollection) {
            for (var idx in classNameInfo) {
                if (cssNameCollection[idx] != null) {
                    SP.JsGrid.Style.CreateStyleFromCss(classNameInfo[idx], cssNameCollection[idx], styleObject);
                }
            }
        }
        function GetDefaultStyleMgr() {
            var cellStyles = {};

            return {
                gridPaneStyle: CreateStyleObject(styleType.GridPane),
                columnHeaderStyleCollection: MakeHeaderStyleCollection(),
                rowHeaderStyleCollection: MakeHeaderStyleCollection(),
                splitterStyleCollection: MakeSplitterStyleCollection(),
                defaultCellStyle: {},
                readOnlyCellStyle: CreateReadOnlyCellStyle(),
                readOnlyFocusedCellStyle: {},
                timescaleTierStyle: CreateStyleObject(styleType.TimescaleTier),
                groupingStyles: [],
                widgetDockStyle: {},
                widgetDockHoverStyle: {},
                widgetDockPressedStyle: {},
                RegisterCellStyle: function(styleId, cellStyle) {
                    cellStyles[styleId] = cellStyle;
                },
                GetCellStyle: function(styleId) {
                    return cellStyles[styleId];
                },
                UpdateSplitterStyleFromCss: function(styleObject, splitterStyleNameCollection) {
                    for (var subStyleTypeName in splitterStyleNameCollection) {
                        for (var name in splitterStyleNameCollection[subStyleTypeName]) {
                            SP.JsGrid.Style.CreateStyleFromCss(styleType.Splitter, splitterStyleNameCollection[subStyleTypeName][name], styleObject[subStyleTypeName], name);
                        }
                    }
                },
                UpdateHeaderStyleFromCss: function(styleObject, headerStyleNameCol) {
                    for (var subStyleTypeName in headerStyleNameCol) {
                        for (var name in headerStyleNameCol[subStyleTypeName]) {
                            SP.JsGrid.Style.CreateStyleFromCss(styleType.Header, headerStyleNameCol[subStyleTypeName][name], styleObject[subStyleTypeName], name);
                        }
                    }
                },
                UpdateGridPaneStyleFromCss: function(styleObject, gridStyleNameCollection) {
                    LoadCollectionCss(styleObject, LoadNameClassInfoFromStyle(styleType.GridPane), gridStyleNameCollection);
                },
                UpdateDefaultCellStyleFromCss: function(styleObject, cssClass) {
                    SP.JsGrid.Style.CreateStyleFromCss(styleType.Cell, cssClass, styleObject);
                    styleObject.textAlign = SP.JsGrid.Utility.GetDocumentDirection() == "rtl" ? 'right' : 'left';
                },
                UpdateGroupStylesFromCss: function(styleObject, prefix) {
                    var loadedGroupingStyles = [];
                    var cellStyle = {};

                    for (var idx = 1; idx < 10; idx++) {
                        cellStyle = SP.JsGrid.Style.CreateStyleFromCss(styleType.Cell, prefix + idx);
                        if (!SP.Internal.JS.IsAssocArrayEmpty(cellStyle)) {
                            styleObject.push(cellStyle);
                        }
                    }
                }
            };
        }
        function InitStylesFromCSS(styleMgr) {
            var defaultCssStyles = [[styleMgr.gridPaneStyle, styleMgr.UpdateGridPaneStyleFromCss, null, {
                base: 'ms-grid',
                link: 'ms-grid-link',
                selection: 'ms-grid-selection',
                readOnlySelection: 'ms-grid-selection-readonly',
                edit: 'ms-grid-edit'
            }], [styleMgr.columnHeaderStyleCollection, styleMgr.UpdateHeaderStyleFromCss, null, {
                normal: {
                    base: 'ms-grid-col-header-normal',
                    elementColor: 'ms-grid-col-header-elem-bg-colors-normal',
                    elementHoverColor: 'ms-grid-col-header-elem-hover-bg-colors-normal',
                    elementClickColor: 'ms-grid-col-elem-colors-click-normal'
                },
                normalHover: {
                    base: 'ms-grid-col-header-normal-hover',
                    elementColor: 'ms-grid-col-header-elem-bg-colors-normal-hover',
                    elementHoverColor: 'ms-grid-col-header-elem-hover-bg-colors-normal-hover',
                    elementClickColor: 'ms-grid-col-elem-colors-click-normal-hover'
                },
                partSelected: {
                    base: 'ms-grid-col-header-part-selected',
                    elementColor: 'ms-grid-col-header-elem-bg-colors-part-selected',
                    elementHoverColor: 'ms-grid-col-header-elem-hover-bg-colors-part-selected',
                    elementClickColor: 'ms-grid-col-elem-colors-click-part-selected'
                },
                partSelectedHover: {
                    base: 'ms-grid-col-header-part-selected-hover',
                    elementColor: 'ms-grid-col-header-elem-bg-colors-part-selected-hover',
                    elementHoverColor: 'ms-grid-col-header-elem-hover-bg-colors-part-selected-hover',
                    elementClickColor: 'ms-grid-col-elem-colors-click-part-selected-hover'
                },
                allSelected: {
                    base: 'ms-grid-col-header-all-selected',
                    elementColor: 'ms-grid-col-header-elem-bg-colors-all-selected',
                    elementHoverColor: 'ms-grid-col-header-elem-hover-bg-colors-all-selected',
                    elementClickColor: 'ms-grid-col-elem-colors-click-all-selected'
                },
                allSelectedHover: {
                    base: 'ms-grid-col-header-all-selected-hover',
                    elementColor: 'ms-grid-col-header-elem-bg-colors-all-selected-hover',
                    elementHoverColor: 'ms-grid-col-header-elem-hover-bg-colors-all-selected-hover',
                    elementClickColor: 'ms-grid-col-elem-colors-click-all-selected-hover'
                }
            }], [styleMgr.rowHeaderStyleCollection, styleMgr.UpdateHeaderStyleFromCss, null, {
                normal: {
                    base: 'ms-grid-row-header-normal'
                },
                normalHover: {
                    base: 'ms-grid-row-header-normal-hover'
                },
                partSelected: {
                    base: 'ms-grid-row-header-part-selected'
                },
                partSelectedHover: {
                    base: 'ms-grid-row-header-part-selected-hover'
                },
                allSelected: {
                    base: 'ms-grid-row-header-all-selected'
                },
                allSelectedHover: {
                    base: 'ms-grid-row-header-all-selected-hover'
                }
            }], [styleMgr.splitterStyleCollection, styleMgr.UpdateSplitterStyleFromCss, null, {
                normal: {
                    base: 'ms-grid-splitter'
                },
                normalHandle: {
                    base: 'ms-grid-splitter-handle'
                },
                hover: {
                    base: 'ms-grid-splitter-hover'
                },
                hoverHandle: {
                    base: 'ms-grid-splitter-handle-hover'
                },
                drag: {
                    base: 'ms-grid-splitter-drag'
                },
                dragHandle: {
                    base: 'ms-grid-splitter-handle-drag'
                }
            }], [styleMgr.defaultCellStyle, styleMgr.UpdateDefaultCellStyleFromCss, null, 'ms-grid-cell'], [styleMgr.readOnlyCellStyle, styleType.Cell, 'ms-grid-cell-readonly'], [styleMgr.readOnlyFocusedCellStyle, styleType.Cell, 'ms-grid-cell-readonly-focused'], [styleMgr.timescaleTierStyle, styleType.TimescaleTier, 'ms-grid-timescale'], [styleMgr.groupingStyles, styleMgr.UpdateGroupStylesFromCss, null, 'ms-grid-group'], [styleMgr.widgetDockStyle, styleType.Widget, 'jsgrid-widget-dock'], [styleMgr.widgetDockHoverStyle, styleType.Widget, 'jsgrid-widget-dock-hover'], [styleMgr.widgetDockPressedStyle, styleType.Widget, 'jsgrid-widget-dock-pressed']];

            for (var i = 0; i < defaultCssStyles.length; i++) {
                var entry = defaultCssStyles[i];

                if (entry[2] != null) {
                    SP.JsGrid.Style.CreateStyleFromCss(entry[1], entry[2], entry[0]);
                }
                else {
                    entry[1].apply(styleMgr, [entry[0], entry[3]]);
                }
            }
            return styleMgr;
        }
        return {
            Type: styleType,
            SetRTL: function(rtlObject) {
                _rtl = rtlObject;
            },
            MakeJsGridStyleManager: function() {
                return InitStylesFromCSS(GetDefaultStyleMgr());
            },
            CreateStyleFromCss: function(styleType, cssStyleName, optExistingStyle, optClassId) {
                var r = optExistingStyle == null ? {} : optExistingStyle;

                if (testElement == null) {
                    Sys.Debug.assert(unstyledTestElement == null);
                    testElement = document.createElement('div');
                    testElement.style.display = 'none';
                    document.body.appendChild(testElement);
                    unstyledTestElement = document.createElement('div');
                    unstyledTestElement.style.display = 'none';
                    document.body.appendChild(unstyledTestElement);
                }
                Sys.Debug.assert(unstyledTestElement.className == '');
                testElement.className = cssStyleName;
                for (var idx in styleType) {
                    if (optClassId == null || optClassId == styleType[idx].classId || optClassId == 'base' && styleType[idx].classId == null) {
                        var jsId = styleType[idx].jsId;

                        if (jsId != '') {
                            var testElemStyle = SP.Internal.DomElement.GetComputedStyle(testElement, jsId, styleType[idx].cssId);
                            var unstyledTestElemStyle = SP.Internal.DomElement.GetComputedStyle(unstyledTestElement, jsId, styleType[idx].cssId);

                            if (jsId != "backgroundColor" || testElemStyle != unstyledTestElemStyle) {
                                var toAssign = styleType[idx].fromCss != null ? styleType[idx].fromCss(testElemStyle) : testElemStyle;

                                if (toAssign != null) {
                                    r[idx] = toAssign;
                                }
                            }
                            else {
                                r[idx] = "transparent";
                            }
                        }
                    }
                }
                return r;
            },
            CreateStyle: function(styleType, styleProps) {
                var r = {};

                for (var idx in styleType) {
                    if (styleProps[idx] != null) {
                        r[idx] = styleProps[idx];
                    }
                }
                return r;
            },
            MergeCellStyles: function(majorStyle, minorStyle) {
                var r = {};

                for (var idx in styleType.Cell) {
                    r[idx] = majorStyle != null && majorStyle[idx] != null ? majorStyle[idx] : minorStyle[idx];
                }
                return r;
            },
            ApplyCellStyle: function(td, style) {
                var s = td.style;

                if (style.textColor != null)
                    s.color = style.textColor;
                if (style.backgroundColor != null)
                    s.backgroundColor = style.backgroundColor;
                if (style.font != null)
                    s.fontFamily = style.font;
                if (style.fontSize != null)
                    s.fontSize = style.fontSize;
                if (style.fontWeight != null)
                    s.fontWeight = style.fontWeight;
                if (style.fontStyle != null)
                    s.fontStyle = style.fontStyle;
                if (style.textAlign != null)
                    s.textAlign = style.textAlign;
            },
            ApplyRowHeaderStyle: function(domObj, style, fnGetHeaderSibling) {
                var domObjStyle = domObj.style;

                if (domObj.headerStyleType != style.type) {
                    domObj.headerStyleType = style.type;
                    domObjStyle.backgroundColor = style.backgroundColor;
                    if (style.innerBorderColor != null) {
                        domObj.headerStyleInnerBorderString = (domObjStyle.borderBottom = '1px solid ' + style.innerBorderColor);
                        domObjStyle['border' + _rtl.Right] = '1px solid ' + style.outerBorderColor;
                    }
                    else {
                        domObj.headerStyleBorderString = (domObjStyle.borderBottom = (domObjStyle['border' + _rtl.Right] = '1px solid ' + style.outerBorderColor));
                    }
                    domObjStyle.borderTop = '0px';
                }
                var previousSibling = fnGetHeaderSibling && fnGetHeaderSibling(domObj, true);

                if (previousSibling != null) {
                    var obj = FindObjectWithOverridingStyle(previousSibling, domObj);

                    if (style.innerBorderColor != null) {
                        previousSibling.style.borderBottom = obj.headerStyleInnerBorderString;
                    }
                    else {
                        previousSibling.style.borderBottom = obj.headerStyleBorderString;
                    }
                }
                var nextSibling = fnGetHeaderSibling && fnGetHeaderSibling(domObj, false);
                var obj = nextSibling != null ? FindObjectWithOverridingStyle(nextSibling, domObj) : domObj;

                if (obj.headerStyleInnerBorderString != null) {
                    domObjStyle.borderBottom = obj.headerStyleInnerBorderString;
                }
                else {
                    domObjStyle.borderBottom = obj.headerStyleBorderString;
                }
                function FindObjectWithOverridingStyle(obj1, obj2) {
                    Sys.Debug.assert(obj1.headerStyleType != null || obj2.headerStyleType != null);
                    return obj1.headerStyleType == null ? obj2 : obj2.headerStyleType == null ? obj1 : obj1.headerStyleType > obj2.headerStyleType ? obj1 : obj2;
                }
            },
            ApplyCornerHeaderBorderStyle: function(domObj, colStyle, rowStyle) {
                this.ApplyRowHeaderStyle(domObj, colStyle, function() {
                    return null;
                });
            },
            ApplyHeaderInnerBorderStyle: function(domObj, bIsRowHeader, headerObject) {
                domObj.style[bIsRowHeader ? 'borderTop' : 'border' + _rtl.Left] = headerObject.headerStyleInnerBorderString;
            },
            ApplyColumnContextMenuStyle: function(domObj, style) {
                domObj.style.border = SP.JsGrid.Style.MakeBorderString(1, 'solid', style.borderColor);
                domObj.style.backgroundColor = style.backgroundColor || 'transparent';
            },
            ApplySplitterStyle: function(domObj, style) {
                domObj.style.borderLeft = (domObj.style.borderRight = SP.JsGrid.Style.MakeBorderString(1, 'solid', style.outerColor));
                domObj.style.backgroundColor = style.innerColor;
            },
            MakeBorderString: function(width, style, color) {
                return [width, 'px ', style, ' ', color || 'transparent'].join('');
            },
            GetCellStyleDefaultBackgroundColor: function() {
                return '#FFFFFF';
            }
        };
    })();
    SP.JsGrid.TableCache = function(fnRequestData, fnConvertDataToRecords, fnComputeDataRangeRequest) {
        this.fnApplyUpdatesToNewRecord;
        var dataPageSize = 300, optMaxRecordCount = null;
        var bConvertAllBlobsToRecords = false, bKeepDataInBlobCache = false;
        var backgroundConversionSize = 10;
        var recordCacheSize = 0;
        var recordCache;
        var blobCache;
        var columnCache;
        var blobKeys = [];
        var outstandingRequestRanges;
        var view;
        var curRequestGeneration = 0;
        var convertBlobTaskId;
        var sizeMgr;
        var _this = this;

        InitCache();
        this.ChangeKeys = function(oldKey, newKey) {
            if (oldKey in recordCache) {
                recordCache[newKey] = recordCache[oldKey];
                delete recordCache[oldKey];
            }
            if (oldKey in blobCache) {
                blobCache[newKey] = blobCache[oldKey];
                delete blobCache[oldKey];
            }
            if (oldKey in columnCache) {
                columnCache[newKey] = columnCache[oldKey];
                delete columnCache[oldKey];
            }
            for (var i = 0; i < blobKeys.length; i++) {
                if (oldKey in blobKeys[i]) {
                    blobKeys[i][newKey] = blobKeys[i][oldKey];
                    delete blobKeys[i][oldKey];
                }
            }
            view.ChangeKeys(oldKey, newKey);
            if (sizeMgr != null) {
                sizeMgr.ChangeKeys(oldKey, newKey);
            }
        };
        this.SetDataPageSize = function(newSize) {
            dataPageSize = newSize;
        };
        this.GetDataPageSize = function() {
            return dataPageSize;
        };
        this.SetMaxRecordCount = function(optCount) {
            optMaxRecordCount = optCount;
            Sys.Debug.assert(sizeMgr == null || optMaxRecordCount == null || SP.Internal.JS.IsAssocArrayEmpty(recordCache));
            TryInitSizeMgr(false);
        };
        this.GetMaxRecordCount = function() {
            return optMaxRecordCount;
        };
        this.SetConvertAllBlobsToRecords = function(bConvert) {
            bConvertAllBlobsToRecords = bConvert;
        };
        this.GetConvertAllBlobsToRecords = function() {
            return bConvertAllBlobsToRecords;
        };
        this.SetBackgroundConversionSize = function(value) {
            backgroundConversionSize = value;
        };
        this.GetBackgroundConversionSize = function() {
            return backgroundConversionSize;
        };
        this.SetKeepDataInBlobCache = function(bKeep) {
            bKeepDataInBlobCache = bKeep;
        };
        this.GetKeepDataInBlobCache = function() {
            return bKeepDataInBlobCache;
        };
        function MakeRange(pos, count) {
            return {
                pos: pos,
                count: count
            };
        }
        this.GetCachedRecord = function(key) {
            if (key in blobCache && !(key in recordCache)) {
                this.AddRecordsToCache(fnConvertDataToRecords(blobCache[key], [key]));
            }
            return recordCache[key];
        };
        this.GetRecordsByKey = function(keys, fnCallback) {
            var ranges = ConvertKeysToPosRanges();

            if (ranges == null) {
                return false;
            }
            CallGetRecords(ranges);
            return true;
            function ConvertKeysToPosRanges() {
                var ranges = new Array(keys.length);

                for (var i = 0; i < keys.length; i++) {
                    var pos = view.GetPosFromKey(keys[i]);

                    if (pos == null) {
                        return null;
                    }
                    ranges[i] = {
                        pos: pos,
                        count: 1
                    };
                }
                return ranges;
            }
            function CallGetRecords(ranges) {
                var result = _this.GetRecords(ranges, CallbackPostProcess);

                if (result.recordSetComplete) {
                    var records = SP.Internal.JS.Flatten2LevelArray(result.records);

                    setTimeout(function() {
                        fnCallback(keys, records, true);
                    }, 0);
                }
            }
            function CallbackPostProcess(ranges, bSucceeded) {
                var ranges = ConvertKeysToPosRanges();

                if (bSucceeded && ranges != null) {
                    CallGetRecords(ranges);
                }
                else {
                    fnCallback(keys, null, false);
                }
            }
        };
        this.GetRecords = function(ranges, fnCallback) {
            var returnedRecords = [];
            var toRequest = [];
            var toConvert = [];

            for (var i in ranges) {
                returnedRecords[i] = GetAvailability(ranges[i], toConvert, toRequest);
            }
            LoadBlobs(toConvert);
            if (toRequest.length > 0) {
                var requestRanges;
                var remainingRangeCount;
                var bAllSucceeded = true;
                var ProcessRange_Binder;

                ProcessRange_Binder = function(bSucceeded) {
                    bAllSucceeded = bAllSucceeded && bSucceeded;
                    remainingRangeCount--;
                    if (remainingRangeCount == 0) {
                        if (fnCallback != null) {
                            setTimeout(function() {
                                fnCallback(ranges, bAllSucceeded);
                            }, 0);
                        }
                    }
                };
                if (typeof fnComputeDataRangeRequest == "function") {
                    var rangeInfo = fnComputeDataRangeRequest(ProcessRange_Binder);

                    outstandingRequestRanges.AppendRangeObject(rangeInfo.totalRanges[0]);
                }
                else {
                    var rangeInfo = FindAndRegisterRanges(toRequest, ProcessRange_Binder);
                }
                remainingRangeCount = rangeInfo.rangesToFillRequest;
                var rangesToRequest = rangeInfo.totalRanges;

                if (rangesToRequest.length > 0) {
                    var requestGeneration = curRequestGeneration;

                    fnRequestData(rangesToRequest, function(results) {
                        RequestResultDispatch(rangesToRequest, results, requestGeneration);
                    });
                }
            }
            return {
                recordSetComplete: toRequest.length == 0,
                records: returnedRecords
            };
        };
        this.AddRecordsToCache = function(records) {
            for (var key in records) {
                var record = records[key];

                recordCache[key] = record;
                if (sizeMgr != null)
                    sizeMgr.AddRecord(key);
                recordCacheSize++;
                if (this.fnApplyUpdatesToNewRecord != null) {
                    this.fnApplyUpdatesToNewRecord(record);
                }
                if ((optMaxRecordCount == null || !bKeepDataInBlobCache) && key in blobCache) {
                    delete blobCache[key];
                    if (key in columnCache) {
                        for (var fieldKey in columnCache[key]) {
                            Sys.Debug.assert(false);
                        }
                        delete columnCache[key];
                    }
                }
            }
        };
        this.AddColumn = function(fieldKey, data, defaultValueFn) {
            IncrementRequestGeneration();
            for (var key in recordCache) {
                if (data[key] != null) {
                    recordCache[key].AddFieldValue(fieldKey, data[key]);
                }
                else if (defaultValueFn != null) {
                    recordCache[key].AddFieldValue(fieldKey, defaultValueFn());
                }
            }
            for (var key in blobCache) {
                if (data[key] != null) {
                    if (columnCache[key] == null) {
                        columnCache[key] = {};
                    }
                    columnCache[key][fieldKey] = data[key];
                }
            }
        };
        this.RemoveColumn = function(fieldKey) {
            IncrementRequestGeneration();
            for (var key in recordCache) {
                recordCache[key].RemoveFieldValue(fieldKey);
            }
            for (var key in columnCache) {
                delete columnCache[key][fieldKey];
                if (SP.Internal.JS.IsAssocArrayEmpty(columnCache[key])) {
                    delete columnCache[key];
                }
            }
        };
        this.ClearRecords = function(keys) {
            for (var i = 0; i < keys.length; i++) {
                delete recordCache[keys[i]];
                delete blobCache[keys[i]];
            }
        };
        this.SetView = function(keyArray, optVirtRecordCount) {
            ClearOutstandingRequestRanges();
            view.SetViewMap(keyArray, optVirtRecordCount);
        };
        this.GetView = function() {
            return view.GetKeys(0, view.GetRecordCount());
        };
        this.RecordIdxToKey = function(pos) {
            return view.GetKeyFromPos(pos);
        };
        this.KeyToRecordIdx = function(key) {
            return view.GetPosFromKey(key);
        };
        this.UpdateProperty = function(record, fieldKey, prop) {
            record.SetProp(fieldKey, prop);
        };
        this.SeedInsertedRecord = function(record) {
            if (!(record.key() in recordCache)) {
                recordCache[record.key()] = record;
                recordCacheSize++;
            }
        };
        this.InsertRecord = function(pos, recordKey) {
            ClearOutstandingRequestRanges();
            view.InsertRecord(pos, recordKey);
        };
        this.DeleteRecord = function(pos) {
            ClearOutstandingRequestRanges();
            view.DeleteRecord(pos);
        };
        this.GetRecordCount = function() {
            return view.GetRecordCount();
        };
        this.IsKeyInView = function(key) {
            return view.IsKeyPresent(key);
        };
        this.BulkMoveRecords = function(startPos, endPos, newPos) {
            ClearOutstandingRequestRanges();
            if (newPos == null) {
                newPos = view.GetRecordCount();
            }
            view.BulkMoveRecords(startPos, endPos, newPos);
        };
        this.AddRawDataToCache = function(keys, blob, viewInfo) {
            var bAddedAny = false;

            for (var idx in keys) {
                if (!(keys[idx] in recordCache)) {
                    blobCache[keys[idx]] = blob;
                    bAddedAny = true;
                }
            }
            if (bConvertAllBlobsToRecords && bAddedAny) {
                blobKeys.push(keys);
                if (viewInfo != null)
                    ConvertBlobsToRecords();
                else
                    convertBlobTaskId = SP.JsGrid.AsynchronousTaskManager.RegisterTask(ConvertBlobsToRecords);
            }
        };
        this.AddRawViewToCache = function(keys, blob, viewInfo) {
            this.AddRawDataToCache(keys, blob, viewInfo);
            view.SpliceView(viewInfo);
        };
        this.Clear = function() {
            InitCache();
        };
        var blobConvertIdx = 0;

        function ConvertBlobsToRecords() {
            if (blobKeys.length > 0) {
                var keys = [];

                for (; blobConvertIdx < blobKeys[0].length && keys.length < backgroundConversionSize; blobConvertIdx++) {
                    if (blobKeys[0][blobConvertIdx] in blobCache) {
                        keys.push(blobKeys[0][blobConvertIdx]);
                    }
                }
                if (blobConvertIdx == blobKeys[0].length) {
                    blobConvertIdx = 0;
                    blobKeys.shift();
                }
                if (keys.length > 0) {
                    _this.AddRecordsToCache(fnConvertDataToRecords(blobCache[keys[0]], keys));
                }
            }
            return blobKeys.length > 0;
        }
        function IncrementRequestGeneration() {
            ClearOutstandingRequestRanges();
            curRequestGeneration++;
        }
        function ClearOutstandingRequestRanges() {
            if (outstandingRequestRanges != null) {
                var cbs = outstandingRequestRanges.GetAllCallbacks();

                for (var i = 0; i < cbs.length; i++) {
                    cbs[i](false);
                }
            }
            outstandingRequestRanges = new RangeCollection();
        }
        function InitCache() {
            recordCache = {};
            blobCache = {};
            columnCache = {};
            IncrementRequestGeneration();
            view = new TableView();
            TryInitSizeMgr(true);
        }
        function TryInitSizeMgr(bForceCreate) {
            if (sizeMgr != null && optMaxRecordCount != null && !bForceCreate) {
                sizeMgr.SetMaxSize(optMaxRecordCount);
            }
            else {
                sizeMgr = optMaxRecordCount != null ? new TableSizeManager(20, optMaxRecordCount) : null;
            }
        }
        function GetAvailability(range, toConvert, toRequest) {
            var pos = range.pos;
            var count = range.count;
            var keys = view.GetKeys(pos, count);
            var returnedRecords = new Array(count);

            Sys.Debug.assert(pos >= 0 && pos + count <= view.GetRecordCount());
            for (var i = 0; i < count; i++) {
                var key = keys[i];
                var rec = recordCache[key];

                if (sizeMgr != null)
                    sizeMgr.TouchRecord(key);
                if (rec != null) {
                    returnedRecords[i] = rec;
                }
                else {
                    returnedRecords[i] = null;
                    var blob = blobCache[key];

                    if (blob != null) {
                        toConvert.push({
                            key: key,
                            blob: blob,
                            destArray: returnedRecords,
                            destIdx: i
                        });
                    }
                    else {
                        toRequest.push({
                            pos: pos + i,
                            key: key
                        });
                    }
                }
            }
            return returnedRecords;
        }
        function LoadBlobs(toConvert) {
            var blobItems = [], curItem;

            for (var idx in toConvert) {
                curItem = toConvert[idx];
                var blobItem = SP.Internal.JS.Find(blobItems, function(bI) {
                    return bI.blob == curItem.blob;
                });

                if (blobItem == null) {
                    blobItem = {
                        blob: curItem.blob,
                        keys: []
                    };
                    blobItems.push(blobItem);
                }
                blobItem.keys.push(curItem.key);
            }
            for (var idx in blobItems) {
                _this.AddRecordsToCache(fnConvertDataToRecords(blobItems[idx].blob, blobItems[idx].keys));
            }
            for (var idx in toConvert) {
                curItem = toConvert[idx];
                curItem.destArray[curItem.destIdx] = recordCache[curItem.key];
            }
        }
        function RequestResultDispatch(ranges, results, requestGeneration) {
            if (requestGeneration == curRequestGeneration) {
                if (results != null) {
                    for (var i = 0; i < results.length; i++) {
                        _this.AddRawDataToCache(results[i].keys, results[i].data);
                    }
                }
                for (var i = 0; i < ranges.length; i++) {
                    var range = outstandingRequestRanges.FindRangeObject(ranges[i].pos);

                    if (range != null) {
                        for (var j in range.callbacks) {
                            range.callbacks[j](results != null);
                        }
                        outstandingRequestRanges.RemoveRangeObject(range);
                    }
                }
            }
        }
        function FindAndRegisterRanges(toRequest, fnProcessor) {
            var rangesToFillRequest = 0, totalRanges = [];
            var curRange = null, curPos;

            for (var idx = 0; idx < toRequest.length; idx++) {
                curPos = toRequest[idx].pos;
                curRange = outstandingRequestRanges.FindRangeObject(curPos);
                if (curRange == null) {
                    var curRanges = CreateRanges(curPos, 0.75);

                    for (var idx in curRanges) {
                        outstandingRequestRanges.AppendRangeObject(curRanges[idx]);
                    }
                    totalRanges = totalRanges.concat(curRanges);
                }
            }
            curRange = null;
            for (var idx = 0; idx < toRequest.length; idx++) {
                curPos = toRequest[idx].pos;
                if (curRange == null || !outstandingRequestRanges.IsPosInRange(curPos, curRange)) {
                    curRange = outstandingRequestRanges.FindRangeObject(curPos);
                    rangesToFillRequest++;
                    if (curRange.callbacks == null) {
                        curRange.callbacks = [fnProcessor];
                    }
                    else {
                        curRange.callbacks.push(fnProcessor);
                    }
                }
            }
            return {
                rangesToFillRequest: rangesToFillRequest,
                totalRanges: totalRanges
            };
        }
        function TableSizeManager(genSize, maxSize) {
            Sys.Debug.assert(genSize <= maxSize / 5);
            var curInsertIdx;
            var recordList = [];
            var recordGenerationMap = {};
            var generationOrder = [];
            var generationCountMap = {};
            var limit = 0;
            var numberOfRecordsToProcessPerTimeout = 10;
            var pageCount = 0;
            var deleteQuota;

            this.ChangeKeys = function(oldKey, newKey) {
                if (oldKey in recordGenerationMap) {
                    recordGenerationMap[newKey] = recordGenerationMap[oldKey];
                    delete recordGenerationMap[oldKey];
                }
            };
            function DeleteQuota(fnRemoveRecordFromGen) {
                var toDeleteCount = 0;
                var processKey;
                var gensToDelete;
                var nScheduledForDeletion = 0;
                var curPos = 0;

                this.AddToDeleteCount = function(n) {
                    if (!SP.JsGrid.AsynchronousTaskManager.TaskRegistered(processKey)) {
                        processKey = SP.JsGrid.AsynchronousTaskManager.RegisterTask(DeleteRecords);
                    }
                    toDeleteCount = ComputeGensToDelete(nScheduledForDeletion + n);
                };
                this.TotalRemaingToDelete = function() {
                    return nScheduledForDeletion;
                };
                function ComputeGensToDelete(numRecordsToDelete) {
                    gensToDelete = {};
                    nScheduledForDeletion = 0;
                    for (var i = 0; i < generationOrder.length - 3 && nScheduledForDeletion < numRecordsToDelete; i++) {
                        nScheduledForDeletion += generationCountMap[generationOrder[i]];
                        gensToDelete[generationOrder[i]] = null;
                    }
                }
                function DeleteRecords() {
                    for (var i = 0; i < numberOfRecordsToProcessPerTimeout; i++) {
                        if (recordGenerationMap[recordList[curPos]] in gensToDelete) {
                            var key = recordList[curPos];
                            var gen = recordGenerationMap[key];

                            delete recordCache[key];
                            if (generationCountMap[gen] == 1) {
                                delete gensToDelete[gen];
                            }
                            fnRemoveRecordFromGen(key);
                            delete recordGenerationMap[key];
                            recordList.splice(curPos, 1);
                            nScheduledForDeletion--;
                        }
                        else {
                            curPos = (curPos + 1) % (recordList.length - 1);
                        }
                    }
                    return nScheduledForDeletion != 0;
                }
            }
            function Init() {
                function SeedGeneration(pos) {
                    var k = GenerateGenerationName();

                    generationOrder.push(k);
                    generationCountMap[k] = 0;
                }
                deleteQuota = new DeleteQuota(RemoveFromGeneration);
                SeedGeneration();
                SeedGeneration();
                curInsertIdx = 0;
            }
            function GenerateGenerationName() {
                return pageCount++;
            }
            function IncrementRecordCount(key) {
                var pendingDeleteCount = deleteQuota.TotalRemaingToDelete();
                var numberToDelete = recordList.length - maxSize - pendingDeleteCount;

                if (numberToDelete > 0) {
                    deleteQuota.AddToDeleteCount(numberToDelete + genSize);
                }
                recordList.push(key);
            }
            this.AddRecord = function(key) {
                if (recordGenerationMap[key] == null) {
                    curInsertIdx = AddToGeneration(key, curInsertIdx, Math.ceil((generationOrder.length - 1) / 2));
                    IncrementRecordCount(key);
                }
            };
            this.SetMaxSize = function(mSize) {
                maxSize = mSize;
            };
            this.TouchRecord = function(key) {
                if (recordGenerationMap[key] != generationOrder[generationOrder.length - 1]) {
                    if (recordGenerationMap[key] != null) {
                        RemoveFromGeneration(key);
                    }
                    else {
                        IncrementRecordCount(key);
                    }
                    AddToGeneration(key, generationOrder.length - 1);
                }
            };
            function AddToGeneration(key, genIdx, optInsIdx) {
                if (generationCountMap[generationOrder[genIdx]] == genSize) {
                    var genKey = GenerateGenerationName();

                    genIdx = optInsIdx != null ? optInsIdx : genIdx + 1;
                    generationOrder.splice(genIdx, 0, genKey);
                    generationCountMap[genKey] = 0;
                }
                generationCountMap[generationOrder[genIdx]]++;
                recordGenerationMap[key] = generationOrder[genIdx];
                return genIdx;
            }
            function RemoveFromGeneration(key) {
                var genKey = recordGenerationMap[key];
                var genCount = generationCountMap[genKey];

                if (genCount == 1) {
                    for (var i = 0; i < generationOrder.length; i++) {
                        if (generationOrder[i] == genKey) {
                            break;
                        }
                    }
                    Sys.Debug.assert(i != generationOrder.length);
                    delete generationCountMap[genKey];
                    generationOrder.splice(i, 1);
                    recordGenerationMap[key] = -1;
                }
                else {
                    generationCountMap[genKey]--;
                }
            }
            Init();
        }
        function TableView() {
            var tempKeyIdx = 0;
            var TempKey = function() {
            };

            TempKey.prototype = {
                bIsFakeKey: 1,
                toString: function() {
                    if (this.tempKey == null) {
                        this.tempKey = 'TempKey' + tempKeyIdx++;
                    }
                    return this.tempKey;
                }
            };
            var virtRecordCount;
            var posKeyMap;
            var keyPosMap;
            var _this = this;

            this.SetViewMap = function(newViewMap, virtualCount) {
                keyPosMap = null;
                if (virtualCount != null) {
                    Sys.Debug.assert(newViewMap.length <= virtualCount);
                    posKeyMap = new Array(virtualCount);
                    for (var i = 0; i < newViewMap.length; i++)
                        posKeyMap[i] = newViewMap[i];
                    for (var i = newViewMap.length; i < virtualCount; i++)
                        posKeyMap[i] = new TempKey();
                }
                else {
                    posKeyMap = newViewMap;
                }
            };
            this.ChangeKeys = function(oldKey, newKey) {
                if (keyPosMap == null) {
                    InitKeyPosMap();
                }
                if (oldKey in keyPosMap) {
                    keyPosMap[newKey] = keyPosMap[oldKey];
                    delete keyPosMap[oldKey];
                    posKeyMap[keyPosMap[newKey]] = newKey;
                }
            };
            this.GetKeys = function(start, count) {
                var r = new Array(count);

                for (var i = 0; i < count; i++) {
                    r[i] = this.GetKeyFromPos(start + i);
                }
                return r;
            };
            this.InsertRecord = function(pos, key) {
                posKeyMap.splice(pos, 0, key);
                keyPosMap = null;
            };
            this.DeleteRecord = function(pos) {
                posKeyMap.splice(pos, 1);
                keyPosMap = null;
            };
            this.BulkMoveRecords = function(startPos, endPos, newPos) {
                var count = endPos - startPos + 1;
                var keys = posKeyMap.splice(startPos, count);

                newPos = newPos < startPos ? newPos : newPos - count;
                Array.prototype.splice.apply(posKeyMap, [newPos, 0].concat(keys));
                keyPosMap = null;
            };
            this.SpliceView = function(viewInfo) {
                for (var idx in viewInfo) {
                    this.InsertRecord(idx + this.GetRecordCount(), viewInfo[idx]);
                }
            };
            this.GetRecordCount = function() {
                return posKeyMap != null ? posKeyMap.length : 0;
            };
            this.IsKeyPresent = function(key) {
                if (keyPosMap == null) {
                    InitKeyPosMap();
                }
                return key in keyPosMap;
            };
            this.GetKeyFromPos = function(pos) {
                return posKeyMap[pos];
            };
            this.GetPosFromKey = function(key) {
                if (keyPosMap == null) {
                    InitKeyPosMap();
                }
                if (key in keyPosMap) {
                    return keyPosMap[key];
                }
                return null;
            };
            function InitKeyPosMap() {
                keyPosMap = {};
                for (var i = posKeyMap.length - 1; i >= 0; i--) {
                    keyPosMap[posKeyMap[i]] = i;
                }
            }
        }
        function CreateRanges(pos, percentDown) {
            var maxScan = 500;
            var maxScanUp = maxScan * 0.5;
            var maxScanDown = maxScan * 0.5;
            var upPos = pos - 1, downPos = pos;
            var posToRequest = [];
            var maxToAdd = dataPageSize * (1 - percentDown);
            var shouldContinueUp = true, shouldContinueDown = true, result;
            var scannedAny = true;

            while (scannedAny && posToRequest.length < dataPageSize) {
                scannedAny = false;
                if (shouldContinueUp && maxScanUp > 0) {
                    result = FindMissingRecords(upPos, maxToAdd, maxScanUp, -1);
                    maxScanUp -= result.scanned;
                    upPos -= result.scanned + 1;
                    shouldContinueUp = result.shouldContinue;
                    posToRequest = posToRequest.concat(result.positions);
                    maxToAdd = dataPageSize - posToRequest.length;
                    scannedAny = true;
                }
                if (shouldContinueDown && maxScanDown > 0) {
                    result = FindMissingRecords(downPos, maxToAdd, maxScanDown, 1);
                    maxScanDown -= result.scanned;
                    downPos += result.scanned + 1;
                    shouldContinueDown = result.shouldContinue;
                    posToRequest = posToRequest.concat(result.positions);
                    maxToAdd = dataPageSize - posToRequest.length;
                    scannedAny = true;
                }
            }
            return MakeRangesFromList(posToRequest);
        }
        function MakeRangesFromList(list) {
            var r = [];

            list.sort(function(a, b) {
                return a - b;
            });
            var len = list.length, lastPosToRequest = Number.NEGATIVE_INFINITY;
            var curRange = null;

            for (var i = 0; i < len; i++) {
                if (list[i] != lastPosToRequest + 1) {
                    curRange = MakeRange(list[i], 1);
                    r.push(curRange);
                }
                else {
                    curRange.count++;
                }
                lastPosToRequest = list[i];
            }
            return r;
        }
        function FindMissingRecords(startPos, maxToAdd, maxScan, increment) {
            var r = {
                positions: [],
                shouldContinue: true,
                scanned: 0
            };
            var pos, bShouldAdd = false, recCount = view.GetRecordCount();

            for (var i = 0; i < maxScan; i++) {
                pos = startPos + i * increment;
                if (pos < 0 || pos > recCount) {
                    r.shouldContinue = false;
                    break;
                }
                var key = view.GetKeyFromPos(pos);

                if (!(key in recordCache || key in blobCache || outstandingRequestRanges.FindRangeObject(pos) != null)) {
                    r.positions.push(pos);
                    maxToAdd--;
                    if (maxToAdd <= 0) {
                        break;
                    }
                }
            }
            r.scanned = i;
            return r;
        }
        function RangeCollection() {
            var ranges = [];

            this.FindRangeObject = function(pos) {
                var r = null;
                var idx = FindRangeIdx(pos);

                if (idx < ranges.length && this.IsPosInRange(pos, ranges[idx])) {
                    r = ranges[idx];
                }
                return r;
            };
            this.AppendRangeObject = function(range) {
                var idx = FindRangeIdx(range.pos);

                ranges.splice(idx, 0, range);
            };
            this.RemoveRangeObject = function(range) {
                var idx = FindRangeIdx(range.pos);

                Sys.Debug.assert(GetRangePosInfo(range.pos, ranges[idx]) == 0);
                ranges.splice(idx, 1);
            };
            this.IsPosInRange = function(pos, range) {
                return GetRangePosInfo(pos, range) == 0;
            };
            this.IsEmpty = function() {
                return ranges.length == 0;
            };
            this.GetAllCallbacks = function() {
                var r = [];

                for (var i = 0; i < ranges.length; i++) {
                    if (ranges.callbacks != null) {
                        r = r.concat(ranges.callbacks);
                    }
                }
                return r;
            };
            function FindRangeIdx(pos) {
                return SP.Internal.JS.LowerBoundCompare(ranges, pos, function(idx, val) {
                    return GetRangePosInfo(val, ranges[idx]);
                });
            }
            function GetRangePosInfo(pos, range) {
                return pos < range.pos ? 1 : range.pos + range.count <= pos ? -1 : 0;
            }
        }
    };
    SP.JsGrid.Internal.TableManager = function(parentDiv, baseId, paneSize, fnGetLocStr, objBag, fnInsertedRow, fnInsertedColumns, fnRemovedColumns, fnRemovedHeaderCell, fnSetHeaderHeight, fnPopulateCell, fnRetryErrorRows, fnTryDisposeRow) {
        var leftmostColIdx = 0;
        var posConverter;
        var columns = [];
        var rowRecords = [];
        var headerHeight, rowHeight;
        var tableColIdxOfFirstDataCol;
        var bRowHeadersEnabled;
        var tableElem;
        var tableColCount = 0;
        var loadingRects = [];
        var errorDivs = {};
        var rowHeaderDivs = {};
        var paneConverter = new SP.JsGrid.Internal.GridPaneConverter(objBag);
        var ariaMgr = objBag.ariaMgr;
        var tableMgr = this;
        var tdCoordsHorizontalAdjustment = null;
        var styleForTd;
        var rowCoordCache = [];
        var colCoordCache = [];
        var renderCtx = objBag.jsGridObj.GetSpCsrRenderCtx();
        var cellErrorJobKey = SP.JsGrid.AsynchronousCellUpdater.RegisterJob(AddOrUpdateCellError);

        this.CellType = {
            SelectAllSquare: 0,
            RowHeader: 1,
            ColumnHeader: 2,
            Cell: 3
        };
        this.GetGridPaneConverter = function() {
            return paneConverter;
        };
        this.Dispose = function() {
            DisposeLoadingRects();
            tableElem = (parentDiv = null);
        };
        this.SetPosConverterObj = function(posConverterObj) {
            posConverter = posConverterObj;
            paneConverter.SetPosConverterObj(posConverterObj);
        };
        this.GetHeaderHeight = function() {
            Sys.Debug.assert(tableElem.rows.length != 0);
            return tableElem.rows[0].offsetHeight;
        };
        this.SetHeaderHeight = function(newHeight) {
            headerHeight = newHeight;
            if (tableElem.rows.length > 0) {
                tableElem.rows[0].style.height = headerHeight - 1 + 'px';
                fnSetHeaderHeight(headerHeight);
            }
        };
        this.SetRowHeight = function(newHeight) {
            rowHeight = SP.Internal.DomElement.BrowserIsIEAndRenderingModeIs7 ? newHeight - 1 : newHeight;
        };
        this.GetTdDefaultCssText = function() {
            return styleForTd;
        };
        this.InitTable = function(_bRowHeadersEnabled) {
            this.ClearTable();
            tableColCount = 0;
            bRowHeadersEnabled = _bRowHeadersEnabled;
            tableColIdxOfFirstDataCol = bRowHeadersEnabled ? 1 : 0;
            var tr = tableElem.insertRow(-1);

            tr.recordKey = '__colheaders';
            ariaMgr.OnInsertTableRow(tr, null, -1);
            var selAllSquare;

            if (bRowHeadersEnabled) {
                var th = document.createElement('th');

                if (objBag.spGrid) {
                    th.className = "ms-headerCellStyleIcon ms-vh-icon ms-vh-selectAllIcon";
                    th.scope = "col";
                    th.nowrap = "nowrap";
                    th.style.borderBottom = "1px solid " + objBag.styleMgr.gridPaneStyle.horizontalBorderColor;
                    th.innerHTML = (RenderSelectAllCbx(objBag.jsGridObj.GetSpCsrRenderCtx())).join('');
                }
                else {
                    var emptyDiv = document.createElement('div');

                    th.style.width = (emptyDiv.style.width = SP.JsGrid.Internal.RowHeaderWidth - 1 + 'px');
                    th.style.padding = '0px';
                    th.appendChild(emptyDiv);
                }
                tableElem.rows[0].appendChild(th);
                tableColCount++;
                selAllSquare = new CellInfo(0, 0);
                ariaMgr.OnInsertRowHeaderCell(th);
            }
            if (objBag.spGrid) {
                tr.className = "ms-viewheadertr ms-vhltr";
                tr.vAlign = "top";
            }
            else {
                this.SetHeaderHeight(headerHeight);
            }
            return selAllSquare;
        };
        this.SetColumns = function(newColumnObjs, bNewView) {
            if (columns.length) {
                RemoveTableColumns(tableColIdxOfFirstDataCol, GetDataColCount());
                leftmostColIdx = 0;
            }
            columns = newColumnObjs;
            if (bNewView) {
                paneConverter.SetView(columns);
            }
            else {
                paneConverter.NotifyColumnsChanged(columns);
            }
            this.OptimizeTableColumns();
        };
        this.ClearTable = function() {
            if (rowRecords.length > 0) {
                this.SpliceRows(0, rowRecords.length, null, 0, null);
            }
            RemoveTableColumns(tableColIdxOfFirstDataCol, GetDataColCount());
            leftmostColIdx = 0;
            while (tableElem.rows.length > 0) {
                tableElem.deleteRow(0);
            }
            Sys.Debug.assert(tableElem.rows.length == 0);
        };
        this.SpliceRows = function _SpliceRows(delRelRowIdx, delCount, insRelRowIdx, insRecords) {
            var insCount = insRecords.length;
            var bTableDetached = insCount > 1;

            if (bTableDetached) {
                parentDiv.removeChild(tableElem);
            }
            if (delRelRowIdx != null && delCount != 0) {
                rowRecords.splice(delRelRowIdx, delCount);
                for (var i = delCount - 1; i >= 0; i--) {
                    DeleteTableRow(delRelRowIdx + i);
                }
            }
            if (insRelRowIdx != null && insCount != 0) {
                Array.prototype.splice.apply(rowRecords, [insRelRowIdx, 0].concat(insRecords));
                for (var i = 0; i < insCount; i++) {
                    InsertTableRow(insRelRowIdx + i, rowRecords[insRelRowIdx + i], bTableDetached);
                }
            }
            if (bTableDetached) {
                parentDiv.appendChild(tableElem);
            }
            RefreshLoadingRects();
        };
        this.RenderRows = function(toRender) {
            for (var relRowIdx in toRender) {
                var record = toRender[relRowIdx];

                relRowIdx = +relRowIdx;
                DeleteTableRow(relRowIdx);
                rowRecords[relRowIdx] = record;
                InsertTableRow(relRowIdx, record);
            }
            if (!SP.Internal.JS.IsAssocArrayEmpty(toRender)) {
                rowRecords = [].concat(rowRecords);
            }
            RefreshLoadingRects();
        };
        this.InsertColumns = function(colIdx, insColumns) {
            var tableColIdx = ColIdxToTableColIdx(colIdx);

            Array.prototype.splice.apply(columns, [colIdx, 0].concat(insColumns));
            paneConverter.NotifyColumnsChanged(columns);
            if (tableColIdx >= tableColIdxOfFirstDataCol && tableColIdx <= tableColCount) {
                InsertTableColumns(tableColIdx, insColumns.length);
            }
            for (var i = 0; i < insColumns.length; i++) {
                var gridField = insColumns[i];

                for (var idx = 0; idx < rowRecords.length; idx++) {
                    if (rowRecords[idx].properties[gridField.columnKey] == null) {
                        var record = objBag.tableCache.GetCachedRecord(idx);

                        if (record != null) {
                            var prop = record.GetProp(gridField.columnKey);

                            if (prop != null)
                                rowRecords[idx].properties[gridField.columnKey] = SP.JsGrid.Property.MakeProperty(undefined, undefined, prop.HasDataValue(), prop.HasLocalizedValue(), prop.propType);
                        }
                    }
                }
            }
            this.OptimizeTableColumns();
        };
        this.RefreshCell = function(cellInfo) {
            var rk = cellInfo.GetRecordKey();
            var fk = cellInfo.GetFieldKey();

            ClearCellError(rk, fk);
            var td = cellInfo.GetTd();

            td.innerHTML = '';
            fnPopulateCell(cellInfo);
            this.UpdateCoordCache();
            if (objBag.errorMgr.CellHasError(rk, fk)) {
                AddOrUpdateCellError(rk, fk);
            }
        };
        this.RemoveColumns = function(colIdx, count) {
            var tableColIdx = ColIdxToTableColIdx(colIdx);

            if (tableColIdx >= tableColIdxOfFirstDataCol && tableColIdx < tableColCount) {
                var dispCount = count;

                if (tableColIdx + count > tableColCount) {
                    dispCount -= tableColIdx + count - tableColCount;
                }
                RemoveTableColumns(tableColIdx, dispCount);
            }
            columns.splice(colIdx, count);
            paneConverter.NotifyColumnsChanged(columns);
            this.OptimizeTableColumns();
        };
        this.ScrollColumns = function(newBeginColIdx) {
            var newColCount = CalcOptimalDataColumnCount(newBeginColIdx);
            var oldColCount = GetDataColCount();
            var oldBeginColIdx = leftmostColIdx;

            this.UpdateCoordCache();
            if (newBeginColIdx > oldBeginColIdx) {
                RemoveTableColumns(tableColIdxOfFirstDataCol, Math.min(oldColCount, newBeginColIdx - oldBeginColIdx));
                leftmostColIdx = newBeginColIdx;
            }
            else if (newBeginColIdx < oldBeginColIdx) {
                leftmostColIdx = newBeginColIdx;
                InsertTableColumns(tableColIdxOfFirstDataCol, Math.min(newColCount, oldBeginColIdx - newBeginColIdx));
            }
            this.OptimizeTableColumns();
        };
        this.ChangeKeys = function(oldKey, newKey) {
            if (paneConverter.IsRecordOnScreen(oldKey)) {
                for (var i = tableElem.rows.length - 1; i >= 0; i--) {
                    if (tableElem.rows[i].recordKey == oldKey) {
                        tableElem.rows[i].recordKey = newKey;
                        break;
                    }
                }
            }
            if (oldKey in errorDivs) {
                errorDivs[newKey] = errorDivs[oldKey];
                delete errorDivs[oldKey];
            }
            if (oldKey in rowHeaderDivs) {
                rowHeaderDivs[newKey] = rowHeaderDivs[oldKey];
                delete rowHeaderDivs[oldKey];
            }
        };
        this.OptimizeTableColumns = function() {
            var optColCount = CalcOptimalDataColumnCount(leftmostColIdx);
            var curColCount = GetDataColCount();
            var diff = curColCount - optColCount;

            if (diff < 0) {
                InsertTableColumns(tableColCount, -diff);
            }
            else if (diff > 0) {
                RemoveTableColumns(tableColCount - diff, diff);
            }
            RefreshLoadingRects();
        };
        this.UpdateErrorFrames = function() {
            for (var recordKey in errorDivs) {
                for (var fieldKey in errorDivs[recordKey]) {
                    AddOrUpdateCellError(recordKey, fieldKey, true);
                }
            }
        };
        this.GetAllDataCells = function() {
            var r = [];

            for (var i = 1; i < tableElem.rows.length; i++) {
                for (var j = tableColIdxOfFirstDataCol; j < tableColCount; j++) {
                    r.push(new CellInfo(i, j));
                }
            }
            return r;
        };
        this.GetSelectAllSquare = function() {
            return bRowHeadersEnabled ? new CellInfo(0, 0) : null;
        };
        this.GetRowHeaderByKey = function(recordKey) {
            var r;

            if (bRowHeadersEnabled && paneConverter.IsRecordOnScreen(recordKey)) {
                r = new CellInfo(RowIdxToTableRowIdx(paneConverter.GetTopRowIdxForKey(recordKey)), 0);
            }
            return r;
        };
        this.GetRowHeader = function(rowIdx) {
            if (bRowHeadersEnabled) {
                var ci = new CellInfo(RowIdxToTableRowIdx(rowIdx), 0, true, false);

                return ci.bIsInvalid ? null : ci;
            }
            return null;
        };
        this.GetRowHeaders = function() {
            var r = [];

            if (bRowHeadersEnabled) {
                var len = tableElem.rows.length;

                for (var i = 1; i < len; i++) {
                    r.push(new CellInfo(i, 0));
                }
            }
            return r;
        };
        this.GetColumnHeader = function(colIdx) {
            var r = new CellInfo(0, ColIdxToTableColIdx(colIdx), true, false);

            return r.bIsInvalid || r.GetColIdx() == null ? null : r;
        };
        this.GetColumnHeaders = function() {
            var r = [];

            for (var i = tableColIdxOfFirstDataCol; i < tableColCount; i++) {
                r.push(new CellInfo(0, i));
            }
            return r;
        };
        this.GetColumnHeaderTr = function() {
            return tableElem.rows[0];
        };
        this.GetRowHeaderWidth = function() {
            return bRowHeadersEnabled ? SP.JsGrid.Internal.RowHeaderWidth : 0;
        };
        this.GetRowIdxColIdxFromCoord = function(eventInfo) {
            var point = SP.Internal.DomElement.GetEventLocation(eventInfo);
            var tableRowIdx, tableColIdx;
            var r = {};
            var rows = tableElem.rows;

            for (var i = 1; i < rows.length; i++) {
                var tr = rows[i];
                var loc = SP.Internal.DomElement.GetLocation(tr);

                if (point.y >= loc.y && point.y < loc.y + tr.offsetHeight) {
                    r.rowIdx = TableRowIdxToRowIdx(i);
                    r.top = loc.y;
                    r.bottom = loc.y + tr.offsetHeight;
                    break;
                }
            }
            var cells = tableElem.rows[0].cells;

            for (var i = bRowHeadersEnabled ? 1 : 0; i < cells.length; i++) {
                var td = cells[i];
                var loc = SP.Internal.DomElement.GetLocation(td);

                if (point.x >= loc.x && point.x < loc.x + td.offsetWidth) {
                    r.colIdx = TableColIdxToColIdx(i);
                    r.left = loc.x;
                    r.right = loc.x + td.offsetWidth;
                    break;
                }
            }
            return r;
        };
        this.UpdateCoordCache = function() {
            objBag.bUpdateCoordCache = true;
        };
        this.ResizeColCoordCache = function(colIndex, newWidth) {
            var curDelta;
            var totalDelta = 0;
            var col = colCoordCache[colIndex];
            var topRow = tableElem.rows[0];

            if (col == null) {
                ClearColCoordCache(colIndex);
                return;
            }
            newWidth += 1;
            totalDelta = newWidth - col.width;
            if (totalDelta == 0) {
                return;
            }
            col.width = newWidth;
            if (!objBag.RTL.bEnabled) {
                col.right += totalDelta;
            }
            else {
                col.left += totalDelta;
            }
            for (var i = colIndex + 1; i < colCoordCache.length; i++) {
                col = colCoordCache[i];
                if (col == null) {
                    continue;
                }
                col.left += totalDelta;
                col.right += totalDelta;
            }
        };
        this.GetTdCoords = function(td) {
            var r = {};
            var colIndex = td.cellIndex;
            var rowIndex = td.parentNode.rowIndex;

            UpdateCoordCacheInternal();
            if (window.disableGetTdCoordsCache != true && rowCoordCache[rowIndex] != null) {
                CopyRowCoords(rowIndex, r);
            }
            else {
                r.top = tableElem.offsetTop + td.offsetTop - 1;
                r.bottom = tableElem.offsetTop + td.offsetTop + td.offsetHeight;
                r.height = r.bottom - r.top;
                InsertIntoCoordCacheArray(rowCoordCache, rowIndex, CloneRowCoords(r));
            }
            if (window.disableGetTdCoordsCache != true && colCoordCache[colIndex] != null) {
                CopyColCoords(colIndex, r);
            }
            else {
                if (objBag.RTL.bEnabled) {
                    r.left = tableElem.offsetLeft + td.offsetLeft;
                    r.right = tableElem.offsetLeft + td.offsetLeft + td.offsetWidth + 1;
                }
                else {
                    r.left = tableElem.offsetLeft + td.offsetLeft - 1;
                    r.right = tableElem.offsetLeft + td.offsetLeft + td.offsetWidth;
                }
                if (td.previousSibling != null) {
                    if (tdCoordsHorizontalAdjustment == null) {
                        var cells = tableElem.rows[0].cells;
                        var rightMostCell = cells[objBag.RTL.bEnabled ? 0 : cells.length - 1];
                        var rightMostCellOffsetWidth = rightMostCell.offsetWidth - (SP.Internal.DomElement.BrowserIsIEAndRenderingModeIs7 && !objBag.RTL.bEnabled ? 1 : 0);

                        tdCoordsHorizontalAdjustment = tableElem.offsetWidth - (rightMostCell.offsetLeft + rightMostCellOffsetWidth);
                    }
                    r.left += tdCoordsHorizontalAdjustment;
                    r.right += tdCoordsHorizontalAdjustment;
                }
                r.width = r.right - r.left;
                InsertIntoCoordCacheArray(colCoordCache, colIndex, CloneColCoords(r));
            }
            return r;
        };
        this.GetCellByKey = function(recordKey, fieldKey) {
            if (!posConverter.IsRecordOnScreen(recordKey)) {
                return null;
            }
            var ind = paneConverter.KeyToIdx(recordKey, fieldKey);

            return ind && this.GetCellByIdx(ind.rowIdx, ind.colIdx);
        };
        this.GetCellByIdx = function(rowIdx, colIdx) {
            var r = new CellInfo(RowIdxToTableRowIdx(rowIdx), ColIdxToTableColIdx(colIdx), true, true);

            return r.bIsInvalid ? null : r;
        };
        this.GetCellByChildElement = function(startElem) {
            function FindTableRowIdx(table, tr) {
                return SP.Internal.JS.FindInArray(table.rows, function(item) {
                    return item == tr;
                });
            }
            function FindTableColIdx(tr, td) {
                var r = null;

                for (var i = tr.cells.length - 1; i >= 0; i--) {
                    if (tr.cells[i] == td) {
                        r = i;
                        break;
                    }
                }
                return r;
            }
            var searchInfo = SP.Internal.DomElement.FindAncestorWithProperty(startElem, 'recordKey');

            if (searchInfo == null) {
                return null;
            }
            var tr = searchInfo.elem;
            var td = searchInfo.child;
            var tableRowIdx = FindTableRowIdx(tableElem, tr);
            var tableColIdx = FindTableColIdx(tr, td);

            return tableRowIdx != null && tableColIdx != null ? new CellInfo(tableRowIdx, tableColIdx) : null;
        };
        this.GetRowCount = function() {
            return rowRecords.length();
        };
        this.GetColumnCount = function() {
            return GetDataColCount();
        };
        this.BeginRowIdx = function() {
            return paneConverter.RelRowIdxToRowIdx(0);
        };
        this.EndRowIdx = function() {
            return this.BeginRowIdx() + rowRecords.length;
        };
        this.BeginColIdx = function() {
            return leftmostColIdx;
        };
        this.EndColIdx = function() {
            return leftmostColIdx + GetDataColCount();
        };
        this.GetColumnAutoResizeWidth = function(colIdx) {
            var tableColIdx = ColIdxToTableColIdx(colIdx);
            var tableRows = tableElem.rows;
            var maxScrollWidth = 0;

            for (var i = 0; i < tableRows.length; i++) {
                maxScrollWidth = Math.max(maxScrollWidth, tableRows[i].cells[tableColIdx].scrollWidth);
            }
            return maxScrollWidth;
        };
        this.GetTableWidth = function() {
            var accumWidth = tableMgr.GetRowHeaderWidth();

            for (var i = tableMgr.BeginColIdx(); i < tableMgr.EndColIdx(); i++) {
                accumWidth += columns[i].width;
            }
            return accumWidth;
        };
        function InitStyleRules(styleMgr) {
            var defaultCellStyle = styleMgr.defaultCellStyle;
            var gridPaneStyle = styleMgr.gridPaneStyle;

            styleForTd = ";vertical-align:middle" + (objBag.spGrid ? "" : ";white-space:nowrap;overflow:hidden") + ";border-" + objBag.RTL.right + ":" + SP.JsGrid.Style.MakeBorderString(1, gridPaneStyle.verticalBorderStyle, gridPaneStyle.verticalBorderColor) + ";border-bottom:" + SP.JsGrid.Style.MakeBorderString(1, gridPaneStyle.horizontalBorderStyle, gridPaneStyle.horizontalBorderColor) + ";color:" + defaultCellStyle.textColor + (defaultCellStyle.font != null ? ";font-family:" + defaultCellStyle.font : "") + ";font-size:" + defaultCellStyle.fontSize + ";font-weight:" + defaultCellStyle.fontWeight + ";font-style:" + defaultCellStyle.fontStyle + ";text-align:" + defaultCellStyle.textAlign;
        }
        function InsertIntoCoordCacheArray(array, ind, item) {
            if (ind >= array.length) {
                for (var i = array.length; i < ind; i++) {
                    array.push(null);
                }
                array.push(item);
            }
            else {
                array[ind] = item;
            }
        }
        function Init() {
            objBag.eventMgr.AttachEvent(SP.JsGrid.EventType.OnCellErrorStateChanged, DispatchCellError);
            objBag.intEventMgr.AttachEvent(SP.JsGrid.Internal.EventType.OnRowHeaderStateChanged, DispatchRowStateChange);
            InitStyleRules(objBag.styleMgr);
            tableElem = document.createElement('table');
            tableElem.cellPadding = (tableElem.cellSpacing = 0);
            if (objBag.spGrid) {
                tableElem.style.width = "100%";
                tableElem.border = "0";
                tableElem.cellSpacing = "0";
                tableElem.cellPadding = "1";
                tableElem.className = "ms-listviewtable ms-listviewgrid";
                tableElem.style.borderCollapse = "collapse";
            }
            else {
                tableElem.style.cssText = 'table-layout:fixed;width:0px;border-collapse:collapse;background-color:' + objBag.styleMgr.defaultCellStyle.backgroundColor;
            }
            tableElem.id = baseId + '_mainTable';
            parentDiv.style.marginRight = "3px";
            parentDiv.appendChild(tableElem);
        }
        function DispatchCellError(args) {
            if (paneConverter.IsRecordOnScreen(args.recordKey)) {
                if (args.bCellCurrentlyHasError && !(args.recordKey in errorDivs && args.fieldKey in errorDivs[args.recordKey])) {
                    AddOrUpdateCellError(args.recordKey, args.fieldKey);
                }
                else if (!args.bCellCurrentlyHasError) {
                    ClearCellError(args.recordKey, args.fieldKey);
                }
            }
        }
        function AddOrUpdateCellError(recordKey, fieldKey, bDoNotDraw) {
            var cellInfo = tableMgr.GetCellByKey(recordKey, fieldKey);

            if (cellInfo != null) {
                var td = cellInfo.GetTd();

                if (!(recordKey in errorDivs)) {
                    errorDivs[recordKey] = {};
                }
                if (errorDivs[recordKey][fieldKey] == null) {
                    errorDivs[recordKey][fieldKey] = bDoNotDraw ? null : CreateCellErrorFrames(td);
                }
                if (errorDivs[recordKey][fieldKey] != null) {
                    PositionCellErrorFrames(td, errorDivs[recordKey][fieldKey]);
                }
            }
        }
        function CreateCellErrorFrames(td) {
            var baseCss = 'position:absolute; top:0px; left:0px; width:0px; height:0px;';
            var errorFrames = {};

            errorFrames.Top = document.createElement('div');
            errorFrames.Right = document.createElement('div');
            errorFrames.Bottom = document.createElement('div');
            errorFrames.Left = document.createElement('div');
            for (var key in errorFrames) {
                var ef = errorFrames[key];

                ef.style.cssText = baseCss;
                ef.style['border' + key] = SP.JsGrid.Style.MakeBorderString(1, 'solid', objBag.styleMgr.gridPaneStyle.errorRectBorderColor);
                td.appendChild(ef);
            }
            return errorFrames;
        }
        function PositionCellErrorFrames(parentTd, errorFrames) {
            var cellCoords = tableMgr.GetTdCoords(parentTd);
            var errorCoords = {
                Top: {
                    left: cellCoords.left + 1,
                    top: cellCoords.top + 1,
                    width: cellCoords.width - 2
                },
                Right: {
                    left: cellCoords.right - 2,
                    top: cellCoords.top + 1,
                    height: cellCoords.height - 2
                },
                Bottom: {
                    left: cellCoords.left + 1,
                    top: cellCoords.bottom - 2,
                    width: cellCoords.width - 2
                },
                Left: {
                    left: cellCoords.left + 1,
                    top: cellCoords.top + 1,
                    height: cellCoords.height - 2
                }
            };

            for (var key in errorFrames) {
                var ef = errorFrames[key];

                for (var propName in errorCoords[key]) {
                    ef.style[propName] = errorCoords[key][propName] + 'px';
                }
            }
        }
        function ClearAllErrorsForRecord(recordKey) {
            var errors = errorDivs[recordKey];

            if (errors != null) {
                for (var fk in errors) {
                    ClearErrorCore(recordKey, fk, false);
                }
                delete errorDivs[recordKey];
            }
        }
        function ClearCellError(recordKey, fieldKey) {
            if (recordKey in errorDivs && fieldKey in errorDivs[recordKey]) {
                ClearErrorCore(recordKey, fieldKey, true);
            }
        }
        function ClearErrorCore(recordKey, fieldKey, bCleanUp) {
            for (var errorFrameKey in errorDivs[recordKey][fieldKey]) {
                if (errorFrameKey != null) {
                    var parent = SP.Internal.DomElement.GetParentElement(errorDivs[recordKey][fieldKey][errorFrameKey]);

                    Sys.Debug.assert(parent != null);
                    if (parent != null) {
                        parent.removeChild(errorDivs[recordKey][fieldKey][errorFrameKey]);
                    }
                }
            }
            delete errorDivs[recordKey][fieldKey];
            if (bCleanUp) {
                if (SP.Internal.JS.IsAssocArrayEmpty(errorDivs[recordKey])) {
                    delete errorDivs[recordKey];
                }
            }
        }
        function DispatchRowStateChange(args) {
            if (bRowHeadersEnabled && paneConverter.IsRecordOnScreen(args.recordKey)) {
                if (args.rowHeaderState != null) {
                    SetRowHeaderState(args.recordKey, args.rowHeaderState);
                }
                else {
                    ClearRowHeaderState(args.recordKey);
                }
            }
        }
        function SetRowHeaderState(recordKey, rowHeaderState) {
            if (rowHeaderDivs[recordKey] != null) {
                ClearRowHeaderState(recordKey);
            }
            var rowHeader = tableMgr.GetRowHeaderByKey(recordKey);

            Sys.Debug.assert(rowHeader != null);
            var td = rowHeader.GetTd();
            var onClick = rowHeaderState.GetOnClick();
            var elemToAdd = (rowHeaderState.GetImg()).Render(rowHeaderState.GetTooltip(), onClick != null ? function(eventInfo) {
                onClick(eventInfo, recordKey);
                eventInfo.stopPropagation();
                eventInfo.preventDefault();
            } : null, true);

            td.innerHTML = '';
            td.appendChild(elemToAdd);
            rowHeaderDivs[recordKey] = elemToAdd;
        }
        function ClearRowHeaderState(recordKey, optRowHeaderTd) {
            if (recordKey in rowHeaderDivs) {
                var rowHeader = tableMgr.GetRowHeaderByKey(recordKey);

                Sys.Debug.assert(optRowHeaderTd != null || rowHeader != null);
                var td = optRowHeaderTd == null ? rowHeader.GetTd() : optRowHeaderTd;

                ClearHandlers(td);
                td.removeChild(rowHeaderDivs[recordKey]);
                delete rowHeaderDivs[recordKey];
            }
        }
        function GetDataColCount() {
            return tableColCount - tableColIdxOfFirstDataCol;
        }
        function TableRowIdxToRowIdx(tableRowIdx) {
            return paneConverter.RelRowIdxToRowIdx(tableRowIdx - 1);
        }
        function RowIdxToTableRowIdx(rowIdx) {
            return paneConverter.RowIdxToRelRowIdx(rowIdx) + 1;
        }
        function TableColIdxToColIdx(tableColIdx) {
            return leftmostColIdx + tableColIdx - tableColIdxOfFirstDataCol;
        }
        function ColIdxToTableColIdx(colIdx) {
            return colIdx - leftmostColIdx + tableColIdxOfFirstDataCol;
        }
        function InsertTableRow(relRowIdx, record, bAsync) {
            var headerCI, cellCIs = [];
            var tableRowIdx = relRowIdx + 1;
            var tr = tableElem.insertRow(tableRowIdx);

            tr.style.height = rowHeight + 'px';
            var bRecordExists = record != null && record != SP.JsGrid.Internal.LoadErrorState;
            var recordKey = bRecordExists ? record.key() : null;

            tr.recordKey = bRecordExists ? recordKey.toString() : null;
            ariaMgr.OnInsertTableRow(tr, record, TableRowIdxToRowIdx(tableRowIdx));
            if (bRowHeadersEnabled) {
                var td = tr.insertCell(-1);

                if (objBag.spGrid) {
                    td.className = "ms-vb-itmcbx ms-vb-firstCell";
                    td.style.cssText = styleForTd + ';border-' + objBag.RTL.left + ":" + SP.JsGrid.Style.MakeBorderString(1, objBag.styleMgr.gridPaneStyle.verticalBorderStyle, objBag.styleMgr.gridPaneStyle.verticalBorderColor) + ';padding-' + objBag.RTL.left + ':4px';
                }
                else {
                    td.style.cssText = styleForTd + ';padding-' + objBag.RTL.left + ':4px';
                }
                headerCI = new CellInfo(tableRowIdx, 0);
                ariaMgr.OnInsertRowHeaderCell(td);
            }
            var curCellInfo = null;
            var curFieldKey = null;
            var curFieldProperty = null;
            var curFieldType = null;

            for (var i = tableColIdxOfFirstDataCol; i < tableColCount; i++) {
                var td = tr.insertCell(-1);

                curCellInfo = new CellInfo(tableRowIdx, i);
                cellCIs.push(curCellInfo);
                td.style.cssText = styleForTd;
                if (objBag.spGrid) {
                    var colIdx = i - 1;
                    var className = "ms-vb2";

                    if (colIdx >= 0 && colIdx < columns.length) {
                        var renderCtx = objBag.jsGridObj.GetSpCsrRenderCtx();
                        var fieldKey = columns[colIdx].fieldKeys[0];
                        var csrField = objBag.jsGridParams.tableViewParams.gridFieldMap[fieldKey].csrInfo;

                        Sys.Debug.assert(renderCtx != null);
                        if (csrField != null) {
                            className = GetCSSClassForFieldTd(renderCtx, csrField);
                        }
                    }
                    td.className = className;
                    if (i === tableColCount - 1) {
                        AddCssClassToElement(td, "ms-vb-lastCell");
                    }
                }
                ariaMgr.OnInsertGridCell(td);
            }
            fnInsertedRow(headerCI, cellCIs);
            var rowHasContent = false;

            for (var i = 0; i < cellCIs.length; i++) {
                rowHasContent = fnPopulateCell(cellCIs[i]) || rowHasContent;
                if (recordKey != null) {
                    if (objBag.errorMgr.CellHasError(recordKey, cellCIs[i].GetFieldKey())) {
                        AddOrUpdateCellError(recordKey, cellCIs[i].GetFieldKey(), bAsync);
                        if (bAsync) {
                            SP.JsGrid.AsynchronousCellUpdater.RegisterCell(cellErrorJobKey, recordKey, cellCIs[i].GetFieldKey());
                        }
                    }
                }
            }
            var rowHdrState;

            if (bRowHeadersEnabled && (rowHdrState = objBag.rowHeaderStateMgr.GetRowHeaderState(recordKey)) != null) {
                SetRowHeaderState(recordKey, rowHdrState);
            }
            if (!rowHasContent && SP.Internal.DomElement.BrowserIsIEAndRenderingModeIs7) {
                var firstCell = tr.cells.length > 0 ? tr.cells[0] : null;

                if (firstCell != null && firstCell.innerHTML != null && firstCell.innerHTML.length == 0) {
                    firstCell.innerHTML = "&nbsp;";
                }
            }
        }
        function ClearHandlers(elem) {
            $clearHandlers(elem);
            var childNodes = elem.childNodes;

            for (var i = 0; i < childNodes.length; i++) {
                ClearHandlers(childNodes[i]);
            }
        }
        function DeleteTableRow(relRowIdx) {
            var recordKey = tableElem.rows[relRowIdx + 1].recordKey;

            if (bRowHeadersEnabled && rowHeaderDivs[recordKey] != null) {
                ClearRowHeaderState(recordKey, tableElem.rows[relRowIdx + 1].cells[0]);
            }
            ClearAllErrorsForRecord(recordKey);
            var tr = tableElem.rows[relRowIdx + 1];

            fnTryDisposeRow(tr.recordKey);
            tr.recordKey = null;
            ClearRowCoordCache(relRowIdx + 1);
            tableElem.deleteRow(relRowIdx + 1);
        }
        function CalcOptimalDataColumnCount(beginColIdx) {
            if (objBag.spGrid)
                return paneConverter.GetVirtualColumnCount();
            var targetWidth = paneSize.GetWidth();
            var accumWidth = tableMgr.GetRowHeaderWidth();

            for (var i = beginColIdx; i < paneConverter.GetVirtualColumnCount() && accumWidth < targetWidth; i++) {
                accumWidth += columns[i].width;
            }
            return i - beginColIdx;
        }
        function InsertTableColumns(tableColIdx, count) {
            var headerCIs = [], cellCIs = [];
            var tr = tableElem.rows[0];

            ClearColCoordCache(tableColIdx);
            ClearRowCoordCache(0);
            for (var i = 0; i < count; i++) {
                var th = document.createElement('th');

                tableColIdx == tr.cells.length ? tr.appendChild(th) : tr.insertBefore(th, tr.cells[tableColIdx]);
                tableColCount++;
                headerCIs.push(new CellInfo(0, tableColIdx + i));
                ariaMgr.OnInsertColHeaderCell(th);
                for (var j = 0; j < rowRecords.length; j++) {
                    var td = tableElem.rows[j + 1].insertCell(tableColIdx + i);

                    td.style.cssText = styleForTd;
                    cellCIs.push(new CellInfo(j + 1, tableColIdx + i));
                    ariaMgr.OnInsertGridCell(th);
                }
            }
            fnInsertedColumns(headerCIs, cellCIs, headerHeight);
            for (var i = 0; i < cellCIs.length; i++) {
                fnPopulateCell(cellCIs[i]);
                if (objBag.errorMgr.CellHasError(cellCIs[i].GetRecordKey(), cellCIs[i].GetFieldKey())) {
                    AddOrUpdateCellError(cellCIs[i].GetRecordKey(), cellCIs[i].GetFieldKey());
                }
            }
        }
        function RemoveTableColumns(tableColIdx, count) {
            var curColIdx = TableColIdxToColIdx(tableColIdx);

            ClearColCoordCache(tableColIdx);
            ClearRowCoordCache(0);
            while (count-- > 0) {
                var fks = columns[curColIdx].fieldKeys;

                for (var i = rowRecords.length; i >= 0; i--) {
                    var tr = tableElem.rows[i];
                    var td = tr.cells[tableColIdx];

                    if (tr.recordKey in errorDivs) {
                        for (var fkIdx = 0; fkIdx < fks.length; fkIdx++) {
                            ClearCellError(tr.recordKey, fks[fkIdx]);
                        }
                    }
                    if (i == 0) {
                        fnRemovedHeaderCell(td, curColIdx);
                    }
                    tr.removeChild(td);
                }
                curColIdx++;
                tableColCount--;
            }
            fnRemovedColumns();
        }
        function RefreshLoadingRects() {
            DisposeLoadingRects();
            var group = null;
            var groups = [];
            var lastType = -1;

            for (var i = 0; i < rowRecords.length; i++) {
                var type = rowRecords[i] == null ? 1 : rowRecords[i] == SP.JsGrid.Internal.LoadErrorState ? 2 : 0;

                if (type != 0) {
                    if (type != lastType) {
                        group = {
                            type: type,
                            startIdx: i,
                            count: 1
                        };
                        groups.push(group);
                    }
                    else {
                        group.count++;
                    }
                }
                lastType = type;
            }
            if (groups.length) {
                var rhw = tableMgr.GetRowHeaderWidth();
                var loadingRectLeft = objBag.RTL.bEnabled ? Math.max(0, tableElem.offsetLeft + 1) : rhw;
                var loadingRectWidth = Math.min(tableMgr.GetTableWidth() - 1, paneSize.GetWidth()) - rhw;
                var htmlPrefix = '<table cellpadding="0" cellspacing="0" style="height:100%;width:100%"><tr><td style="border:0px;text-align:center">';
                var htmlPostfix = '</td></tr></table>';
                var loadingInnerHTML = htmlPrefix + fnGetLocStr('LoadingMsg') + htmlPostfix;
                var errorInnerHTML = htmlPrefix + '<a href="#" tabIndex="-1" title="' + fnGetLocStr('RecordFetchError') + '">' + fnGetLocStr('RecordFetchError') + '</a>' + htmlPostfix;

                for (var i = 0; i < groups.length; i++) {
                    var group = groups[i];
                    var div = document.createElement('div');

                    SP.Internal.DomElement.SetOpacity(div, 0.75);
                    div.style.position = 'absolute';
                    div.style.top = rowHeight * group.startIdx + headerHeight + 2 - parentDiv.offsetTop + 'px';
                    div.style.left = loadingRectLeft + 'px';
                    div.style.width = loadingRectWidth + 'px';
                    div.style.height = rowHeight * group.count - 1 + 'px';
                    div.style.zIndex = "100";
                    if (group.type == 1) {
                        div.innerHTML = loadingInnerHTML;
                        loadingRects.push({
                            div: div
                        });
                    }
                    else {
                        div.innerHTML = errorInnerHTML;
                        var anchor = div.firstChild.firstChild.firstChild.firstChild.firstChild;

                        $addHandler(anchor, "click", function() {
                            fnRetryErrorRows();
                            return false;
                        });
                        loadingRects.push({
                            div: div,
                            anchor: anchor
                        });
                    }
                    parentDiv.appendChild(div);
                }
            }
        }
        function DisposeLoadingRects() {
            for (var i = 0; i < loadingRects.length; i++) {
                if (loadingRects[i].anchor) {
                    $clearHandlers(loadingRects[i].anchor);
                }
                parentDiv.removeChild(loadingRects[i].div);
            }
            loadingRects = [];
        }
        function UpdateCoordCacheInternal() {
            if (objBag.bUpdateCoordCache) {
                UpdateColCoordCache();
                UpdateRowCoordCache();
            }
            objBag.bUpdateCoordCache = false;
        }
        function UpdateRowCoordCache() {
            var curDelta;
            var totalDelta = 0;
            var row;
            var newHeight;
            var rows = tableElem.rows;

            for (var i = 0; i < rowCoordCache.length; i++) {
                row = rowCoordCache[i];
                if (row == null) {
                    ClearRowCoordCache(i);
                    break;
                }
                newHeight = rows[i].cells[0].offsetHeight + 1;
                curDelta = newHeight - row.height;
                if (curDelta != 0) {
                    row.height = newHeight;
                    row.bottom += curDelta;
                }
                if (totalDelta != 0) {
                    row.top += totalDelta;
                    row.bottom += totalDelta;
                }
                if (curDelta != 0) {
                    totalDelta += curDelta;
                }
            }
        }
        function UpdateColCoordCache() {
            var curDelta;
            var totalDelta = 0;
            var col;
            var newWidth;
            var topRow = tableElem.rows[0];

            for (var i = 0; i < colCoordCache.length; i++) {
                col = colCoordCache[i];
                if (col == null) {
                    if (objBag.bUpdateCoordCache) {
                        ClearColCoordCache(i);
                        break;
                    }
                    else {
                        continue;
                    }
                }
                newWidth = topRow.cells[i].offsetWidth;
                newWidth += 1;
                col.width = newWidth;
                totalDelta += newWidth - col.width;
                if (totalDelta != 0) {
                    if (!objBag.RTL.bEnabled) {
                        col.right += totalDelta;
                    }
                    else {
                        col.left += totalDelta;
                    }
                }
            }
        }
        function ClearColCoordCache(columnIndex) {
            if (colCoordCache.length > columnIndex) {
                colCoordCache.splice(columnIndex, colCoordCache.length - columnIndex);
            }
        }
        function ClearRowCoordCache(rowIndex) {
            if (rowCoordCache.length > rowIndex) {
                rowCoordCache.splice(rowIndex, rowCoordCache.length - rowIndex);
            }
        }
        function CloneRowCoords(rowCoords) {
            return {
                top: rowCoords.top,
                bottom: rowCoords.bottom,
                height: rowCoords.height
            };
        }
        function CopyRowCoords(rowIndex, dest) {
            var rowCoords = rowCoordCache[rowIndex];

            dest.top = rowCoords.top;
            dest.bottom = rowCoords.bottom;
            dest.height = rowCoords.height;
        }
        function CloneColCoords(colCoords) {
            return {
                left: colCoords.left,
                right: colCoords.right,
                width: colCoords.width
            };
        }
        function CopyColCoords(colIndex, dest) {
            var colCoords = colCoordCache[colIndex];

            dest.left = colCoords.left;
            dest.right = colCoords.right;
            dest.width = colCoords.width;
        }
        function IsTableRowIdxValid(tableRowIdx, bNoHeaders) {
            return tableRowIdx >= (bNoHeaders ? 1 : 0) && tableRowIdx < tableElem.rows.length;
        }
        function IsTableColIdxValid(tableColIdx, bNoHeaders) {
            return tableColIdx >= (bNoHeaders && bRowHeadersEnabled ? 1 : 0) && tableColIdx < tableColCount;
        }
        function CellInfo(tableRowIdx, tableColIdx, bValidate, bNoHeaders) {
            if (!bValidate || IsTableRowIdxValid(tableRowIdx, bNoHeaders) && IsTableColIdxValid(tableColIdx, bNoHeaders)) {
                this.tableRowIdx = tableRowIdx;
                this.tableColIdx = tableColIdx;
            }
            else {
                this.bIsInvalid = true;
            }
        }
        CellInfo.prototype = {
            fieldKey: null,
            GetTr: function() {
                return tableElem.rows[this.tableRowIdx];
            },
            GetTd: function() {
                return tableElem.rows[this.tableRowIdx].cells[this.tableColIdx];
            },
            GetRecordKey: function() {
                if (this.tableRowIdx < 1) {
                    return null;
                }
                var rec = rowRecords[this.tableRowIdx - 1];

                return rec != null && rec.recordKey != null ? rec.recordKey : (this.GetTr()).recordKey;
            },
            GetRecord: function() {
                var rec = this.tableRowIdx == 0 ? null : rowRecords[this.tableRowIdx - 1];

                return rec == SP.JsGrid.Internal.LoadErrorState ? null : rec;
            },
            GetFieldKey: function() {
                if (this.tableColIdx == 0 && bRowHeadersEnabled || this.tableRowIdx < 1) {
                    return null;
                }
                if (!this.fieldKey) {
                    this.fieldKey = paneConverter.IdxToFieldKey(TableRowIdxToRowIdx(this.tableRowIdx), TableColIdxToColIdx(this.tableColIdx));
                }
                return this.fieldKey;
            },
            GetColumn: function() {
                return this.tableColIdx == 0 && bRowHeadersEnabled ? null : columns[this.GetColIdx()];
            },
            GetColIdx: function() {
                return this.tableColIdx == 0 && bRowHeadersEnabled ? null : TableColIdxToColIdx(this.tableColIdx);
            },
            GetRowIdx: function() {
                return this.tableRowIdx < 1 ? null : TableRowIdxToRowIdx(this.tableRowIdx);
            },
            Equals: function(otherCellInfo) {
                return this.tableRowIdx == otherCellInfo.tableRowIdx && this.tableColIdx == otherCellInfo.tableColIdx;
            },
            GetCellType: function() {
                return this.tableColIdx == 0 && bRowHeadersEnabled ? this.tableRowIdx < 1 ? tableMgr.CellType.SelectAllSquare : tableMgr.CellType.RowHeader : this.tableRowIdx < 1 ? tableMgr.CellType.ColumnHeader : tableMgr.CellType.Cell;
            }
        };
        Init();
    };
    SP.JsGrid.Internal.VersionManager = function(objBag, fnDoPhysicalPropChange, fnDoPhysicalRowInsert, fnDoPhysicalRowDelete, fnDoPhysicalLevelChange, fnGetRecord) {
        var reservedChanges = [];
        var changeMap = [{
            key: new ChangeKey(0),
            version: 0
        }];
        var curVersion = 0;
        var baselineVersion = 0;
        var changeCount = 1;
        var rowChangeMgr = new RowChangeManager();
        var propChangeMgr = new PropChangeManager();
        var levelChangeMgr = new LevelChangeManager();

        this.ChangeKeysOnPropUpdates = function(oldRecordKey, newRecordKey) {
            propChangeMgr.ChangeKeys(oldRecordKey, newRecordKey);
        };
        this.GetEarliestPropChangeKeyForRecord = function(recordKey) {
            var r = propChangeMgr.GetEarliestChangeKeyForRecord(recordKey);

            if (r != null) {
                r = this.GetChangeKeyForVersion(r);
            }
            return r;
        };
        this.AddPropChange = function(recordKey, fieldKey, changeKey, propUpdate, validationState, optErrorMsg) {
            if (ValidateChangeKey(changeKey, true)) {
                propChangeMgr.AddPropChange(recordKey, fieldKey, changeKey, propUpdate, validationState, optErrorMsg);
            }
        };
        this.MarkPropUpdateInvalid = function(recordKey, fieldKey, changeKey, optErrorMsg) {
            var r = false;

            if (ValidateChangeKey(changeKey, true)) {
                r = propChangeMgr.MarkPropUpdateInvalid(recordKey, fieldKey, changeKey, optErrorMsg);
            }
            return r;
        };
        this.ClearAllPropChangesForRecord = function(recordKey) {
            propChangeMgr.ClearAllPropChangesForRecord(recordKey);
        };
        this.AddRowInsertChange = function(rowUpdate, changeKey) {
            if (ValidateChangeKey(changeKey, true)) {
                rowChangeMgr.AddInsertChange(rowUpdate, changeKey);
            }
        };
        this.AddRowDeleteChange = function(rowUpdate, changeKey) {
            if (ValidateChangeKey(changeKey, true)) {
                rowChangeMgr.AddDeleteChange(rowUpdate, changeKey);
            }
        };
        this.AddIndentLevelChange = function(recordKey, levelDelta, adoptedChildrenKeys, changeKey) {
            if (ValidateChangeKey(changeKey, true)) {
                levelChangeMgr.AddLevelChange(recordKey, levelDelta, adoptedChildrenKeys, changeKey);
            }
        };
        this.ApplyChangesToRecord = function(record) {
            propChangeMgr.ApplyChangesToRecord(record);
        };
        this.ApplyChangeKey = function(changeKey) {
            if (!ValidateChangeKey(changeKey, true)) {
                ULS.SendErrorMessageJS(ULSCat.msoulscat_WSS_JsGrid, 'Invalid change key: ' + (changeKey.GetVersionNumber()).toString());
                throw new InvalidChangeKeyError('Invalid change key: ' + (changeKey.GetVersionNumber()).toString());
            }
            if (this.OnSynchronizeChange != null) {
                this.OnSynchronizeChange(changeKey);
            }
            rowChangeMgr.ApplyAllRowInsertChanges(changeKey);
            levelChangeMgr.ApplyAllLevelChanges(changeKey);
            propChangeMgr.SynchronizeToChange(changeKey);
            rowChangeMgr.ApplyAllRowDeleteChanges(changeKey);
            curVersion = changeKey.GetVersionNumber();
        };
        this.UndoChangeKey = function(changeKey) {
            if (!ValidateChangeKey(changeKey)) {
                ULS.SendErrorMessageJS(ULSCat.msoulscat_WSS_JsGrid, 'Invalid change key: ' + (changeKey.GetVersionNumber()).toString());
                throw new InvalidChangeKeyError('Invalid change key: ' + (changeKey.GetVersionNumber()).toString());
            }
            if (this.OnRollbackChange != null) {
                this.OnRollbackChange(changeKey);
            }
            var prevChangeKey = TryGetPreviousChangeKeyFromVersion(changeKey.GetVersionNumber());

            curVersion = prevChangeKey.GetVersionNumber();
            rowChangeMgr.UndoAllRowDeleteChanges(changeKey);
            levelChangeMgr.UndoAllLevelChanges(changeKey);
            propChangeMgr.RollBackChange(changeKey);
            rowChangeMgr.UndoAllRowInsertChanges(changeKey);
        };
        this.TryReadPropForChangeKey = function(recordKey, fieldKey, changeKey) {
            return propChangeMgr.TryReadPropForVersion(recordKey, fieldKey, changeKey.GetVersionNumber());
        };
        this.OnSynchronizeChange;
        this.OnRollbackChange;
        this.OnVacateChange;
        this.GetChange = function(changeKey, optRecordsToSearch, bGetUndo) {
            var version = changeKey.GetVersionNumber();

            Sys.Debug.assert(!bGetUndo || version != baselineVersion);
            var c1 = rowChangeMgr.GetChange(version, optRecordsToSearch, bGetUndo);
            var c2 = levelChangeMgr.GetChange(version, optRecordsToSearch, bGetUndo);
            var c3 = propChangeMgr.GetChange(version, optRecordsToSearch, bGetUndo);

            return (c1.concat(c2, c3)).sort(CompareChangeType);
            function CompareChangeType(l, r) {
                return l.type - r.type;
            }
        };
        this.GetCurrentVersion = function() {
            return curVersion;
        };
        this.GetCurrentChangeKey = function() {
            return GetChangeKeyFromVersion(curVersion);
        };
        this.IsChangeKeyApplied = function(changeKey) {
            return changeKey != null && changeKey.GetVersionNumber() <= curVersion;
        };
        this.GetNextVersionKey = function() {
            var r = new ChangeKey(changeCount++);

            changeMap.push({
                key: r,
                version: r.GetVersionNumber()
            });
            r.Reserve();
            return r;
        };
        this.ForceReleaseChanges = function(startChangeKey, endChangeKey) {
            var startIdx;
            var count = 0;

            ForEachChange(startChangeKey.GetVersionNumber() + 1, endChangeKey.GetVersionNumber(), reservedChanges, function(mapEntry, idx) {
                startIdx = startIdx == null ? idx : startIdx;
                count++;
            });
            reservedChanges.splice(startIdx, count);
            UpdateBaselineVersion();
        };
        this.GetChangeKeyForVersion = function(version) {
            var r = GetChangeKeyFromVersion(version);

            return r != null && ValidateChangeKey(r, true) ? r : null;
        };
        this.Clear = function() {
            reservedChanges = [];
            rowChangeMgr.Clear();
            levelChangeMgr.Clear();
            propChangeMgr.Clear();
        };
        this.ReleaseChanges = function(startChangeKey, endChangeKey) {
            ForEachChange(startChangeKey.GetVersionNumber() + 1, endChangeKey.GetVersionNumber(), changeMap, function(mapEntry, idx) {
                mapEntry.key.Release();
            });
            UpdateBaselineVersion();
        };
        this.ReserveChanges = function(startChangeKey, endChangeKey) {
            ForEachChange(startChangeKey.GetVersionNumber() + 1, endChangeKey.GetVersionNumber(), changeMap, function(mapEntry, idx) {
                mapEntry.key.Reserve();
            });
        };
        this.VacateChange = function(changeKey) {
            var version = changeKey.GetVersionNumber();

            Sys.Debug.assert(version > baselineVersion);
            Sys.Debug.assert(version > curVersion);
            objBag.eventMgr.FireEvent(SP.JsGrid.EventType.OnVacateChange, new SP.JsGrid.EventArgs.VacateChange(changeKey));
            if (this.OnVacateChange != null) {
                this.OnVacateChange(changeKey);
            }
            propChangeMgr.VacateChange(version);
            rowChangeMgr.VacateChange(version);
            levelChangeMgr.VacateChange(version);
            vacatedChanges.VacateChange(version);
            CleanUpChangeMap(version, version);
        };
        function CleanUpChangeMap(startVer, endVer) {
            var count = 0;
            var startIdx;

            ForEachChange(startVer, endVer, changeMap, function(mapEntry, idx) {
                startIdx = startIdx == null ? idx : startIdx;
                count++;
            });
            changeMap.splice(startIdx, count);
        }
        function ForEachChange(startVer, endVer, map, fnOp) {
            var startIdx = startVer == null ? 0 : SP.Internal.JS.LowerBound(map, startVer, 'version');
            var endIdx = endVer == null ? map.length - 1 : SP.Internal.JS.LowerBound(map, endVer, 'version');

            for (var idx = startIdx; idx <= endIdx; idx++) {
                if (map[idx] != null) {
                    fnOp(map[idx], idx);
                }
            }
        }
        function ValidateChangeKey(changeKey, bBaselineOk) {
            var version = changeKey.GetVersionNumber();

            Sys.Debug.assert(version > baselineVersion || bBaselineOk && version == baselineVersion);
            return !vacatedChanges.ChangeIsVacated(version);
        }
        var vacatedChanges = (function() {
            var vChanges = [];

            function GetVacatedChange(version) {
                var idx = SP.Internal.JS.LowerBound(vChanges, version);
                var item = vChanges[idx] != null && vChanges[idx] == version ? vChanges[idx] : null;

                return {
                    idx: idx,
                    item: item
                };
            }
            return {
                VacateChange: function(version) {
                    var changeInfo = GetVacatedChange(version);

                    Sys.Debug.assert(changeInfo.item == null);
                    vChanges.splice(changeInfo.idx, 0, version);
                },
                AdvanceBaseline: function(newBaseline) {
                    var changeInfo = GetVacatedChange(newBaseline);

                    vChanges.splice(0, changeInfo.idx + (changeInfo.item != null ? 1 : 0));
                },
                ChangeIsVacated: function(version) {
                    var changeInfo = GetVacatedChange(version);

                    return changeInfo.item != null;
                }
            };
        })();

        function ChangeKey(version) {
            this.Reserve = function() {
                Sys.Debug.assert(version >= baselineVersion);
                var idx = SP.Internal.JS.LowerBound(reservedChanges, version, 'version');

                if (reservedChanges[idx] == null || reservedChanges[idx].version != version) {
                    reservedChanges.splice(idx, 0, {
                        version: version,
                        count: 1
                    });
                }
                else {
                    reservedChanges[idx].count++;
                }
            };
            this.Release = function() {
                var idx = SP.Internal.JS.LowerBound(reservedChanges, version, 'version');

                Sys.Debug.assert(reservedChanges[idx].version == version);
                if (reservedChanges[idx].count == 1) {
                    reservedChanges.splice(idx, 1);
                    UpdateBaselineVersion();
                }
                else {
                    reservedChanges[idx].count--;
                }
            };
            this.GetVersionNumber = function() {
                return version;
            };
            this.CompareTo = function(changeKey) {
                return version - changeKey.GetVersionNumber();
            };
        }
        function TryGetPreviousChangeKeyFromVersion(version) {
            var lastEntry = null;

            for (var i = 0; i < changeMap.length && changeMap[i].version < version; i++) {
                lastEntry = changeMap[i];
            }
            return lastEntry && lastEntry.key;
        }
        function GetChangeKeyFromVersion(version) {
            var idx = SP.Internal.JS.BinarySearch(changeMap, version, 'version');

            return changeMap[idx].key;
        }
        function UpdateBaselineVersion() {
            var newBaseline = reservedChanges.length > 0 ? reservedChanges[0] - 1 : curVersion - 1;

            if (newBaseline > baselineVersion) {
                propChangeMgr.AdvanceBaseline(newBaseline);
                rowChangeMgr.AdvanceBaseline(newBaseline);
                levelChangeMgr.AdvanceBaseline(newBaseline);
                vacatedChanges.AdvanceBaseline(newBaseline);
                CleanUpChangeMap(baselineVersion, newBaseline - 1);
                baselineVersion = newBaseline;
            }
        }
        function LevelChangeManager() {
            var levelChanges;

            this.Clear = function() {
                Init();
            };
            this.AddLevelChange = function(recordKey, levelDelta, adoptedChildrenKeys, changeKey) {
                var version = changeKey.GetVersionNumber();
                var entry = levelChanges[version];

                if (entry == null) {
                    entry = (levelChanges[version] = []);
                }
                entry.push({
                    recordKey: recordKey,
                    levelDelta: levelDelta,
                    adoptedChildrenKeys: adoptedChildrenKeys
                });
                if (curVersion >= version) {
                    fnDoPhysicalLevelChange(recordKey, levelDelta, adoptedChildrenKeys, changeKey);
                }
            };
            this.ApplyAllLevelChanges = function(changeKey) {
                DoLevelChange(changeKey, false);
            };
            this.UndoAllLevelChanges = function(changeKey) {
                DoLevelChange(changeKey, true);
            };
            this.GetChange = function(version, optRecordsToSearch, bGetPreviousValue) {
                var keyFilter;

                if (optRecordsToSearch != null) {
                    keyFilter = new SP.Utilities.Set();
                    keyFilter.AddArray(optRecordsToSearch);
                }
                var r = [];
                var lvl = levelChanges[version];

                if (lvl != null) {
                    var changeType = SP.JsGrid.Internal.VersionManager.ChangeType.Level;

                    for (var i = 0; i < lvl.length; i++) {
                        if (keyFilter == null || keyFilter.Contains(lvl[i].recordKey)) {
                            var delta = lvl[i].levelDelta * (bGetPreviousValue ? -1 : 1);

                            r.push({
                                type: changeType,
                                recordKey: lvl[i].recordKey,
                                levelDelta: delta,
                                adoptedChildrenKeys: lvl[i].adoptedChildrenKeys
                            });
                        }
                    }
                }
                return r;
            };
            this.VacateChange = function(version) {
                delete levelChanges[version];
            };
            this.AdvanceBaseline = function(newBaseline) {
                for (var i = baselineVersion; i < newBaseline; i++) {
                    this.VacateChange(i);
                }
            };
            function Init() {
                levelChanges = {};
            }
            function DoLevelChange(changeKey, bUndoing) {
                var changes = levelChanges[changeKey.GetVersionNumber()];

                if (changes != null) {
                    if (bUndoing) {
                        for (var i = changes.length - 1; i >= 0; i--) {
                            fnDoPhysicalLevelChange(changes[i].recordKey, -changes[i].levelDelta, changes[i].adoptedChildrenKeys, changeKey);
                        }
                    }
                    else {
                        for (var i = 0; i < changes.length; i++) {
                            fnDoPhysicalLevelChange(changes[i].recordKey, changes[i].levelDelta, null, changeKey);
                        }
                    }
                }
            }
            Init();
        }
        function RowChangeManager() {
            var rowInserts;
            var rowDeletes;

            this.Clear = function() {
                Init();
            };
            this.AddInsertChange = function(rowUpdate, changeKey) {
                ApplyInsert(rowUpdate, changeKey);
            };
            this.AddDeleteChange = function(rowUpdate, changeKey) {
                ApplyDelete(rowUpdate, changeKey);
            };
            this.ApplyAllRowInsertChanges = function(changeKey) {
                DoRowChangeOp(ApplyInsert, rowInserts, changeKey, false, false, true);
            };
            this.ApplyAllRowDeleteChanges = function(changeKey) {
                DoRowChangeOp(ApplyDelete, rowDeletes, changeKey, false, false, false);
            };
            this.UndoAllRowInsertChanges = function(changeKey) {
                DoRowChangeOp(ApplyDelete, rowInserts, changeKey, true, true, false);
            };
            this.UndoAllRowDeleteChanges = function(changeKey) {
                DoRowChangeOp(ApplyInsert, rowDeletes, changeKey, true, true, true);
            };
            this.VacateChange = function(version) {
                var idx = SP.Internal.JS.BinarySearch(rowInserts, version, 'version');

                if (idx != null) {
                    rowInserts.splice(idx, 1);
                }
                var idx = SP.Internal.JS.BinarySearch(rowDeletes, version, 'version');

                if (idx != null) {
                    rowDeletes.splice(idx, 1);
                }
            };
            this.AdvanceBaseline = function(newBaseline) {
            };
            this.GetChange = function(version, optRecordsToSearch, bGetUndo) {
                var keyFilter;

                if (optRecordsToSearch != null) {
                    keyFilter = new SP.Utilities.Set();
                    keyFilter.AddArray(optRecordsToSearch);
                }
                var insResults = GetChanges(rowInserts, version, keyFilter, bGetUndo ? SP.JsGrid.Internal.VersionManager.ChangeType.Delete : SP.JsGrid.Internal.VersionManager.ChangeType.Insert);
                var delResults = GetChanges(rowDeletes, version, keyFilter, bGetUndo ? SP.JsGrid.Internal.VersionManager.ChangeType.Insert : SP.JsGrid.Internal.VersionManager.ChangeType.Delete);

                return bGetUndo ? delResults.concat(insResults) : insResults.concat(delResults);
            };
            function Init() {
                rowInserts = [];
                rowDeletes = [];
            }
            function GetChanges(rowChangeSrc, version, keyFilter, changeType) {
                var r = [];
                var idx = SP.Internal.JS.BinarySearch(rowChangeSrc, version, 'version');

                if (idx != null) {
                    for (var i = 0; i < rowChangeSrc[idx].changes.length; i++) {
                        var rowUpdate = rowChangeSrc[idx].changes[i];

                        if (keyFilter == null || keyFilter.Contains(rowUpdate.recordKey)) {
                            r.push({
                                type: changeType,
                                recordKey: rowUpdate.recordKey,
                                afterRecordKey: rowUpdate.afterRecordKey,
                                newOutlineLevel: rowUpdate.newOutlineLevel
                            });
                        }
                    }
                }
                return r;
            }
            function DoRowChangeOp(fnOp, rowChangeSrc, changeKey, bReverseOrder, bDoNotTrack, bAfterChangeKeyMatters) {
                var idx = SP.Internal.JS.BinarySearch(rowChangeSrc, changeKey.GetVersionNumber(), 'version');

                if (idx != null) {
                    var changes = rowChangeSrc[idx].changes;

                    if (!bDoNotTrack) {
                        rowChangeSrc[idx] = new EmptyVersionEntry(rowChangeSrc[idx].version);
                    }
                    var changeMap = {};
                    var changesRemaining = [];

                    for (var i = 0; i < changes.length; i++) {
                        changeMap[changes[i].recordKey] = changes[i];
                        changesRemaining.push(changes[i]);
                    }
                    while (changesRemaining.length > 0) {
                        fnOp(FindNextChange(changeMap, changesRemaining), changeKey, true, bDoNotTrack, changeMap);
                    }
                }
                function FindNextChange(changeMap, changesRemaining) {
                    var change;

                    if (bAfterChangeKeyMatters) {
                        change = bReverseOrder ? changesRemaining[changesRemaining.length - 1] : changesRemaining[0];
                        while (change.afterRecordKey in changeMap) {
                            change = changeMap[change.afterRecordKey];
                        }
                        delete changeMap[change.recordKey];
                        for (var i = 0; i < changesRemaining.length; i++) {
                            if (change == changesRemaining[i]) {
                                changesRemaining.splice(i, 1);
                                break;
                            }
                        }
                    }
                    else {
                        change = bReverseOrder ? changesRemaining.pop() : changesRemaining.shift();
                    }
                    return change;
                }
            }
            function ApplyInsert(rowUpdate, changeKey, bForceApply, bDoNotTrack, changeMap) {
                var version = changeKey.GetVersionNumber();

                if (curVersion >= version || bForceApply) {
                    var insert = fnDoPhysicalRowInsert(rowUpdate, changeKey, function(key) {
                        return GetRecordStatus(key, bForceApply && curVersion < version ? version : curVersion) == 1;
                    }, changeMap);

                    if (insert != null && !bDoNotTrack) {
                        AddChange(rowInserts, version, insert);
                    }
                }
                else if (!bDoNotTrack) {
                    AddChange(rowInserts, version, rowUpdate);
                }
            }
            function ApplyDelete(rowUpdate, changeKey, bForceApply, bDoNotTrack) {
                var version = changeKey.GetVersionNumber();

                if (curVersion >= version || bForceApply) {
                    var expandedDeletes = fnDoPhysicalRowDelete(rowUpdate, changeKey, function(key) {
                        return GetRecordStatus(key, bForceApply && curVersion < version ? version : curVersion) == -1;
                    });

                    if (expandedDeletes != null) {
                        var exDeleteSet = new SP.Utilities.Set();

                        for (var i = 0; i < expandedDeletes; i++) {
                            if (expandedDeletes[i].isbIsInView) {
                                exDeleteSet.Add(expandedDeletes[i].recordKey);
                            }
                        }
                        if (!exDeleteSet.IsEmpty()) {
                            ForEachRowChange(function(bIsInsert, rowChange) {
                                if (bIsInsert) {
                                    for (var key in rowChange.recordKeys) {
                                        if (exDeleteSet.Contains(key)) {
                                            exDeleteSet.Remove(key);
                                        }
                                    }
                                }
                                if (exDeleteSet.IsEmpty()) {
                                    return false;
                                }
                                for (var i = 0; i < rowChange.changes.length; i++) {
                                    if (exDeleteSet.Contains(rowChange.changes[i].afterRecordKey)) {
                                        rowChange.changes[i].afterRecordKey = rowUpdate.afterRecordKey;
                                    }
                                }
                                return true;
                            }, version, false, true);
                        }
                        if (!bDoNotTrack) {
                            for (var i = 0; i < expandedDeletes.length; i++) {
                                AddChange(rowDeletes, version, expandedDeletes[i]);
                            }
                        }
                    }
                }
                else if (!bDoNotTrack) {
                    AddChange(rowDeletes, version, rowUpdate);
                }
            }
            function GetRecordStatus(key, version) {
                var r = 0;

                ForEachRowChange(function(bIsInsert, rowChange) {
                    r = key in rowChange.recordKeys ? bIsInsert ? 1 : -1 : r;
                    return true;
                }, version, true, false);
                return r;
            }
            function ForEachRowChange(fnApply, version, bScanChangesAtAndBefore, bScanChangesAtAndAfter) {
                for (var i = 0; i < rowDeletes.length && (bScanChangesAtAndAfter || rowDeletes[i].version <= version) || i < rowInserts.length && (bScanChangesAtAndAfter && rowInserts[i].version <= version); i++) {
                    if (i < rowInserts.length && (bScanChangesAtAndBefore || rowInserts[i].version > version)) {
                        if (!fnApply(true, rowInserts[i])) {
                            break;
                        }
                    }
                    if (i < rowDeletes.length && (bScanChangesAtAndBefore || rowDeletes[i].version > version)) {
                        if (!fnApply(false, rowDeletes[i])) {
                            break;
                        }
                    }
                }
            }
            function AddChange(rowChanges, version, change) {
                var idx = SP.Internal.JS.LowerBound(rowChanges, version, 'version');

                if (idx == rowChanges.length || rowChanges[idx].version != version) {
                    rowChanges.splice(idx, 0, EmptyVersionEntry(version));
                }
                var entry = rowChanges[idx];

                entry.changes.push(change);
                entry.recordKeys[change.recordKey] = null;
            }
            function EmptyVersionEntry(version) {
                return {
                    version: version,
                    changes: [],
                    recordKeys: {}
                };
            }
            Init();
        }
        function PropChangeManager() {
            var propChanges;

            this.Clear = function() {
                Init();
            };
            this.GetChange = function(version, optRecordsToSearch, bGetPreviousValue) {
                var r = [];
                var toSearch = optRecordsToSearch != null ? optRecordsToSearch : SP.Internal.JS.ConvertSetKeysToArray(propChanges);

                for (var idx in toSearch) {
                    recordKey = toSearch[idx];
                    ApplyToItemsInRecord(recordKey, version, function(fieldKey, changeInfo) {
                        if (changeInfo.item != null) {
                            var item = bGetPreviousValue ? changeInfo.prevItem : changeInfo.item;

                            r.push({
                                type: SP.JsGrid.Internal.VersionManager.ChangeType.Prop,
                                recordKey: recordKey,
                                fieldKey: fieldKey,
                                propUpdate: item.value,
                                validationState: item.validationState == null ? SP.JsGrid.ValidationState.Valid : item.validationState
                            });
                        }
                    }, true);
                }
                return r;
            };
            this.TryReadPropForVersion = function(recordKey, fieldKey, version) {
                if (recordKey in propChanges && fieldKey in propChanges[recordKey]) {
                    var changeInfo = GetChangeFromList(propChanges[recordKey][fieldKey], version);
                    var item = changeInfo.item == null ? changeInfo.prevItem : changeInfo.item;

                    return item != null ? item.value : null;
                }
                return null;
            };
            this.ChangeKeys = function(oldRecordKey, newRecordKey) {
                propChanges[newRecordKey] = propChanges[oldRecordKey];
                delete propChanges[oldRecordKey];
            };
            this.GetEarliestChangeKeyForRecord = function(recordKey) {
                var r;
                var changes = propChanges[recordKey];

                if (changes != null) {
                    for (var field in changes) {
                        var list = changes[field];
                        var version = list[0].version != baselineVersion ? list[0].version : list[1].version;

                        r = r == null || version < r ? version : r;
                    }
                }
                return r;
            };
            this.ClearAllPropChangesForRecord = function(recordKey) {
                delete propChanges[recordKey];
            };
            this.MarkPropUpdateInvalid = function(recordKey, fieldKey, changeKey, optErrorMsg) {
                var r = false;
                var version = changeKey.GetVersionNumber();
                var list = propChanges[recordKey][fieldKey];

                if (list != null) {
                    var changeInfo = GetChangeFromList(list, version);

                    if (changeInfo.item != null) {
                        if (changeInfo.item.validationState != SP.JsGrid.ValidationState.Invalid) {
                            changeInfo.item.validationState = SP.JsGrid.ValidationState.Invalid;
                            if (optErrorMsg != null) {
                                changeInfo.item.optErrorMsg = optErrorMsg;
                            }
                            fnDoPhysicalPropChange(recordKey, fieldKey, changeInfo.item.value, changeKey, SP.JsGrid.ValidationState.Invalid, false, null, optErrorMsg, GetOldValue(list, changeInfo.idx, false));
                        }
                        r = true;
                    }
                }
                return r;
            };
            this.AddPropChange = function(recordKey, fieldKey, changeKey, propUpdate, validationState, optErrorMsg) {
                var version = changeKey.GetVersionNumber();
                var addingBaselineVersion = version == baselineVersion;
                var item = null;
                var idx = null;

                if (!addingBaselineVersion) {
                    if (propChanges[recordKey] == null) {
                        propChanges[recordKey] = {};
                    }
                    var list = propChanges[recordKey][fieldKey];

                    if (list == null) {
                        var record = fnGetRecord(recordKey);
                        var oldValue = null;

                        if (record != null) {
                            oldValue = GetPropUpdateFromRecord(record, fieldKey);
                        }
                        list = (propChanges[recordKey][fieldKey] = [{
                            version: baselineVersion,
                            value: oldValue
                        }]);
                    }
                    var changeInfo = GetChangeFromList(list, version);

                    idx = changeInfo.idx;
                    if (changeInfo.item == null) {
                        MinimizePropUpdate(recordKey, fieldKey, propUpdate);
                        var toInsert = {
                            version: version,
                            value: propUpdate
                        };

                        if (validationState != SP.JsGrid.ValidationState.Valid) {
                            toInsert.validationState = validationState;
                        }
                        if (optErrorMsg != null) {
                            toInsert.optErrorMsg = optErrorMsg;
                        }
                        list.splice(idx, 0, toInsert);
                    }
                    else {
                        item = changeInfo.item;
                    }
                }
                else {
                    var changeInfo = propChanges[recordKey] != null && propChanges[recordKey][fieldKey] != null ? GetChangeFromList(propChanges[recordKey][fieldKey], version) : null;

                    if (changeInfo != null) {
                        Sys.Debug.assert(changeInfo.idx == 0);
                        Sys.Debug.assert(changeInfo.item != null);
                        item = changeInfo.item;
                        idx = changeInfo.idx;
                    }
                }
                if (item != null) {
                    item.value = propUpdate;
                    if (validationState != item.validationState) {
                        if (validationState == null || validationState == SP.JsGrid.ValidationState.Valid) {
                            delete item.validationState;
                        }
                        else {
                            item.validationState = validationState;
                        }
                    }
                }
                var list = idx == null ? null : propChanges[recordKey][fieldKey];

                if (curVersion >= version && (idx == null || idx == list.length - 1 || list[idx + 1].version > curVersion)) {
                    fnDoPhysicalPropChange(recordKey, fieldKey, propUpdate, changeKey, validationState, false, null, optErrorMsg, GetOldValue(list, idx, false));
                }
            };
            function GetOldValue(list, idx, bIsUndo) {
                var r;
                var idxToLookAt = bIsUndo ? idx + 1 : idx - 1;

                if (idxToLookAt >= 0 && idxToLookAt < list.length) {
                    r = list[idxToLookAt].value;
                }
                return r;
            }
            function GetPropUpdateFromRecord(record, fieldKey) {
                var propType = objBag.controller.GetPropType(record.key(), fieldKey);
                var trackingMode = propType && SP.JsGrid.Internal.Property.GetUpdateTrackingMode(propType, objBag.jsGridParams.tableViewParams.gridFieldMap[fieldKey]);
                var dataValue = record.HasDataValue(fieldKey) && trackingMode != SP.JsGrid.UpdateTrackingMode.PropLocalized ? record.GetDataValue(fieldKey) : SP.JsGrid.EmptyValue;
                var localizedValue = record.HasLocalizedValue(fieldKey) && trackingMode != SP.JsGrid.UpdateTrackingMode.PropData ? record.GetLocalizedValue(fieldKey) : SP.JsGrid.EmptyValue;

                return new SP.JsGrid.Internal.PropertyUpdate(dataValue, localizedValue);
            }
            function MinimizePropUpdate(recordKey, fieldKey, newPU) {
                var propType = objBag.controller.GetPropType(recordKey, fieldKey);
                var trackingMode = propType && propType.GetUpdateTrackingMode && propType.GetUpdateTrackingMode();

                if (propType != null && trackingMode != null) {
                    if (trackingMode == SP.JsGrid.UpdateTrackingMode.PropLocalized && newPU.data != SP.JsGrid.EmptyValue) {
                        newPU.data = SP.JsGrid.EmptyValue;
                    }
                    else if (trackingMode == SP.JsGrid.UpdateTrackingMode.PropData && newPU.localized != SP.JsGrid.EmptyValue) {
                        newPU.localized = SP.JsGrid.EmptyValue;
                    }
                }
            }
            this.ApplyChangesToRecord = function(record) {
                if (record.key() in propChanges) {
                    ApplyToItemsInRecord(record.key(), curVersion, function(fieldKey, changeInfo) {
                        var list = propChanges[record.key()][fieldKey];
                        var item = changeInfo.item == null ? changeInfo.prevItem : changeInfo.item;

                        if (item != null && record.GetProp(fieldKey) != null) {
                            var changeIdx = SP.Internal.JS.LowerBound(changeMap, changeInfo.version, 'version');

                            fnDoPhysicalPropChange(record.key(), fieldKey, item.value, changeMap[changeIdx].key, item.validationState == null ? SP.JsGrid.ValidationState.Valid : item.validationState, true, record, item.optErrorMsg, GetOldValue(list, changeIdx, false));
                        }
                    }, true);
                }
            };
            this.VacateChange = function(version) {
                for (var recordKey in propChanges) {
                    ApplyToItemsInRecord(recordKey, version, function(fieldKey, changeInfo) {
                        var list = propChanges[recordKey][fieldKey];

                        Sys.Debug.assert(list.length > 1);
                        if (list.length == 2) {
                            Sys.Debug.assert(list[0].version == baselineVersion);
                            Sys.Debug.assert(list[1].version == version);
                            DeleteEntry(recordKey, fieldKey);
                        }
                        else {
                            list.splice(changeInfo.idx, 1);
                        }
                    });
                }
            };
            this.SynchronizeToChange = function(changeKey, recordsToSearch) {
                var version = changeKey.GetVersionNumber();
                var toSearch = recordsToSearch != null ? recordsToSearch : SP.Internal.JS.ConvertSetKeysToArray(propChanges);

                for (var idx in toSearch) {
                    var recordKey = toSearch[idx];

                    ApplyToItemsInRecord(recordKey, version, function(fieldKey, changeInfo) {
                        var item = changeInfo.item == null ? changeInfo.prevItem : changeInfo.item;

                        if (item != null && item.version > curVersion) {
                            fnDoPhysicalPropChange(recordKey, fieldKey, item.value, changeKey, item.validationState == null ? SP.JsGrid.ValidationState.Valid : item.validationState, false, null, item.optErrorMsg, GetOldValue(propChanges[recordKey][fieldKey], changeInfo.idx, false));
                        }
                    }, true);
                }
            };
            this.RollBackChange = function(changeKey, recordsToSearch) {
                var version = changeKey.GetVersionNumber();
                var toSearch = recordsToSearch != null ? recordsToSearch : SP.Internal.JS.ConvertSetKeysToArray(propChanges);

                for (var idx in toSearch) {
                    recordKey = toSearch[idx];
                    ApplyToItemsInRecord(recordKey, version, function(fieldKey, changeInfo) {
                        Sys.Debug.assert(changeInfo.idx > 0);
                        var changeEntry = propChanges[recordKey][fieldKey][changeInfo.idx - 1];
                        var changeIdx = SP.Internal.JS.LowerBound(changeMap, changeEntry.version, 'version');
                        var changeKey = changeMap[changeIdx].key;

                        fnDoPhysicalPropChange(recordKey, fieldKey, changeEntry.value, changeKey, changeEntry.validationState == null ? SP.JsGrid.ValidationState.Valid : changeEntry.validationState, false, null, changeEntry.optErrorMsg, GetOldValue(propChanges[recordKey][fieldKey], changeInfo.idx - 1, true));
                    });
                }
            };
            this.AdvanceBaseline = function(newBaseline) {
                for (var recordKey in propChanges) {
                    for (var fieldKey in propChanges[recordKey]) {
                        var list = propChanges[recordKey][fieldKey];
                        var idx = SP.Internal.JS.LowerBound(list, newBaseline, 'version');

                        for (var i = 1; i < idx; i++) {
                            list.shift();
                        }
                        if (list.length == 1) {
                            DeleteEntry(recordKey, fieldKey);
                        }
                        else {
                            list[0].version = newBaseline;
                        }
                    }
                }
            };
            function Init() {
                propChanges = {};
            }
            function DeleteEntry(recordKey, fieldKey) {
                delete propChanges[recordKey][fieldKey];
                if (SP.Internal.JS.IsAssocArrayEmpty(propChanges[recordKey])) {
                    delete propChanges[recordKey];
                }
            }
            function ApplyToItemsInRecord(recordKey, version, fnApplyToChangeItem, bApplyIfItemNotPresent) {
                var changesForRecord = propChanges[recordKey];

                if (changesForRecord != null) {
                    for (var fieldKey in changesForRecord) {
                        var changeInfo = GetChangeFromList(changesForRecord[fieldKey], version);

                        if (changeInfo.item != null || bApplyIfItemNotPresent) {
                            fnApplyToChangeItem(fieldKey, changeInfo);
                        }
                    }
                }
            }
            function GetChangeFromList(list, version) {
                var idx = SP.Internal.JS.LowerBound(list, version, 'version');
                var item = list[idx] != null && list[idx].version == version ? list[idx] : null;
                var prevItem = idx > 0 && idx <= list.length ? list[idx - 1] : null;

                return {
                    idx: idx,
                    item: item,
                    prevItem: prevItem
                };
            }
            Init();
        }
    };
    SP.JsGrid.Internal.VersionManager.ChangeType = {
        Insert: 0,
        Level: 1,
        Prop: 2,
        Delete: 3
    };
    ;
    InvalidChangeKeyError.prototype = new Error();
    InvalidChangeKeyError.prototype.constructor = InvalidChangeKeyError;
    SP.JsGrid.WebMethodDataSource = function(populatingWebMethod, initWebMethod, webMethodMgr, jsGridControl, fnRefreshRowViewCallback, optFnGetPropType, serializeWithJson) {
        var _this = this;
        var groupingRecords = null;
        var curView;
        var hierarchyMode;
        var keyColumnName;
        var jsGridParams;
        var rememberedRecordKeyHash = null;
        var inVirtualMode = false;

        this.recordFactory;
        this.tableCache;
        this.populatingWebMethod = populatingWebMethod;
        this.initWebMethod = initWebMethod;
        this.RefreshTableView = function(bPreserveTableCache, optfnSucessCallback, fnFailureCallback) {
            var tableViewParams = new SP.JsGrid.JsGridControl.TableViewParameters();
            var requestType = SP.JsGrid.DeserializationMode.TableView;

            return webMethodMgr[this.initWebMethod.name](GetArguments(this.initWebMethod, requestType), function(results) {
                var deserializer = new SP.JsGrid.Deserializer(results, requestType, keyColumnName);

                rememberedRecordKeyHash = deserializer.recordKeyHash;
                if (!bPreserveTableCache) {
                    jsGridControl.ClearTableView();
                    _this.tableCache.Clear();
                }
                ProcessNewTableView(deserializer, tableViewParams, true);
                if (optfnSucessCallback != null) {
                    optfnSucessCallback(tableViewParams, deserializer.additionalParams);
                }
            }, fnFailureCallback);
        };
        this.RefreshRowView = function(bPreserveTableCache, optfnSucessCallback, fnFailureCallback) {
            var requestType = SP.JsGrid.DeserializationMode.RowView;

            return webMethodMgr[this.populatingWebMethod.name](GetArguments(this.populatingWebMethod, requestType), function(results) {
                var deserializer = new SP.JsGrid.Deserializer(results, requestType, keyColumnName);

                rememberedRecordKeyHash = deserializer.recordKeyHash;
                var rowViewParams = deserializer.InitJsGridRowViewParams();

                if (!bPreserveTableCache) {
                    _this.tableCache.Clear();
                }
                ProcessNewRowView(deserializer, rowViewParams);
                if (optfnSucessCallback != null) {
                    optfnSucessCallback(rowViewParams, deserializer.additionalParams);
                }
            }, fnFailureCallback);
        };
        this.GetAutoFilterEntries = function(columnKeys, fnSucessCallback, fnFailureCallback) {
            var requestType = SP.JsGrid.DeserializationMode.AutoFilter;

            return webMethodMgr[this.populatingWebMethod.name](GetArguments(this.populatingWebMethod, requestType, columnKeys), function(results) {
                var deserializer = new SP.JsGrid.Deserializer(results, requestType, keyColumnName);

                fnSucessCallback(deserializer.autoFilterEntries);
            }, fnFailureCallback);
        };
        this.BeginFullLoad = function(fnInitComplete, fnFailureCallback, optGridParams) {
            var requestType = SP.JsGrid.DeserializationMode.Full;

            return webMethodMgr[this.initWebMethod.name](GetArguments(this.initWebMethod, requestType), function(result) {
                var deserializer = new SP.JsGrid.Deserializer(result, requestType);

                if (deserializer.minimalInfo != null)
                    inVirtualMode = true;
                rememberedRecordKeyHash = deserializer.recordKeyHash;
                keyColumnName = deserializer.keyColumnName;
                jsGridParams = deserializer.InitJsGridParams(optGridParams);
                jsGridParams.tableCache = (_this.tableCache = new SP.JsGrid.TableCache(GetData, ConvertDataToRecords));
                _this.tableCache.SetConvertAllBlobsToRecords(true);
                _this.tableCache.SetKeepDataInBlobCache(false);
                _this.tableCache.SetMaxRecordCount(1000);
                ProcessNewTableView(deserializer, jsGridParams.tableViewParams, false);
                fnInitComplete(jsGridParams, deserializer.additionalParams);
            }, fnFailureCallback);
        };
        this.AddColumn = function(gridField) {
            this.recordFactory.gridFieldMap[gridField.key] = gridField;
            var data = {};
            var values = this.tableCache.GetView();

            for (var idx in values) {
                data[values[idx]] = {
                    isProp: true,
                    prop: SP.JsGrid.Property.MakeProperty(undefined, undefined, gridField.hasDataValue, gridField.hasLocalizedValue, gridField.GetPropType())
                };
            }
            this.tableCache.AddColumn(gridField.key, data);
        };
        function ProcessNewTableView(deserializer, jsGridTableViewParams, bInit) {
            if (bInit) {
                deserializer.InitJsGridTableViewParams(jsGridTableViewParams);
            }
            if (keyColumnName != deserializer.keyColumnName) {
                keyColumnName = deserializer.keyColumnName;
            }
            _this.recordFactory = new SP.JsGrid.RecordFactory(deserializer.gridFieldMap, keyColumnName, optFnGetPropType);
            ProcessNewRowView(deserializer, jsGridTableViewParams.rowViewParams);
        }
        function ProcessNewRowView(deserializer, rowViewParams) {
            if (groupingRecords != null) {
                _this.tableCache.ClearRecords(groupingRecords);
            }
            _this.tableCache.AddRawDataToCache(SP.Internal.JS.ConvertSetKeysToArray(deserializer.data), deserializer.data);
            groupingRecords = deserializer.viewDependentKeys;
            deserializer.InitCellStyles(jsGridParams.styleManager);
        }
        function GetArguments(webMethod, requestType, optAutoFilterColumnKeys, optRanges) {
            var r = webMethod.fnGenerateArgs(requestType);
            var fnSerializer = serializeWithJson ? function(r) {
                return r;
            } : GenerateXMLArray;
            var args = r.gridSerializerArgs == null ? {} : r.gridSerializerArgs;

            Sys.Debug.assert(args.PagingInfo == null);
            if (!inVirtualMode) {
                if (args.PagingInfo == null) {
                    var pagingInfo = optRanges != null ? GenerateRangeStrings(optRanges) : ['FirstVisible:40'];

                    args.PagingInfo = fnSerializer(pagingInfo, 'string');
                }
            }
            else {
                if (args.PagingInfo == null)
                    args.PagingInfo = fnSerializer(optRanges != null ? {
                        pos: optRanges[0].pos,
                        count: optRanges[0].count
                    } : {
                        pos: 0,
                        count: 40
                    });
            }
            args.RequestType = requestType;
            if (rememberedRecordKeyHash != null) {
                args.RememberedRecordKeyHash = rememberedRecordKeyHash;
            }
            if (optAutoFilterColumnKeys != null) {
                args.AutoFilterColumnKeys = fnSerializer(optAutoFilterColumnKeys, 'string');
            }
            r.gridSerializerArgs = serializeWithJson ? args : GenerateXmlArgString(args);
            return r;
            function GenerateXmlArgString(argsToConvert) {
                var buffer = [];

                for (var i in argsToConvert) {
                    buffer.push('<', i, '>', argsToConvert[i], '</', i, '>');
                }
                return buffer.join('');
            }
        }
        function ConvertDataToRecords(data, keys) {
            var r = {};

            for (var i in keys) {
                if (keys[i] in data) {
                    var rawRecInfo = data[keys[i]];

                    r[keys[i]] = _this.recordFactory.MakeRecord(rawRecInfo.data, rawRecInfo.localized);
                }
            }
            return r;
        }
        function GetData(ranges, callback) {
            function ProcessReturnedData(result) {
                var deserializer = new SP.JsGrid.Deserializer(result, SP.JsGrid.DeserializationMode.Slice, keyColumnName);

                rememberedRecordKeyHash = deserializer.recordKeyHash;
                if (deserializer.recordKeyOrderChanged) {
                    deserializer = new SP.JsGrid.Deserializer(result, SP.JsGrid.DeserializationMode.RowView, keyColumnName);
                    var rowViewParams = deserializer.InitJsGridRowViewParams();

                    ProcessNewRowView(deserializer, rowViewParams);
                    if (fnRefreshRowViewCallback != null) {
                        fnRefreshRowViewCallback(rowViewParams, deserializer.additionalParams);
                    }
                }
                else if (deserializer.minimalInfo == null) {
                    if (deserializer.viewDependentKeys != null) {
                        groupingRecords = groupingRecords == null ? deserializer.viewDependentKeys : groupingRecords.concat(deserializer.viewDependentKeys);
                    }
                }
                var keys = SP.Internal.JS.ConvertSetKeysToArray(deserializer.data);

                Sys.Debug.assert(inVirtualMode == deserializer.minimalInfo != null);
                if (inVirtualMode) {
                    for (var i = 0; i < keys.length; i++) {
                        var key = _this.tableCache.RecordIdxToKey(ranges[0].pos + i);

                        jsGridControl.ChangeKeys(key, keys[i]);
                    }
                }
                callback([{
                    data: deserializer.data,
                    keys: keys
                }]);
            }
            return webMethodMgr[_this.populatingWebMethod.name](GetArguments(_this.populatingWebMethod, SP.JsGrid.DeserializationMode.Slice, null, ranges), ProcessReturnedData, function() {
                callback(null);
            });
        }
        function GenerateRangeStrings(ranges) {
            var r = [];

            for (var i = 0; i < ranges.length; i++) {
                r.push(ranges[i].pos + ',' + ranges[i].count);
            }
            return r;
        }
    };
    if (typeof Sys != "undefined" && Sys && Sys.Application) {
        Sys.Application.notifyScriptLoaded();
    }
    if (typeof NotifyScriptLoadedAndExecuteWaitingJobs == "function") {
        NotifyScriptLoadedAndExecuteWaitingJobs("jsgrid.js");
    }
}
function CommandManagerError(message) {
    this.message = message ? message : "Command Manager Error";
    this.name = "CommandManagerError";
}
var bpt;

function AdjustPrintPreviewGridDivWidth(columns, bRowHeadersEnabled, bGanttEnabled, ganttPaneWidth) {
    var jsGridDivWidth = 0;

    for (var idx = 0; idx < columns.length; ++idx) {
        if (columns[idx].isVisible) {
            jsGridDivWidth += columns[idx].width;
        }
    }
    jsGridDivWidth += bRowHeadersEnabled ? SP.JsGrid.Internal.RowHeaderWidth : 0;
    jsGridDivWidth += bGanttEnabled ? SP.JsGrid.Internal.SplitterWidth + ganttPaneWidth : 0;
    jsGridDivWidth += 2;
    ($get("jsgrid_div_element")).style.width = jsGridDivWidth + "px";
    return jsGridDivWidth;
}
function InvalidChangeKeyError(message) {
    this.message = message ? message : "Invalid Change Key Error";
    this.name = "InvalidChangeKeyError";
}
$_global_jsgrid();
