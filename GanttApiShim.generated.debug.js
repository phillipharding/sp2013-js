

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
Type.registerNamespace("SP.SPGantt.InstrumentedApi");

SP.SPGantt.InstrumentedApi.ShimPlaceholder = {};


SP.SPGantt.InstrumentedApi.SPGantt.Shim = function()
{

}

SP.SPGantt.InstrumentedApi.SPGantt.Shim.Wrap = function(wrappedImpl)
{
   function CallMethod(shim, name, params, bIsAsync, fnCallback, bCausesStateUpdate)
   {
      var callId = JsApi.InstrumentationManager.RaiseInvokingEvent(shim, name);

      if (bIsAsync)
      {
          params.push(HandleCallback);
      }

      var res = shim._impl[name].apply(shim._impl, params);

      if (!bIsAsync)
      {
         HandleCallback(true);
      }

      return res;

      // internal functions follow
      function HandleCallback(success, res)
      {
         JsApi.InstrumentationManager.RaiseEndedEvent(callId);

         if (bIsAsync)
         {
            if (fnCallback != null)
            {
               fnCallback(success, res);
            }
         }

         if (bCausesStateUpdate)
         {
            JsApi.ExtensibilityManager.NotifyStateUpdated(shim._impl);
         }
      }
   }
      wrappedImpl.get_SelectedItems = function()
      {
         return CallMethod(this, "get_SelectedItems", [], false, null, false);
      };
      wrappedImpl.get_SelectedItemsIncludingProvisionalItems = function()
      {
         return CallMethod(this, "get_SelectedItemsIncludingProvisionalItems", [], false, null, false);
      };
      wrappedImpl.get_ContiguousSelectedItemsWithoutEntryItems = function()
      {
         return CallMethod(this, "get_ContiguousSelectedItemsWithoutEntryItems", [], false, null, false);
      };
      wrappedImpl.get_IsInsertProvisionalItemBeforeFocusEnabled = function()
      {
         return CallMethod(this, "get_IsInsertProvisionalItemBeforeFocusEnabled", [], false, null, false);
      };
      wrappedImpl.get_IsInsertProvisionalChildOfFocusedItemEnabled = function()
      {
         return CallMethod(this, "get_IsInsertProvisionalChildOfFocusedItemEnabled", [], false, null, false);
      };
      wrappedImpl.get_ItemCount = function()
      {
         return CallMethod(this, "get_ItemCount", [], false, null, false);
      };
      wrappedImpl.get_Columns = function()
      {
         return CallMethod(this, "get_Columns", [], false, null, false);
      };
      wrappedImpl.get_RequiredColumnKeys = function()
      {
         return CallMethod(this, "get_RequiredColumnKeys", [], false, null, false);
      };
      wrappedImpl.get_IsReadOnly = function()
      {
         return CallMethod(this, "get_IsReadOnly", [], false, null, false);
      };
      wrappedImpl.ZoomInGantt = function()
      {
         return CallMethod(this, "ZoomInGantt", [], false, null, false);
      };
      wrappedImpl.ZoomOutGantt = function()
      {
         return CallMethod(this, "ZoomOutGantt", [], false, null, false);
      };
      wrappedImpl.ScrollGanttToFocusedItem = function()
      {
         return CallMethod(this, "ScrollGanttToFocusedItem", [], false, null, false);
      };
      wrappedImpl.AddItemsToTimeline = function(itemIds)
      {
         return CallMethod(this, "AddItemsToTimeline", [itemIds], false, null, false);
      };
      wrappedImpl.LaunchEditItemFormForItem = function(itemId)
      {
         return CallMethod(this, "LaunchEditItemFormForItem", [itemId], false, null, false);
      };
      wrappedImpl.LaunchViewItemFormForItem = function(itemId)
      {
         return CallMethod(this, "LaunchViewItemFormForItem", [itemId], false, null, false);
      };
      wrappedImpl.MoveItemsUp = function(itemIds, fnCallback)
      {
         return CallMethod(this, "MoveItemsUp", [itemIds], true, fnCallback, true);
      };
      wrappedImpl.MoveItemsDown = function(itemIds, fnCallback)
      {
         return CallMethod(this, "MoveItemsDown", [itemIds], true, fnCallback, true);
      };
      wrappedImpl.ToggleExpandCollapse = function(itemId)
      {
         return CallMethod(this, "ToggleExpandCollapse", [itemId], false, null, false);
      };
      wrappedImpl.GetNodeExpandCollapseState = function(itemId)
      {
         return CallMethod(this, "GetNodeExpandCollapseState", [itemId], false, null, false);
      };
      wrappedImpl.InsertProvisionalItemBeforeFocusedItem = function()
      {
         return CallMethod(this, "InsertProvisionalItemBeforeFocusedItem", [], false, null, false);
      };
      wrappedImpl.InsertProvisionalChildOfFocusedItem = function()
      {
         return CallMethod(this, "InsertProvisionalChildOfFocusedItem", [], false, null, false);
      };
      wrappedImpl.InsertItemAtEnd = function(initialValues, fnCallback)
      {
         return CallMethod(this, "InsertItemAtEnd", [initialValues], true, fnCallback, true);
      };
      wrappedImpl.InsertItem = function(beforeRecordKey, initialValues, fnCallback)
      {
         return CallMethod(this, "InsertItem", [beforeRecordKey,initialValues], true, fnCallback, true);
      };
      wrappedImpl.DeleteItems = function(itemIds, fnCallback)
      {
         return CallMethod(this, "DeleteItems", [itemIds], true, fnCallback, true);
      };
      wrappedImpl.IndentItems = function(itemIds, fnCallback)
      {
         return CallMethod(this, "IndentItems", [itemIds], true, fnCallback, true);
      };
      wrappedImpl.OutdentItems = function(itemIds, fnCallback)
      {
         return CallMethod(this, "OutdentItems", [itemIds], true, fnCallback, true);
      };
      wrappedImpl.GetOutlineLevel = function(itemId, fnCallback)
      {
         return CallMethod(this, "GetOutlineLevel", [itemId], true, fnCallback, true);
      };
      wrappedImpl.GetViewIndexOfItem = function(itemId)
      {
         return CallMethod(this, "GetViewIndexOfItem", [itemId], false, null, false);
      };
      wrappedImpl.ReadValue = function(itemId, columnKey, fnCallback)
      {
         return CallMethod(this, "ReadValue", [itemId,columnKey], true, fnCallback, true);
      };
      wrappedImpl.TrySelectItem = function(itemId)
      {
         return CallMethod(this, "TrySelectItem", [itemId], false, null, false);
      };
};


if( window.Sys != null && Sys.Application != null ){
   Sys.Application.notifyScriptLoaded();
}

NotifyScriptLoadedAndExecuteWaitingJobs("GanttApiShim.generated.js");

