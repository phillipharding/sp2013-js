

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
Type.registerNamespace("SP.WorkManagement.OM");

SP.WorkManagement.OM.ShimPlaceholder = {};


SP.WorkManagement.OM.EditTask.Shim = function()
{

}

SP.WorkManagement.OM.EditTask.Shim.Wrap = function(wrappedImpl)
{
   function CallMethod(shim, name, params, bIsAsync, fnCallback, bCausesStateUpdate)
   {
      var callId = JsApi.InstrumentationManager.RaiseInvokingEvent(shim, name);

      if (bIsAsync)
      {
          params.push(HandleCallback);
      }

      var res = shim._impl[name].apply(shim._impl, params);

      if (!bIsAsync)
      {
         HandleCallback(true);
      }

      return res;

      // internal functions follow
      function HandleCallback(success, res)
      {
         JsApi.InstrumentationManager.RaiseEndedEvent(callId);

         if (bIsAsync)
         {
            if (fnCallback != null)
            {
               fnCallback(success, res);
            }
         }

         if (bCausesStateUpdate)
         {
            JsApi.ExtensibilityManager.NotifyStateUpdated(shim._impl);
         }
      }
   }
      wrappedImpl.get_HasLoaded = function()
      {
         return CallMethod(this, "get_HasLoaded", [], false, null, false);
      };
      wrappedImpl.get_TaskName = function()
      {
         return CallMethod(this, "get_TaskName", [], false, null, false);
      };
      wrappedImpl.set_TaskName = function(value)
      {
         return CallMethod(this, "set_TaskName", [value], false, null, true);
      };
      wrappedImpl.get_StartDate = function()
      {
         return CallMethod(this, "get_StartDate", [], false, null, false);
      };
      wrappedImpl.set_StartDate = function(value)
      {
         return CallMethod(this, "set_StartDate", [value], false, null, true);
      };
      wrappedImpl.get_DueDate = function()
      {
         return CallMethod(this, "get_DueDate", [], false, null, false);
      };
      wrappedImpl.set_DueDate = function(value)
      {
         return CallMethod(this, "set_DueDate", [value], false, null, true);
      };
      wrappedImpl.get_Completed = function()
      {
         return CallMethod(this, "get_Completed", [], false, null, false);
      };
      wrappedImpl.set_Completed = function(value)
      {
         return CallMethod(this, "set_Completed", [value], false, null, true);
      };
      wrappedImpl.get_Description = function()
      {
         return CallMethod(this, "get_Description", [], false, null, false);
      };
      wrappedImpl.set_Description = function(value)
      {
         return CallMethod(this, "set_Description", [value], false, null, true);
      };
      wrappedImpl.SaveAndClose = function(fnCallback)
      {
         return CallMethod(this, "SaveAndClose", [], true, fnCallback, true);
      };
      wrappedImpl.Save = function(fnCallback)
      {
         return CallMethod(this, "Save", [], true, fnCallback, true);
      };
      wrappedImpl.Close = function()
      {
         return CallMethod(this, "Close", [], false, null, false);
      };
      wrappedImpl.Cancel = function()
      {
         return CallMethod(this, "Cancel", [], false, null, false);
      };
};


SP.WorkManagement.OM.MyTasksDashboard.Shim = function()
{

}

SP.WorkManagement.OM.MyTasksDashboard.Shim.Wrap = function(wrappedImpl)
{
   function CallMethod(shim, name, params, bIsAsync, fnCallback, bCausesStateUpdate)
   {
      var callId = JsApi.InstrumentationManager.RaiseInvokingEvent(shim, name);

      if (bIsAsync)
      {
          params.push(HandleCallback);
      }

      var res = shim._impl[name].apply(shim._impl, params);

      if (!bIsAsync)
      {
         HandleCallback(true);
      }

      return res;

      // internal functions follow
      function HandleCallback(success, res)
      {
         JsApi.InstrumentationManager.RaiseEndedEvent(callId);

         if (bIsAsync)
         {
            if (fnCallback != null)
            {
               fnCallback(success, res);
            }
         }

         if (bCausesStateUpdate)
         {
            JsApi.ExtensibilityManager.NotifyStateUpdated(shim._impl);
         }
      }
   }
      wrappedImpl.get_CurrentView = function()
      {
         return CallMethod(this, "get_CurrentView", [], false, null, false);
      };
      wrappedImpl.get_IsGrouped = function()
      {
         return CallMethod(this, "get_IsGrouped", [], false, null, false);
      };
      wrappedImpl.NewTask = function()
      {
         return CallMethod(this, "NewTask", [], false, null, false);
      };
      wrappedImpl.SwitchView = function(view, fnCallback)
      {
         return CallMethod(this, "SwitchView", [view], true, fnCallback, true);
      };
      wrappedImpl.GetTaskList = function(type)
      {
         return CallMethod(this, "GetTaskList", [type], false, null, false);
      };
      wrappedImpl.GetLocationKeys = function()
      {
         return CallMethod(this, "GetLocationKeys", [], false, null, false);
      };
      wrappedImpl.SetLocationFilter = function(locationId, fnCallback)
      {
         return CallMethod(this, "SetLocationFilter", [locationId], true, fnCallback, true);
      };
      wrappedImpl.RefreshAllLists = function(fnCallback)
      {
         return CallMethod(this, "RefreshAllLists", [], true, fnCallback, true);
      };
      wrappedImpl.RefreshTimeline = function(fnCallback)
      {
         return CallMethod(this, "RefreshTimeline", [], true, fnCallback, true);
      };
      wrappedImpl.RefreshAllListsExcept = function(taskListType, fnCallback)
      {
         return CallMethod(this, "RefreshAllListsExcept", [taskListType], true, fnCallback, true);
      };
      wrappedImpl.SetSearchString = function(searchValue, fnCallback)
      {
         return CallMethod(this, "SetSearchString", [searchValue], true, fnCallback, true);
      };
      wrappedImpl.SetGrouping = function(groupingEnabled, fnCallback)
      {
         return CallMethod(this, "SetGrouping", [groupingEnabled], true, fnCallback, true);
      };
      wrappedImpl.ShowExchangeSyncSettingsDialog = function()
      {
         return CallMethod(this, "ShowExchangeSyncSettingsDialog", [], false, null, false);
      };
};


SP.WorkManagement.OM.SettingsPage.Shim = function()
{

}

SP.WorkManagement.OM.SettingsPage.Shim.Wrap = function(wrappedImpl)
{
   function CallMethod(shim, name, params, bIsAsync, fnCallback, bCausesStateUpdate)
   {
      var callId = JsApi.InstrumentationManager.RaiseInvokingEvent(shim, name);

      if (bIsAsync)
      {
          params.push(HandleCallback);
      }

      var res = shim._impl[name].apply(shim._impl, params);

      if (!bIsAsync)
      {
         HandleCallback(true);
      }

      return res;

      // internal functions follow
      function HandleCallback(success, res)
      {
         JsApi.InstrumentationManager.RaiseEndedEvent(callId);

         if (bIsAsync)
         {
            if (fnCallback != null)
            {
               fnCallback(success, res);
            }
         }

         if (bCausesStateUpdate)
         {
            JsApi.ExtensibilityManager.NotifyStateUpdated(shim._impl);
         }
      }
   }
      wrappedImpl.GetStatus = function()
      {
         return CallMethod(this, "GetStatus", [], false, null, false);
      };
      wrappedImpl.Save = function()
      {
         return CallMethod(this, "Save", [], false, null, false);
      };
      wrappedImpl.GetEnabled = function(fieldName)
      {
         return CallMethod(this, "GetEnabled", [fieldName], false, null, false);
      };
      wrappedImpl.SetEnabled = function(fieldName, value)
      {
         return CallMethod(this, "SetEnabled", [fieldName,value], false, null, false);
      };
      wrappedImpl.GetField = function(fieldName)
      {
         return CallMethod(this, "GetField", [fieldName], false, null, false);
      };
      wrappedImpl.SetField = function(fieldName, value)
      {
         return CallMethod(this, "SetField", [fieldName,value], false, null, false);
      };
      wrappedImpl.GetLocationsDisplayInfo = function()
      {
         return CallMethod(this, "GetLocationsDisplayInfo", [], false, null, false);
      };
      wrappedImpl.SetLocationDisplayInfo = function(location)
      {
         return CallMethod(this, "SetLocationDisplayInfo", [location], false, null, false);
      };
};


SP.WorkManagement.OM.TaskList.Shim = function()
{

}

SP.WorkManagement.OM.TaskList.Shim.Wrap = function(wrappedImpl)
{
   function CallMethod(shim, name, params, bIsAsync, fnCallback, bCausesStateUpdate)
   {
      var callId = JsApi.InstrumentationManager.RaiseInvokingEvent(shim, name);

      if (bIsAsync)
      {
          params.push(HandleCallback);
      }

      var res = shim._impl[name].apply(shim._impl, params);

      if (!bIsAsync)
      {
         HandleCallback(true);
      }

      return res;

      // internal functions follow
      function HandleCallback(success, res)
      {
         JsApi.InstrumentationManager.RaiseEndedEvent(callId);

         if (bIsAsync)
         {
            if (fnCallback != null)
            {
               fnCallback(success, res);
            }
         }

         if (bCausesStateUpdate)
         {
            JsApi.ExtensibilityManager.NotifyStateUpdated(shim._impl);
         }
      }
   }
      wrappedImpl.get_Name = function()
      {
         return CallMethod(this, "get_Name", [], false, null, false);
      };
      wrappedImpl.get_TaskListType = function()
      {
         return CallMethod(this, "get_TaskListType", [], false, null, false);
      };
      wrappedImpl.get_IsCreateNewTaskAllowed = function()
      {
         return CallMethod(this, "get_IsCreateNewTaskAllowed", [], false, null, false);
      };
      wrappedImpl.get_IsGrouped = function()
      {
         return CallMethod(this, "get_IsGrouped", [], false, null, false);
      };
      wrappedImpl.get_IsSorted = function()
      {
         return CallMethod(this, "get_IsSorted", [], false, null, false);
      };
      wrappedImpl.get_SortField = function()
      {
         return CallMethod(this, "get_SortField", [], false, null, false);
      };
      wrappedImpl.get_SortOrder = function()
      {
         return CallMethod(this, "get_SortOrder", [], false, null, false);
      };
      wrappedImpl.CollapseGroup = function(groupName, fnCallback)
      {
         return CallMethod(this, "CollapseGroup", [groupName], true, fnCallback, true);
      };
      wrappedImpl.ExpandGroup = function(groupName, fnCallback)
      {
         return CallMethod(this, "ExpandGroup", [groupName], true, fnCallback, true);
      };
      wrappedImpl.GetTasksInView = function()
      {
         return CallMethod(this, "GetTasksInView", [], false, null, false);
      };
      wrappedImpl.GetGroupsInView = function()
      {
         return CallMethod(this, "GetGroupsInView", [], false, null, false);
      };
      wrappedImpl.GetSelectedTasks = function()
      {
         return CallMethod(this, "GetSelectedTasks", [], false, null, false);
      };
      wrappedImpl.DragTasks = function(taskIdsToMove, rowIdToMoveAfter, fnCallback)
      {
         return CallMethod(this, "DragTasks", [taskIdsToMove,rowIdToMoveAfter], true, fnCallback, true);
      };
      wrappedImpl.SetSelectedTasks = function(taskIds)
      {
         return CallMethod(this, "SetSelectedTasks", [taskIds], false, null, false);
      };
      wrappedImpl.SetCompleted = function(taskIds, completed, fnCallback)
      {
         return CallMethod(this, "SetCompleted", [taskIds,completed], true, fnCallback, true);
      };
      wrappedImpl.SetTaskName = function(taskIds, name, fnCallback)
      {
         return CallMethod(this, "SetTaskName", [taskIds,name], true, fnCallback, true);
      };
      wrappedImpl.SetTaskNameAndDueDate = function(taskIds, name, dueDate, fnCallback)
      {
         return CallMethod(this, "SetTaskNameAndDueDate", [taskIds,name,dueDate], true, fnCallback, true);
      };
      wrappedImpl.SetPinned = function(taskIds, pinned, fnCallback)
      {
         return CallMethod(this, "SetPinned", [taskIds,pinned], true, fnCallback, true);
      };
      wrappedImpl.AddToTimeline = function(taskIds, fnCallback)
      {
         return CallMethod(this, "AddToTimeline", [taskIds], true, fnCallback, true);
      };
      wrappedImpl.RemoveFromTimeline = function(taskIds, fnCallback)
      {
         return CallMethod(this, "RemoveFromTimeline", [taskIds], true, fnCallback, true);
      };
      wrappedImpl.IsOnTimeline = function(taskId)
      {
         return CallMethod(this, "IsOnTimeline", [taskId], false, null, false);
      };
      wrappedImpl.SetDueDate = function(taskIds, dueDate, fnCallback)
      {
         return CallMethod(this, "SetDueDate", [taskIds,dueDate], true, fnCallback, true);
      };
      wrappedImpl.OpenPersonalTaskDialog = function(taskId)
      {
         return CallMethod(this, "OpenPersonalTaskDialog", [taskId], false, null, false);
      };
      wrappedImpl.DeleteTasks = function(taskIds, fnCallback)
      {
         return CallMethod(this, "DeleteTasks", [taskIds], true, fnCallback, true);
      };
      wrappedImpl.GetCompleted = function(taskId)
      {
         return CallMethod(this, "GetCompleted", [taskId], false, null, false);
      };
      wrappedImpl.GetTaskName = function(taskId)
      {
         return CallMethod(this, "GetTaskName", [taskId], false, null, false);
      };
      wrappedImpl.GetPinned = function(taskId)
      {
         return CallMethod(this, "GetPinned", [taskId], false, null, false);
      };
      wrappedImpl.GetDueDate = function(taskId)
      {
         return CallMethod(this, "GetDueDate", [taskId], false, null, false);
      };
      wrappedImpl.InlineEditName = function(taskId)
      {
         return CallMethod(this, "InlineEditName", [taskId], false, null, false);
      };
      wrappedImpl.SetSorting = function(sortField, sortOrder, fnCallback)
      {
         return CallMethod(this, "SetSorting", [sortField,sortOrder], true, fnCallback, true);
      };
};


if( window.Sys != null && Sys.Application != null ){
   Sys.Application.notifyScriptLoaded();
}

NotifyScriptLoadedAndExecuteWaitingJobs("WmaApiShim.generated.js");

